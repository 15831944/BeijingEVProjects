/* This file is produced by the JNI AutoWrapper Utility 
 Copyright (c) 2012 by EarthView Image Inc */
#include "spatial3dengine/geoscenemanager.h"
#include <jni.h>
#include "core_java/global_reference.h"
#include "core_java/jni_load.h"
#include <typeinfo>
namespace EarthView
{
	namespace World
	{
		namespace Spatial
		{
			namespace Math
			{
			}
		}
		namespace Graphic
		{
		}
		namespace Spatial3D
		{
			namespace Atlas
			{
			}
			namespace ModelManager
			{
			}
			namespace Dataset
			{
			}
		}
	}
}
namespace EarthView
{
	namespace World
	{
		namespace Spatial3D
		{
			namespace Atlas
			{
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_spatial3d_SceneTileTypeHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					STT_DEFAULT,
					STT_WEBMERCATOR,
					STT_WGS84
				};
				jintArray array = __env->NewIntArray(3);
				__env->SetIntArrayRegion(array, 0, 3, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_spatial3d_ImageTileDivisionModeHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					TDM_LevelByLevel,
					TDM_BypassLevel
				};
				jintArray array = __env->NewIntArray(2);
				__env->SetIntArrayRegion(array, 0, 2, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_spatial3d_SeaTypeHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					NORMAL,
					WAVE,
					FFTSea
				};
				jintArray array = __env->NewIntArray(3);
				__env->SetIntArrayRegion(array, 0, 3, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_spatial3d_FFTSeaTypeHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					FFT_TESSENDORF,
					FFT_PIERSON_MOSKOWITZ,
					FFT_JONSWAP
				};
				jintArray array = __env->NewIntArray(3);
				__env->SetIntArrayRegion(array, 0, 3, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_spatial3d_SeaExcludeRenderQueueGroupIDTypeHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					REFLECTION_UP_WATER,
					REFLECTION_DOWN_WATER,
					REFRACTION_UP_WATER,
					REFRACTION_DOWN_WATER
				};
				jintArray array = __env->NewIntArray(4);
				__env->SetIntArrayRegion(array, 0, 4, enum_values);
				return array;
			}
			class JCGeoSceneManagerProxy : public EarthView::World::Spatial3D::CGeoSceneManager
			{
			 private:
				EarthView::World::Core::ev_string m_getTerrainCastShadow_void_callback;
				EarthView::World::Core::ev_string m_setTerrainCastShadow_bool_callback;
				EarthView::World::Core::ev_string m_getTileAverageAltitude_ev_real64_ev_real64_callback;
				EarthView::World::Core::ev_string m_getTerrain_ev_int32_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m_getTerrainFromMemoryCache_ev_int32_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m_getTerrainFromDBCache_ev_int32_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m_getTerrainFromServer_ev_int32_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m__alertVisibleObjects_void_callback;
				EarthView::World::Core::ev_string m_createSceneNodeImpl_void_callback;
				EarthView::World::Core::ev_string m_createSceneNodeImpl_EVString_callback;
				EarthView::World::Core::ev_string m_initRenderQueue_void_callback;
				EarthView::World::Core::ev_string m_deriveShadowCasterPass_CPass_callback;
				EarthView::World::Core::ev_string m_deriveShadowReceiverPass_CPass_callback;
				EarthView::World::Core::ev_string m_validatePassForRendering_CPass_callback;
				EarthView::World::Core::ev_string m_validateRenderableForRendering_CPass_CRenderable_callback;
				EarthView::World::Core::ev_string m_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback;
				EarthView::World::Core::ev_string m_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m_useRenderableViewProjMode_CRenderable_ev_bool_callback;
				EarthView::World::Core::ev_string m_resetViewProjMode_ev_bool_callback;
				EarthView::World::Core::ev_string m_firePreRenderQueues_void_callback;
				EarthView::World::Core::ev_string m_firePostRenderQueues_void_callback;
				EarthView::World::Core::ev_string m_fireRenderQueueStarted_ev_uint8_EVString_callback;
				EarthView::World::Core::ev_string m_fireRenderQueueEnded_ev_uint8_EVString_callback;
				EarthView::World::Core::ev_string m_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback;
				EarthView::World::Core::ev_string m_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback;
				EarthView::World::Core::ev_string m_fireShadowTexturesUpdated_ev_size_t_callback;
				EarthView::World::Core::ev_string m_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback;
				EarthView::World::Core::ev_string m_fireShadowTexturesPreReceiver_CLight_CFrustum_callback;
				EarthView::World::Core::ev_string m_firePreUpdateSceneGraph_CCamera_callback;
				EarthView::World::Core::ev_string m_firePostUpdateSceneGraph_CCamera_callback;
				EarthView::World::Core::ev_string m_firePreFindVisibleObjects_CViewport_callback;
				EarthView::World::Core::ev_string m_firePostFindVisibleObjects_CViewport_callback;
				EarthView::World::Core::ev_string m_fireSceneManagerDestroyed_void_callback;
				EarthView::World::Core::ev_string m_setViewport_CViewport_callback;
				EarthView::World::Core::ev_string m_renderVisibleObjectsDefaultSequence_void_callback;
				EarthView::World::Core::ev_string m_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback;
				EarthView::World::Core::ev_string m_prepareRenderQueue_void_callback;
				EarthView::World::Core::ev_string m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_createAutoParamDataSource_void_callback;
				EarthView::World::Core::ev_string m_findLightsAffectingFrustum_CCamera_callback;
				EarthView::World::Core::ev_string m_initShadowVolumeMaterials_void_callback;
				EarthView::World::Core::ev_string m_ensureShadowTexturesCreated_void_callback;
				EarthView::World::Core::ev_string m_destroyShadowTextures_void_callback;
				EarthView::World::Core::ev_string m_prepareShadowTextures_CCamera_CViewport_LightList_callback;
				EarthView::World::Core::ev_string m_prepareShadowTextures_CCamera_CViewport_callback;
				EarthView::World::Core::ev_string m_setImageDefaultMaterial_CMaterialPtr_callback;
				EarthView::World::Core::ev_string m_setImageUseDefaultMaterial_ev_bool_callback;
				EarthView::World::Core::ev_string m_getSunPosition_void_callback;
				EarthView::World::Core::ev_string m_setAtmosphereVisible_ev_bool_callback;
				EarthView::World::Core::ev_string m_storeAtmosphereVisibleState_void_callback;
				EarthView::World::Core::ev_string m_restoreAtmosphereVisibleState_void_callback;
				EarthView::World::Core::ev_string m_setSunVisible_ev_bool_callback;
				EarthView::World::Core::ev_string m__pauseRendering_void_callback;
				EarthView::World::Core::ev_string m__resumeRendering_RenderContext_callback;
				EarthView::World::Core::ev_string m_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback;
				EarthView::World::Core::ev_string m_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_findShadowCastersForLight_CLight_CCamera_callback;
				EarthView::World::Core::ev_string m_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_updateRenderQueueSplitOptions_void_callback;
				EarthView::World::Core::ev_string m_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_buildAndSetScissor_LightList_CCamera_callback;
				EarthView::World::Core::ev_string m_buildScissor_CLight_CCamera_RealRect_callback;
				EarthView::World::Core::ev_string m_resetScissor_void_callback;
				EarthView::World::Core::ev_string m_buildAndSetLightClip_LightList_callback;
				EarthView::World::Core::ev_string m_buildLightClip_CLight_PlaneList_callback;
				EarthView::World::Core::ev_string m_resetLightClip_void_callback;
				EarthView::World::Core::ev_string m_checkCachedLightClippingInfo_void_callback;
				EarthView::World::Core::ev_string m_useLights_LightList_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setViewMatrix_CMatrix4_callback;
				EarthView::World::Core::ev_string m_useLightsGpuProgram_CPass_LightList_callback;
				EarthView::World::Core::ev_string m_bindGpuProgram_CGpuProgram_callback;
				EarthView::World::Core::ev_string m_updateGpuProgramParameters_CPass_callback;
				EarthView::World::Core::ev_string m_getTypeName_void_callback;
				EarthView::World::Core::ev_string m_createCamera_EVString_callback;
				EarthView::World::Core::ev_string m_getCamera_EVString_callback;
				EarthView::World::Core::ev_string m_hasCamera_EVString_callback;
				EarthView::World::Core::ev_string m_destroyCamera_CCamera_callback;
				EarthView::World::Core::ev_string m_destroyCamera_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllCameras_void_callback;
				EarthView::World::Core::ev_string m_createLight_EVString_callback;
				EarthView::World::Core::ev_string m_createLight_void_callback;
				EarthView::World::Core::ev_string m_getLightCount_void_callback;
				EarthView::World::Core::ev_string m_getLight_ev_uint16_callback;
				EarthView::World::Core::ev_string m_getLight_EVString_callback;
				EarthView::World::Core::ev_string m_hasLight_EVString_callback;
				EarthView::World::Core::ev_string m_getLightClippingPlanes_CLight_callback;
				EarthView::World::Core::ev_string m_getLightScissorRect_CLight_CCamera_callback;
				EarthView::World::Core::ev_string m_destroyLight_EVString_callback;
				EarthView::World::Core::ev_string m_destroyLight_CLight_callback;
				EarthView::World::Core::ev_string m_destroyAllLights_void_callback;
				EarthView::World::Core::ev_string m_getSoftShadowTexName_void_callback;
				EarthView::World::Core::ev_string m_getShadowTexCam_void_callback;
				EarthView::World::Core::ev_string m_getSoftShadowProjMatrix_ev_uint16_callback;
				EarthView::World::Core::ev_string m_getCascadeEyeSpaceDepthArray_void_callback;
				EarthView::World::Core::ev_string m_getSoftShadowNearClip_ev_uint8_callback;
				EarthView::World::Core::ev_string m_getSoftShadowFarClip_ev_uint8_callback;
				EarthView::World::Core::ev_string m_getIsUseSoftShadowFitToCascadesMode_void_callback;
				EarthView::World::Core::ev_string m_setIsUseSoftShadowFitToCascadesMode_bool_callback;
				EarthView::World::Core::ev_string m_getCurrentClipIndex_void_callback;
				EarthView::World::Core::ev_string m_getIsUseSoftShadowTechnique_void_callback;
				EarthView::World::Core::ev_string m_setIsUseSoftShadowTechnique_bool_callback;
				EarthView::World::Core::ev_string m_getCascadePartitionsPercent_void_callback;
				EarthView::World::Core::ev_string m_setCascadePartitionsPercent_float_callback;
				EarthView::World::Core::ev_string m_getCascadePartitionsDistance_ev_uint8_callback;
				EarthView::World::Core::ev_string m_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback;
				EarthView::World::Core::ev_string m_getSoftShadowOffsetFormat_void_callback;
				EarthView::World::Core::ev_string m_checkShadowCasterInFrustum_CCamera_callback;
				EarthView::World::Core::ev_string m_hasShadowCasterInFrustum_void_callback;
				EarthView::World::Core::ev_string m_getSoftShadowLightBleedPower_void_callback;
				EarthView::World::Core::ev_string m_setSoftShadowLightBleedPower_Real_callback;
				EarthView::World::Core::ev_string m_getSoftShadowDepthOffset_void_callback;
				EarthView::World::Core::ev_string m_setSoftShadowDepthOffset_Real_callback;
				EarthView::World::Core::ev_string m_getSoftShadowNormalFactor_void_callback;
				EarthView::World::Core::ev_string m_setSoftShadowNormalFactor_float_callback;
				EarthView::World::Core::ev_string m__notifyLightsDirty_void_callback;
				EarthView::World::Core::ev_string m__getLightsAffectingFrustum_void_callback;
				EarthView::World::Core::ev_string m__populateLightList_CVector3_Real_LightList_ev_uint32_callback;
				EarthView::World::Core::ev_string m__populateLightList_CVector3_Real_LightList_callback;
				EarthView::World::Core::ev_string m_showImage_ev_bool_callback;
				EarthView::World::Core::ev_string m_getImageVisible_void_callback;
				EarthView::World::Core::ev_string m_showOcean_ev_bool_callback;
				EarthView::World::Core::ev_string m_getOceanVisible_void_callback;
				EarthView::World::Core::ev_string m__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback;
				EarthView::World::Core::ev_string m__populateLightList_CSceneNode_Real_LightList_callback;
				EarthView::World::Core::ev_string m_createSceneNode_void_callback;
				EarthView::World::Core::ev_string m_createSceneNode_EVString_callback;
				EarthView::World::Core::ev_string m_destroySceneNode_EVString_callback;
				EarthView::World::Core::ev_string m_destroySceneNode_CSceneNode_callback;
				EarthView::World::Core::ev_string m_getRootSceneNode_void_callback;
				EarthView::World::Core::ev_string m_getSceneNode_EVString_callback;
				EarthView::World::Core::ev_string m_hasSceneNode_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_EVString_IntVector_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_EVString_IntVector_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_CMeshPtr_IntVector_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_CMeshPtr_callback;
				EarthView::World::Core::ev_string m_createEntity_CMeshPtr_IntVector_callback;
				EarthView::World::Core::ev_string m_createEntity_CMeshPtr_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_IntVector_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_PrefabType_callback;
				EarthView::World::Core::ev_string m_createEntity_PrefabType_callback;
				EarthView::World::Core::ev_string m_getEntity_EVString_callback;
				EarthView::World::Core::ev_string m_hasEntity_EVString_callback;
				EarthView::World::Core::ev_string m_destroyEntity_CEntity_callback;
				EarthView::World::Core::ev_string m_destroyEntity_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllEntities_void_callback;
				EarthView::World::Core::ev_string m_createManualObject_EVString_callback;
				EarthView::World::Core::ev_string m_createManualObject_void_callback;
				EarthView::World::Core::ev_string m_getManualObject_EVString_callback;
				EarthView::World::Core::ev_string m_hasManualObject_EVString_callback;
				EarthView::World::Core::ev_string m_destroyManualObject_CManualObject_callback;
				EarthView::World::Core::ev_string m_destroyManualObject_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllManualObjects_void_callback;
				EarthView::World::Core::ev_string m_usingWebMercator_void_callback;
				EarthView::World::Core::ev_string m_createBillboardChain_EVString_callback;
				EarthView::World::Core::ev_string m_createBillboardChain_void_callback;
				EarthView::World::Core::ev_string m_getBillboardChain_EVString_callback;
				EarthView::World::Core::ev_string m_hasBillboardChain_EVString_callback;
				EarthView::World::Core::ev_string m_destroyBillboardChain_CBillboardChain_callback;
				EarthView::World::Core::ev_string m_destroyBillboardChain_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllBillboardChains_void_callback;
				EarthView::World::Core::ev_string m_createRibbonTrail_EVString_callback;
				EarthView::World::Core::ev_string m_createRibbonTrail_void_callback;
				EarthView::World::Core::ev_string m_getRibbonTrail_EVString_callback;
				EarthView::World::Core::ev_string m_hasRibbonTrail_EVString_callback;
				EarthView::World::Core::ev_string m_destroyRibbonTrail_CRibbonTrail_callback;
				EarthView::World::Core::ev_string m_destroyRibbonTrail_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllRibbonTrails_void_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_EVString_ev_size_t_EVString_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_EVString_ev_size_t_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_EVString_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_ev_size_t_EVString_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_ev_size_t_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_void_callback;
				EarthView::World::Core::ev_string m_getParticleSystem_EVString_callback;
				EarthView::World::Core::ev_string m_hasParticleSystem_EVString_callback;
				EarthView::World::Core::ev_string m_destroyParticleSystem_CParticleSystem_callback;
				EarthView::World::Core::ev_string m_destroyParticleSystem_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllParticleSystems_void_callback;
				EarthView::World::Core::ev_string m_clearScene_void_callback;
				EarthView::World::Core::ev_string m_prepareWorldGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_prepareWorldGeometry_DataStreamPtr_EVString_callback;
				EarthView::World::Core::ev_string m_prepareWorldGeometry_DataStreamPtr_callback;
				EarthView::World::Core::ev_string m_setWorldGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_setWorldGeometry_DataStreamPtr_EVString_callback;
				EarthView::World::Core::ev_string m_setWorldGeometry_DataStreamPtr_callback;
				EarthView::World::Core::ev_string m_estimateWorldGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_estimateWorldGeometry_DataStreamPtr_EVString_callback;
				EarthView::World::Core::ev_string m_estimateWorldGeometry_DataStreamPtr_callback;
				EarthView::World::Core::ev_string m_getSuggestedViewpoint_ev_bool_callback;
				EarthView::World::Core::ev_string m_getSuggestedViewpoint_void_callback;
				EarthView::World::Core::ev_string m_setOption_EVString_void_callback;
				EarthView::World::Core::ev_string m_getOption_EVString_void_callback;
				EarthView::World::Core::ev_string m_hasOption_EVString_callback;
				EarthView::World::Core::ev_string m_getOptionValues_EVString_StringVector_callback;
				EarthView::World::Core::ev_string m_getOptionKeys_StringVector_callback;
				EarthView::World::Core::ev_string m__updateSceneGraph_CCamera_callback;
				EarthView::World::Core::ev_string m__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback;
				EarthView::World::Core::ev_string m__applySceneAnimations_void_callback;
				EarthView::World::Core::ev_string m__renderVisibleObjects_void_callback;
				EarthView::World::Core::ev_string m__renderScene_CCamera_CViewport_ev_bool_callback;
				EarthView::World::Core::ev_string m__queueSkiesForRendering_CCamera_callback;
				EarthView::World::Core::ev_string m__setDestinationRenderSystem_CRenderSystem_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyPlaneEnabled_ev_bool_callback;
				EarthView::World::Core::ev_string m_isSkyPlaneEnabled_void_callback;
				EarthView::World::Core::ev_string m_getSkyPlaneNode_void_callback;
				EarthView::World::Core::ev_string m_getSkyPlaneGenParameters_void_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_Real_ev_bool_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_Real_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_Real_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyBoxEnabled_ev_bool_callback;
				EarthView::World::Core::ev_string m_isSkyBoxEnabled_void_callback;
				EarthView::World::Core::ev_string m_getSkyBoxNode_void_callback;
				EarthView::World::Core::ev_string m_getSkyBoxGenParameters_void_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyDomeEnabled_ev_bool_callback;
				EarthView::World::Core::ev_string m_isSkyDomeEnabled_void_callback;
				EarthView::World::Core::ev_string m_getSkyDomeNode_void_callback;
				EarthView::World::Core::ev_string m_getSkyDomeGenParameters_void_callback;
				EarthView::World::Core::ev_string m_getFogMode_void_callback;
				EarthView::World::Core::ev_string m_getFogColour_void_callback;
				EarthView::World::Core::ev_string m_getFogStart_void_callback;
				EarthView::World::Core::ev_string m_getFogEnd_void_callback;
				EarthView::World::Core::ev_string m_getFogDensity_void_callback;
				EarthView::World::Core::ev_string m_createBillboardSet_EVString_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createBillboardSet_EVString_callback;
				EarthView::World::Core::ev_string m_createBillboardSet_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createBillboardSet_void_callback;
				EarthView::World::Core::ev_string m_getBillboardSet_EVString_callback;
				EarthView::World::Core::ev_string m_hasBillboardSet_EVString_callback;
				EarthView::World::Core::ev_string m_destroyBillboardSet_CBillboardSet_callback;
				EarthView::World::Core::ev_string m_destroyBillboardSet_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllBillboardSets_void_callback;
				EarthView::World::Core::ev_string m_setDisplaySceneNodes_ev_bool_callback;
				EarthView::World::Core::ev_string m_getDisplaySceneNodes_void_callback;
				EarthView::World::Core::ev_string m_createAnimation_EVString_Real_callback;
				EarthView::World::Core::ev_string m_getAnimation_EVString_callback;
				EarthView::World::Core::ev_string m_hasAnimation_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAnimation_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllAnimations_void_callback;
				EarthView::World::Core::ev_string m_createAnimationState_EVString_callback;
				EarthView::World::Core::ev_string m_getAnimationState_EVString_callback;
				EarthView::World::Core::ev_string m_hasAnimationState_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAnimationState_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllAnimationStates_void_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback;
				EarthView::World::Core::ev_string m_getRenderQueue_void_callback;
				EarthView::World::Core::ev_string m_addRenderQueueListener_CRenderQueueListener_callback;
				EarthView::World::Core::ev_string m_removeRenderQueueListener_CRenderQueueListener_callback;
				EarthView::World::Core::ev_string m_addRenderObjectListener_CRenderObjectListener_callback;
				EarthView::World::Core::ev_string m_removeRenderObjectListener_CRenderObjectListener_callback;
				EarthView::World::Core::ev_string m_addSpecialCaseRenderQueue_ev_uint8_callback;
				EarthView::World::Core::ev_string m_removeSpecialCaseRenderQueue_ev_uint8_callback;
				EarthView::World::Core::ev_string m_clearSpecialCaseRenderQueues_void_callback;
				EarthView::World::Core::ev_string m_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback;
				EarthView::World::Core::ev_string m_getSpecialCaseRenderQueueMode_void_callback;
				EarthView::World::Core::ev_string m_isRenderQueueToBeProcessed_ev_uint8_callback;
				EarthView::World::Core::ev_string m_setWorldGeometryRenderQueue_ev_uint8_callback;
				EarthView::World::Core::ev_string m_getWorldGeometryRenderQueue_void_callback;
				EarthView::World::Core::ev_string m_showBoundingBoxes_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShowBoundingBoxes_void_callback;
				EarthView::World::Core::ev_string m__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback;
				EarthView::World::Core::ev_string m_createAABBQuery_CAxisAlignedBox_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createAABBQuery_CAxisAlignedBox_callback;
				EarthView::World::Core::ev_string m_createSphereQuery_CSphere_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createSphereQuery_CSphere_callback;
				EarthView::World::Core::ev_string m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback;
				EarthView::World::Core::ev_string m_createRayQuery_CRay_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createRayQuery_CRay_callback;
				EarthView::World::Core::ev_string m_createIntersectionQuery_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createIntersectionQuery_void_callback;
				EarthView::World::Core::ev_string m_destroyQuery_CSceneQuery_callback;
				EarthView::World::Core::ev_string m_setShadowTechnique_ShadowTechnique_callback;
				EarthView::World::Core::ev_string m_getShadowTechnique_void_callback;
				EarthView::World::Core::ev_string m_setShowDebugShadows_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShowDebugShadows_void_callback;
				EarthView::World::Core::ev_string m_setShadowColour_CColourValue_callback;
				EarthView::World::Core::ev_string m_getShadowColour_void_callback;
				EarthView::World::Core::ev_string m_setShadowDirectionalLightExtrusionDistance_Real_callback;
				EarthView::World::Core::ev_string m_getShadowDirectionalLightExtrusionDistance_void_callback;
				EarthView::World::Core::ev_string m_setShadowColorRRatio_Real_callback;
				EarthView::World::Core::ev_string m_setShadowColorGRatio_Real_callback;
				EarthView::World::Core::ev_string m_setShadowColorBRatio_Real_callback;
				EarthView::World::Core::ev_string m_getShadowColorRRatio_void_callback;
				EarthView::World::Core::ev_string m_getShadowColorGRatio_void_callback;
				EarthView::World::Core::ev_string m_getShadowColorBRatio_void_callback;
				EarthView::World::Core::ev_string m_setShadowFarDistance_Real_callback;
				EarthView::World::Core::ev_string m_getShadowFarDistance_void_callback;
				EarthView::World::Core::ev_string m_getShadowFarDistanceSquared_void_callback;
				EarthView::World::Core::ev_string m_setShadowIndexBufferSize_ev_size_t_callback;
				EarthView::World::Core::ev_string m_getShadowIndexBufferSize_void_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSize_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback;
				EarthView::World::Core::ev_string m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback;
				EarthView::World::Core::ev_string m_setShadowTexturePixelFormat_PixelFormat_callback;
				EarthView::World::Core::ev_string m_setShadowTextureFSAA_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureCount_ev_size_t_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSettings_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_getShadowTexture_ev_size_t_callback;
				EarthView::World::Core::ev_string m_setShadowDirLightTextureOffset_Real_callback;
				EarthView::World::Core::ev_string m_getShadowDirLightTextureOffset_void_callback;
				EarthView::World::Core::ev_string m_setShadowTextureFadeStart_Real_callback;
				EarthView::World::Core::ev_string m_setShadowTextureFadeEnd_Real_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSelfShadow_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShadowTextureSelfShadow_void_callback;
				EarthView::World::Core::ev_string m_setShadowTextureCasterMaterial_EVString_callback;
				EarthView::World::Core::ev_string m_setShadowTextureReceiverMaterial_EVString_callback;
				EarthView::World::Core::ev_string m_setShadowCasterRenderBackFaces_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShadowCasterRenderBackFaces_void_callback;
				EarthView::World::Core::ev_string m_setShadowCameraSetup_ShadowCameraSetupPtr_callback;
				EarthView::World::Core::ev_string m_getShadowCameraSetup_void_callback;
				EarthView::World::Core::ev_string m_setShadowUseInfiniteFarPlane_ev_bool_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueStencilBased_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueTextureBased_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueModulative_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueAdditive_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueIntegrated_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueInUse_void_callback;
				EarthView::World::Core::ev_string m_setShadowUseLightClipPlanes_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShadowUseLightClipPlanes_void_callback;
				EarthView::World::Core::ev_string m__setActiveCompositorChain_CCompositorChain_callback;
				EarthView::World::Core::ev_string m_setLateMaterialResolving_ev_bool_callback;
				EarthView::World::Core::ev_string m_isLateMaterialResolving_void_callback;
				EarthView::World::Core::ev_string m__getActiveCompositorChain_void_callback;
				EarthView::World::Core::ev_string m_addListener_CSceneManagerListener_callback;
				EarthView::World::Core::ev_string m_removeListener_CSceneManagerListener_callback;
				EarthView::World::Core::ev_string m_existListener_CSceneManagerListener_callback;
				EarthView::World::Core::ev_string m_createStaticGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_getStaticGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_hasStaticGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_destroyStaticGeometry_CStaticGeometry_callback;
				EarthView::World::Core::ev_string m_destroyStaticGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllStaticGeometry_void_callback;
				EarthView::World::Core::ev_string m_createInstancedGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_getInstancedGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstancedGeometry_CInstancedGeometry_callback;
				EarthView::World::Core::ev_string m_destroyInstancedGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllInstancedGeometry_void_callback;
				EarthView::World::Core::ev_string m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback;
				EarthView::World::Core::ev_string m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback;
				EarthView::World::Core::ev_string m_getInstanceManager_EVString_callback;
				EarthView::World::Core::ev_string m_hasInstanceManager_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstanceManager_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstanceManager_CInstanceManager_callback;
				EarthView::World::Core::ev_string m_destroyInstanceManagerWithThreadSafe_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback;
				EarthView::World::Core::ev_string m_destroyAllInstanceManagers_void_callback;
				EarthView::World::Core::ev_string m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback;
				EarthView::World::Core::ev_string m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback;
				EarthView::World::Core::ev_string m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_createInstancedEntity_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstancedEntity_CInstancedEntity_callback;
				EarthView::World::Core::ev_string m_createMovableObject_EVString_EVString_CommonStringPairList_callback;
				EarthView::World::Core::ev_string m_createMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_createMovableObject_EVString_CommonStringPairList_callback;
				EarthView::World::Core::ev_string m_createMovableObject_EVString_callback;
				EarthView::World::Core::ev_string m_destroyMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_destroyMovableObject_CMovableObject_callback;
				EarthView::World::Core::ev_string m_destroyAllMovableObjectsByType_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllMovableObjects_void_callback;
				EarthView::World::Core::ev_string m_getMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_hasMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_getMovableObjectIterator_EVString_callback;
				EarthView::World::Core::ev_string m_injectMovableObject_CMovableObject_callback;
				EarthView::World::Core::ev_string m_extractMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_extractMovableObject_CMovableObject_callback;
				EarthView::World::Core::ev_string m_extractAllMovableObjectsByType_EVString_callback;
				EarthView::World::Core::ev_string m_setVisibilityMask_ev_uint32_callback;
				EarthView::World::Core::ev_string m_getVisibilityMask_void_callback;
				EarthView::World::Core::ev_string m_setFindVisibleObjects_ev_bool_callback;
				EarthView::World::Core::ev_string m_getFindVisibleObjects_void_callback;
				EarthView::World::Core::ev_string m_setNormaliseNormalsOnScale_ev_bool_callback;
				EarthView::World::Core::ev_string m_getNormaliseNormalsOnScale_void_callback;
				EarthView::World::Core::ev_string m_setFlipCullingOnNegativeScale_ev_bool_callback;
				EarthView::World::Core::ev_string m_getFlipCullingOnNegativeScale_void_callback;
				EarthView::World::Core::ev_string m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m__injectRenderWithPass_CPass_CRenderable_ev_bool_callback;
				EarthView::World::Core::ev_string m__injectRenderWithPass_CPass_CRenderable_callback;
				EarthView::World::Core::ev_string m__suppressRenderStateChanges_ev_bool_callback;
				EarthView::World::Core::ev_string m__areRenderStateChangesSuppressed_void_callback;
				EarthView::World::Core::ev_string m__setPass_CPass_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m__setPass_CPass_ev_bool_callback;
				EarthView::World::Core::ev_string m__setPass_CPass_callback;
				EarthView::World::Core::ev_string m__markGpuParamsDirty_ev_uint16_callback;
				EarthView::World::Core::ev_string m__suppressShadows_ev_bool_callback;
				EarthView::World::Core::ev_string m__areShadowsSuppressed_void_callback;
				EarthView::World::Core::ev_string m__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_setCameraRelativeRendering_ev_bool_callback;
				EarthView::World::Core::ev_string m_getCameraRelativeRendering_void_callback;
				EarthView::World::Core::ev_string m_getHeightAt_Real_Real_ev_real32_callback;
				EarthView::World::Core::ev_string m_getBestHeightAt_Real_Real_callback;
				EarthView::World::Core::ev_string m_getHeightAtTile_Real_Real_callback;
				EarthView::World::Core::ev_string m_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback;
				EarthView::World::Core::ev_string m_addTempLayer_ILayer_callback;
				EarthView::World::Core::ev_string m_removeTempLayer_ILayer_callback;
				EarthView::World::Core::ev_string m_updateQuadImage_bool_bool_bool_callback;
				EarthView::World::Core::ev_string m_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback;
				EarthView::World::Core::ev_string m_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_setCollisionDetectionEnable_ev_bool_callback;
			public:
				JCGeoSceneManagerProxy(EarthView::World::Core::CNameValuePairList *pList) : CGeoSceneManager(pList)
				{
				}
				ev_void unRegisterJavaReference()
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
					if(__gr != NULL)
					{
						delete __gr;
						this->registerJavaReference(NULL);
					}
				}
			public:
				void register_getTerrainCastShadow_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTerrainCastShadow_void_callback = __method;
				}
				void register_setTerrainCastShadow_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setTerrainCastShadow_bool_callback = __method;
				}
				void register_getTileAverageAltitude_ev_real64_ev_real64_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTileAverageAltitude_ev_real64_ev_real64_callback = __method;
				}
				void register_getTerrain_ev_int32_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTerrain_ev_int32_ev_int32_ev_int32_callback = __method;
				}
				void register_getTerrainFromMemoryCache_ev_int32_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTerrainFromMemoryCache_ev_int32_ev_int32_ev_int32_callback = __method;
				}
				void register_getTerrainFromDBCache_ev_int32_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTerrainFromDBCache_ev_int32_ev_int32_ev_int32_callback = __method;
				}
				void register_getTerrainFromServer_ev_int32_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTerrainFromServer_ev_int32_ev_int32_ev_int32_callback = __method;
				}
				void register__alertVisibleObjects_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__alertVisibleObjects_void_callback = __method;
				}
				void register_createSceneNodeImpl_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSceneNodeImpl_void_callback = __method;
				}
				void register_createSceneNodeImpl_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSceneNodeImpl_EVString_callback = __method;
				}
				void register_initRenderQueue_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_initRenderQueue_void_callback = __method;
				}
				void register_deriveShadowCasterPass_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_deriveShadowCasterPass_CPass_callback = __method;
				}
				void register_deriveShadowReceiverPass_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_deriveShadowReceiverPass_CPass_callback = __method;
				}
				void register_validatePassForRendering_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_validatePassForRendering_CPass_callback = __method;
				}
				void register_validateRenderableForRendering_CPass_CRenderable_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_validateRenderableForRendering_CPass_CRenderable_callback = __method;
				}
				void register_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback = __method;
				}
				void register_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register_useRenderableViewProjMode_CRenderable_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_useRenderableViewProjMode_CRenderable_ev_bool_callback = __method;
				}
				void register_resetViewProjMode_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_resetViewProjMode_ev_bool_callback = __method;
				}
				void register_firePreRenderQueues_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePreRenderQueues_void_callback = __method;
				}
				void register_firePostRenderQueues_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePostRenderQueues_void_callback = __method;
				}
				void register_fireRenderQueueStarted_ev_uint8_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireRenderQueueStarted_ev_uint8_EVString_callback = __method;
				}
				void register_fireRenderQueueEnded_ev_uint8_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireRenderQueueEnded_ev_uint8_EVString_callback = __method;
				}
				void register_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback = __method;
				}
				void register_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback = __method;
				}
				void register_fireShadowTexturesUpdated_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireShadowTexturesUpdated_ev_size_t_callback = __method;
				}
				void register_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback = __method;
				}
				void register_fireShadowTexturesPreReceiver_CLight_CFrustum_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireShadowTexturesPreReceiver_CLight_CFrustum_callback = __method;
				}
				void register_firePreUpdateSceneGraph_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePreUpdateSceneGraph_CCamera_callback = __method;
				}
				void register_firePostUpdateSceneGraph_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePostUpdateSceneGraph_CCamera_callback = __method;
				}
				void register_firePreFindVisibleObjects_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePreFindVisibleObjects_CViewport_callback = __method;
				}
				void register_firePostFindVisibleObjects_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePostFindVisibleObjects_CViewport_callback = __method;
				}
				void register_fireSceneManagerDestroyed_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireSceneManagerDestroyed_void_callback = __method;
				}
				void register_setViewport_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setViewport_CViewport_callback = __method;
				}
				void register_renderVisibleObjectsDefaultSequence_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderVisibleObjectsDefaultSequence_void_callback = __method;
				}
				void register_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback = __method;
				}
				void register_prepareRenderQueue_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareRenderQueue_void_callback = __method;
				}
				void register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback = __method;
				}
				void register_createAutoParamDataSource_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAutoParamDataSource_void_callback = __method;
				}
				void register_findLightsAffectingFrustum_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_findLightsAffectingFrustum_CCamera_callback = __method;
				}
				void register_initShadowVolumeMaterials_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_initShadowVolumeMaterials_void_callback = __method;
				}
				void register_ensureShadowTexturesCreated_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_ensureShadowTexturesCreated_void_callback = __method;
				}
				void register_destroyShadowTextures_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyShadowTextures_void_callback = __method;
				}
				void register_prepareShadowTextures_CCamera_CViewport_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareShadowTextures_CCamera_CViewport_LightList_callback = __method;
				}
				void register_prepareShadowTextures_CCamera_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareShadowTextures_CCamera_CViewport_callback = __method;
				}
				void register_setImageDefaultMaterial_CMaterialPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setImageDefaultMaterial_CMaterialPtr_callback = __method;
				}
				void register_setImageUseDefaultMaterial_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setImageUseDefaultMaterial_ev_bool_callback = __method;
				}
				void register_getSunPosition_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSunPosition_void_callback = __method;
				}
				void register_setAtmosphereVisible_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setAtmosphereVisible_ev_bool_callback = __method;
				}
				void register_storeAtmosphereVisibleState_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_storeAtmosphereVisibleState_void_callback = __method;
				}
				void register_restoreAtmosphereVisibleState_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_restoreAtmosphereVisibleState_void_callback = __method;
				}
				void register_setSunVisible_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSunVisible_ev_bool_callback = __method;
				}
				void register__pauseRendering_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__pauseRendering_void_callback = __method;
				}
				void register__resumeRendering_RenderContext_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__resumeRendering_RenderContext_callback = __method;
				}
				void register_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback = __method;
				}
				void register_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback = __method;
				}
				void register_findShadowCastersForLight_CLight_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_findShadowCastersForLight_CLight_CCamera_callback = __method;
				}
				void register_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback = __method;
				}
				void register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback = __method;
				}
				void register_updateRenderQueueSplitOptions_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateRenderQueueSplitOptions_void_callback = __method;
				}
				void register_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback = __method;
				}
				void register_buildAndSetScissor_LightList_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_buildAndSetScissor_LightList_CCamera_callback = __method;
				}
				void register_buildScissor_CLight_CCamera_RealRect_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_buildScissor_CLight_CCamera_RealRect_callback = __method;
				}
				void register_resetScissor_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_resetScissor_void_callback = __method;
				}
				void register_buildAndSetLightClip_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_buildAndSetLightClip_LightList_callback = __method;
				}
				void register_buildLightClip_CLight_PlaneList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_buildLightClip_CLight_PlaneList_callback = __method;
				}
				void register_resetLightClip_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_resetLightClip_void_callback = __method;
				}
				void register_checkCachedLightClippingInfo_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_checkCachedLightClippingInfo_void_callback = __method;
				}
				void register_useLights_LightList_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_useLights_LightList_ev_uint16_callback = __method;
				}
				void register_setViewMatrix_CMatrix4_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setViewMatrix_CMatrix4_callback = __method;
				}
				void register_useLightsGpuProgram_CPass_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_useLightsGpuProgram_CPass_LightList_callback = __method;
				}
				void register_bindGpuProgram_CGpuProgram_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_bindGpuProgram_CGpuProgram_callback = __method;
				}
				void register_updateGpuProgramParameters_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateGpuProgramParameters_CPass_callback = __method;
				}
				void register_getTypeName_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTypeName_void_callback = __method;
				}
				void register_createCamera_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createCamera_EVString_callback = __method;
				}
				void register_getCamera_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCamera_EVString_callback = __method;
				}
				void register_hasCamera_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasCamera_EVString_callback = __method;
				}
				void register_destroyCamera_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyCamera_CCamera_callback = __method;
				}
				void register_destroyCamera_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyCamera_EVString_callback = __method;
				}
				void register_destroyAllCameras_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllCameras_void_callback = __method;
				}
				void register_createLight_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createLight_EVString_callback = __method;
				}
				void register_createLight_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createLight_void_callback = __method;
				}
				void register_getLightCount_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLightCount_void_callback = __method;
				}
				void register_getLight_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLight_ev_uint16_callback = __method;
				}
				void register_getLight_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLight_EVString_callback = __method;
				}
				void register_hasLight_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasLight_EVString_callback = __method;
				}
				void register_getLightClippingPlanes_CLight_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLightClippingPlanes_CLight_callback = __method;
				}
				void register_getLightScissorRect_CLight_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLightScissorRect_CLight_CCamera_callback = __method;
				}
				void register_destroyLight_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyLight_EVString_callback = __method;
				}
				void register_destroyLight_CLight_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyLight_CLight_callback = __method;
				}
				void register_destroyAllLights_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllLights_void_callback = __method;
				}
				void register_getSoftShadowTexName_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowTexName_void_callback = __method;
				}
				void register_getShadowTexCam_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowTexCam_void_callback = __method;
				}
				void register_getSoftShadowProjMatrix_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowProjMatrix_ev_uint16_callback = __method;
				}
				void register_getCascadeEyeSpaceDepthArray_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCascadeEyeSpaceDepthArray_void_callback = __method;
				}
				void register_getSoftShadowNearClip_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowNearClip_ev_uint8_callback = __method;
				}
				void register_getSoftShadowFarClip_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowFarClip_ev_uint8_callback = __method;
				}
				void register_getIsUseSoftShadowFitToCascadesMode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getIsUseSoftShadowFitToCascadesMode_void_callback = __method;
				}
				void register_setIsUseSoftShadowFitToCascadesMode_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setIsUseSoftShadowFitToCascadesMode_bool_callback = __method;
				}
				void register_getCurrentClipIndex_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCurrentClipIndex_void_callback = __method;
				}
				void register_getIsUseSoftShadowTechnique_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getIsUseSoftShadowTechnique_void_callback = __method;
				}
				void register_setIsUseSoftShadowTechnique_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setIsUseSoftShadowTechnique_bool_callback = __method;
				}
				void register_getCascadePartitionsPercent_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCascadePartitionsPercent_void_callback = __method;
				}
				void register_setCascadePartitionsPercent_float_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setCascadePartitionsPercent_float_callback = __method;
				}
				void register_getCascadePartitionsDistance_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCascadePartitionsDistance_ev_uint8_callback = __method;
				}
				void register_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback = __method;
				}
				void register_getSoftShadowOffsetFormat_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowOffsetFormat_void_callback = __method;
				}
				void register_checkShadowCasterInFrustum_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_checkShadowCasterInFrustum_CCamera_callback = __method;
				}
				void register_hasShadowCasterInFrustum_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasShadowCasterInFrustum_void_callback = __method;
				}
				void register_getSoftShadowLightBleedPower_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowLightBleedPower_void_callback = __method;
				}
				void register_setSoftShadowLightBleedPower_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSoftShadowLightBleedPower_Real_callback = __method;
				}
				void register_getSoftShadowDepthOffset_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowDepthOffset_void_callback = __method;
				}
				void register_setSoftShadowDepthOffset_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSoftShadowDepthOffset_Real_callback = __method;
				}
				void register_getSoftShadowNormalFactor_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowNormalFactor_void_callback = __method;
				}
				void register_setSoftShadowNormalFactor_float_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSoftShadowNormalFactor_float_callback = __method;
				}
				void register__notifyLightsDirty_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__notifyLightsDirty_void_callback = __method;
				}
				void register__getLightsAffectingFrustum_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__getLightsAffectingFrustum_void_callback = __method;
				}
				void register__populateLightList_CVector3_Real_LightList_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__populateLightList_CVector3_Real_LightList_ev_uint32_callback = __method;
				}
				void register__populateLightList_CVector3_Real_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__populateLightList_CVector3_Real_LightList_callback = __method;
				}
				void register_showImage_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_showImage_ev_bool_callback = __method;
				}
				void register_getImageVisible_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getImageVisible_void_callback = __method;
				}
				void register_showOcean_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_showOcean_ev_bool_callback = __method;
				}
				void register_getOceanVisible_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getOceanVisible_void_callback = __method;
				}
				void register__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback = __method;
				}
				void register__populateLightList_CSceneNode_Real_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__populateLightList_CSceneNode_Real_LightList_callback = __method;
				}
				void register_createSceneNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSceneNode_void_callback = __method;
				}
				void register_createSceneNode_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSceneNode_EVString_callback = __method;
				}
				void register_destroySceneNode_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroySceneNode_EVString_callback = __method;
				}
				void register_destroySceneNode_CSceneNode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroySceneNode_CSceneNode_callback = __method;
				}
				void register_getRootSceneNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getRootSceneNode_void_callback = __method;
				}
				void register_getSceneNode_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSceneNode_EVString_callback = __method;
				}
				void register_hasSceneNode_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasSceneNode_EVString_callback = __method;
				}
				void register_createEntity_EVString_EVString_IntVector_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_EVString_IntVector_EVString_callback = __method;
				}
				void register_createEntity_EVString_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_EVString_EVString_callback = __method;
				}
				void register_createEntity_EVString_EVString_IntVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_EVString_IntVector_callback = __method;
				}
				void register_createEntity_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_EVString_callback = __method;
				}
				void register_createEntity_EVString_CMeshPtr_IntVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_CMeshPtr_IntVector_callback = __method;
				}
				void register_createEntity_EVString_CMeshPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_CMeshPtr_callback = __method;
				}
				void register_createEntity_CMeshPtr_IntVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_CMeshPtr_IntVector_callback = __method;
				}
				void register_createEntity_CMeshPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_CMeshPtr_callback = __method;
				}
				void register_createEntity_EVString_IntVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_IntVector_callback = __method;
				}
				void register_createEntity_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_callback = __method;
				}
				void register_createEntity_EVString_PrefabType_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_PrefabType_callback = __method;
				}
				void register_createEntity_PrefabType_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_PrefabType_callback = __method;
				}
				void register_getEntity_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getEntity_EVString_callback = __method;
				}
				void register_hasEntity_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasEntity_EVString_callback = __method;
				}
				void register_destroyEntity_CEntity_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyEntity_CEntity_callback = __method;
				}
				void register_destroyEntity_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyEntity_EVString_callback = __method;
				}
				void register_destroyAllEntities_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllEntities_void_callback = __method;
				}
				void register_createManualObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createManualObject_EVString_callback = __method;
				}
				void register_createManualObject_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createManualObject_void_callback = __method;
				}
				void register_getManualObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getManualObject_EVString_callback = __method;
				}
				void register_hasManualObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasManualObject_EVString_callback = __method;
				}
				void register_destroyManualObject_CManualObject_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyManualObject_CManualObject_callback = __method;
				}
				void register_destroyManualObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyManualObject_EVString_callback = __method;
				}
				void register_destroyAllManualObjects_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllManualObjects_void_callback = __method;
				}
				void register_usingWebMercator_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_usingWebMercator_void_callback = __method;
				}
				void register_createBillboardChain_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardChain_EVString_callback = __method;
				}
				void register_createBillboardChain_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardChain_void_callback = __method;
				}
				void register_getBillboardChain_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getBillboardChain_EVString_callback = __method;
				}
				void register_hasBillboardChain_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasBillboardChain_EVString_callback = __method;
				}
				void register_destroyBillboardChain_CBillboardChain_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyBillboardChain_CBillboardChain_callback = __method;
				}
				void register_destroyBillboardChain_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyBillboardChain_EVString_callback = __method;
				}
				void register_destroyAllBillboardChains_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllBillboardChains_void_callback = __method;
				}
				void register_createRibbonTrail_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createRibbonTrail_EVString_callback = __method;
				}
				void register_createRibbonTrail_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createRibbonTrail_void_callback = __method;
				}
				void register_getRibbonTrail_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getRibbonTrail_EVString_callback = __method;
				}
				void register_hasRibbonTrail_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasRibbonTrail_EVString_callback = __method;
				}
				void register_destroyRibbonTrail_CRibbonTrail_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyRibbonTrail_CRibbonTrail_callback = __method;
				}
				void register_destroyRibbonTrail_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyRibbonTrail_EVString_callback = __method;
				}
				void register_destroyAllRibbonTrails_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllRibbonTrails_void_callback = __method;
				}
				void register_createParticleSystem_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_EVString_EVString_callback = __method;
				}
				void register_createParticleSystem_EVString_ev_size_t_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_EVString_ev_size_t_EVString_callback = __method;
				}
				void register_createParticleSystem_EVString_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_EVString_ev_size_t_callback = __method;
				}
				void register_createParticleSystem_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_EVString_callback = __method;
				}
				void register_createParticleSystem_ev_size_t_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_ev_size_t_EVString_callback = __method;
				}
				void register_createParticleSystem_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_ev_size_t_callback = __method;
				}
				void register_createParticleSystem_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_void_callback = __method;
				}
				void register_getParticleSystem_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getParticleSystem_EVString_callback = __method;
				}
				void register_hasParticleSystem_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasParticleSystem_EVString_callback = __method;
				}
				void register_destroyParticleSystem_CParticleSystem_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyParticleSystem_CParticleSystem_callback = __method;
				}
				void register_destroyParticleSystem_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyParticleSystem_EVString_callback = __method;
				}
				void register_destroyAllParticleSystems_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllParticleSystems_void_callback = __method;
				}
				void register_clearScene_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_clearScene_void_callback = __method;
				}
				void register_prepareWorldGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareWorldGeometry_EVString_callback = __method;
				}
				void register_prepareWorldGeometry_DataStreamPtr_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareWorldGeometry_DataStreamPtr_EVString_callback = __method;
				}
				void register_prepareWorldGeometry_DataStreamPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareWorldGeometry_DataStreamPtr_callback = __method;
				}
				void register_setWorldGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setWorldGeometry_EVString_callback = __method;
				}
				void register_setWorldGeometry_DataStreamPtr_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setWorldGeometry_DataStreamPtr_EVString_callback = __method;
				}
				void register_setWorldGeometry_DataStreamPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setWorldGeometry_DataStreamPtr_callback = __method;
				}
				void register_estimateWorldGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_estimateWorldGeometry_EVString_callback = __method;
				}
				void register_estimateWorldGeometry_DataStreamPtr_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_estimateWorldGeometry_DataStreamPtr_EVString_callback = __method;
				}
				void register_estimateWorldGeometry_DataStreamPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_estimateWorldGeometry_DataStreamPtr_callback = __method;
				}
				void register_getSuggestedViewpoint_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSuggestedViewpoint_ev_bool_callback = __method;
				}
				void register_getSuggestedViewpoint_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSuggestedViewpoint_void_callback = __method;
				}
				void register_setOption_EVString_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setOption_EVString_void_callback = __method;
				}
				void register_getOption_EVString_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getOption_EVString_void_callback = __method;
				}
				void register_hasOption_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasOption_EVString_callback = __method;
				}
				void register_getOptionValues_EVString_StringVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getOptionValues_EVString_StringVector_callback = __method;
				}
				void register_getOptionKeys_StringVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getOptionKeys_StringVector_callback = __method;
				}
				void register__updateSceneGraph_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__updateSceneGraph_CCamera_callback = __method;
				}
				void register__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback = __method;
				}
				void register__applySceneAnimations_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__applySceneAnimations_void_callback = __method;
				}
				void register__renderVisibleObjects_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__renderVisibleObjects_void_callback = __method;
				}
				void register__renderScene_CCamera_CViewport_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__renderScene_CCamera_CViewport_ev_bool_callback = __method;
				}
				void register__queueSkiesForRendering_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__queueSkiesForRendering_CCamera_callback = __method;
				}
				void register__setDestinationRenderSystem_CRenderSystem_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setDestinationRenderSystem_CRenderSystem_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_callback = __method;
				}
				void register_setSkyPlaneEnabled_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlaneEnabled_ev_bool_callback = __method;
				}
				void register_isSkyPlaneEnabled_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isSkyPlaneEnabled_void_callback = __method;
				}
				void register_getSkyPlaneNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyPlaneNode_void_callback = __method;
				}
				void register_getSkyPlaneGenParameters_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyPlaneGenParameters_void_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_Real_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_Real_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_Real_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_callback = __method;
				}
				void register_setSkyBoxEnabled_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBoxEnabled_ev_bool_callback = __method;
				}
				void register_isSkyBoxEnabled_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isSkyBoxEnabled_void_callback = __method;
				}
				void register_getSkyBoxNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyBoxNode_void_callback = __method;
				}
				void register_getSkyBoxGenParameters_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyBoxGenParameters_void_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_callback = __method;
				}
				void register_setSkyDomeEnabled_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDomeEnabled_ev_bool_callback = __method;
				}
				void register_isSkyDomeEnabled_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isSkyDomeEnabled_void_callback = __method;
				}
				void register_getSkyDomeNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyDomeNode_void_callback = __method;
				}
				void register_getSkyDomeGenParameters_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyDomeGenParameters_void_callback = __method;
				}
				void register_getFogMode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogMode_void_callback = __method;
				}
				void register_getFogColour_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogColour_void_callback = __method;
				}
				void register_getFogStart_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogStart_void_callback = __method;
				}
				void register_getFogEnd_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogEnd_void_callback = __method;
				}
				void register_getFogDensity_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogDensity_void_callback = __method;
				}
				void register_createBillboardSet_EVString_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardSet_EVString_ev_uint32_callback = __method;
				}
				void register_createBillboardSet_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardSet_EVString_callback = __method;
				}
				void register_createBillboardSet_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardSet_ev_uint32_callback = __method;
				}
				void register_createBillboardSet_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardSet_void_callback = __method;
				}
				void register_getBillboardSet_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getBillboardSet_EVString_callback = __method;
				}
				void register_hasBillboardSet_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasBillboardSet_EVString_callback = __method;
				}
				void register_destroyBillboardSet_CBillboardSet_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyBillboardSet_CBillboardSet_callback = __method;
				}
				void register_destroyBillboardSet_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyBillboardSet_EVString_callback = __method;
				}
				void register_destroyAllBillboardSets_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllBillboardSets_void_callback = __method;
				}
				void register_setDisplaySceneNodes_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setDisplaySceneNodes_ev_bool_callback = __method;
				}
				void register_getDisplaySceneNodes_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getDisplaySceneNodes_void_callback = __method;
				}
				void register_createAnimation_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAnimation_EVString_Real_callback = __method;
				}
				void register_getAnimation_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getAnimation_EVString_callback = __method;
				}
				void register_hasAnimation_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasAnimation_EVString_callback = __method;
				}
				void register_destroyAnimation_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAnimation_EVString_callback = __method;
				}
				void register_destroyAllAnimations_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllAnimations_void_callback = __method;
				}
				void register_createAnimationState_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAnimationState_EVString_callback = __method;
				}
				void register_getAnimationState_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getAnimationState_EVString_callback = __method;
				}
				void register_hasAnimationState_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasAnimationState_EVString_callback = __method;
				}
				void register_destroyAnimationState_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAnimationState_EVString_callback = __method;
				}
				void register_destroyAllAnimationStates_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllAnimationStates_void_callback = __method;
				}
				void register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback = __method;
				}
				void register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback = __method;
				}
				void register_getRenderQueue_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getRenderQueue_void_callback = __method;
				}
				void register_addRenderQueueListener_CRenderQueueListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addRenderQueueListener_CRenderQueueListener_callback = __method;
				}
				void register_removeRenderQueueListener_CRenderQueueListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeRenderQueueListener_CRenderQueueListener_callback = __method;
				}
				void register_addRenderObjectListener_CRenderObjectListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addRenderObjectListener_CRenderObjectListener_callback = __method;
				}
				void register_removeRenderObjectListener_CRenderObjectListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeRenderObjectListener_CRenderObjectListener_callback = __method;
				}
				void register_addSpecialCaseRenderQueue_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addSpecialCaseRenderQueue_ev_uint8_callback = __method;
				}
				void register_removeSpecialCaseRenderQueue_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeSpecialCaseRenderQueue_ev_uint8_callback = __method;
				}
				void register_clearSpecialCaseRenderQueues_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_clearSpecialCaseRenderQueues_void_callback = __method;
				}
				void register_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback = __method;
				}
				void register_getSpecialCaseRenderQueueMode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSpecialCaseRenderQueueMode_void_callback = __method;
				}
				void register_isRenderQueueToBeProcessed_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isRenderQueueToBeProcessed_ev_uint8_callback = __method;
				}
				void register_setWorldGeometryRenderQueue_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setWorldGeometryRenderQueue_ev_uint8_callback = __method;
				}
				void register_getWorldGeometryRenderQueue_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getWorldGeometryRenderQueue_void_callback = __method;
				}
				void register_showBoundingBoxes_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_showBoundingBoxes_ev_bool_callback = __method;
				}
				void register_getShowBoundingBoxes_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShowBoundingBoxes_void_callback = __method;
				}
				void register__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback = __method;
				}
				void register_createAABBQuery_CAxisAlignedBox_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAABBQuery_CAxisAlignedBox_ev_uint32_callback = __method;
				}
				void register_createAABBQuery_CAxisAlignedBox_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAABBQuery_CAxisAlignedBox_callback = __method;
				}
				void register_createSphereQuery_CSphere_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSphereQuery_CSphere_ev_uint32_callback = __method;
				}
				void register_createSphereQuery_CSphere_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSphereQuery_CSphere_callback = __method;
				}
				void register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback = __method;
				}
				void register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback = __method;
				}
				void register_createRayQuery_CRay_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createRayQuery_CRay_ev_uint32_callback = __method;
				}
				void register_createRayQuery_CRay_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createRayQuery_CRay_callback = __method;
				}
				void register_createIntersectionQuery_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createIntersectionQuery_ev_uint32_callback = __method;
				}
				void register_createIntersectionQuery_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createIntersectionQuery_void_callback = __method;
				}
				void register_destroyQuery_CSceneQuery_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyQuery_CSceneQuery_callback = __method;
				}
				void register_setShadowTechnique_ShadowTechnique_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTechnique_ShadowTechnique_callback = __method;
				}
				void register_getShadowTechnique_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowTechnique_void_callback = __method;
				}
				void register_setShowDebugShadows_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShowDebugShadows_ev_bool_callback = __method;
				}
				void register_getShowDebugShadows_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShowDebugShadows_void_callback = __method;
				}
				void register_setShadowColour_CColourValue_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowColour_CColourValue_callback = __method;
				}
				void register_getShadowColour_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowColour_void_callback = __method;
				}
				void register_setShadowDirectionalLightExtrusionDistance_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowDirectionalLightExtrusionDistance_Real_callback = __method;
				}
				void register_getShadowDirectionalLightExtrusionDistance_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowDirectionalLightExtrusionDistance_void_callback = __method;
				}
				void register_setShadowColorRRatio_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowColorRRatio_Real_callback = __method;
				}
				void register_setShadowColorGRatio_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowColorGRatio_Real_callback = __method;
				}
				void register_setShadowColorBRatio_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowColorBRatio_Real_callback = __method;
				}
				void register_getShadowColorRRatio_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowColorRRatio_void_callback = __method;
				}
				void register_getShadowColorGRatio_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowColorGRatio_void_callback = __method;
				}
				void register_getShadowColorBRatio_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowColorBRatio_void_callback = __method;
				}
				void register_setShadowFarDistance_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowFarDistance_Real_callback = __method;
				}
				void register_getShadowFarDistance_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowFarDistance_void_callback = __method;
				}
				void register_getShadowFarDistanceSquared_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowFarDistanceSquared_void_callback = __method;
				}
				void register_setShadowIndexBufferSize_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowIndexBufferSize_ev_size_t_callback = __method;
				}
				void register_getShadowIndexBufferSize_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowIndexBufferSize_void_callback = __method;
				}
				void register_setShadowTextureSize_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSize_ev_uint16_callback = __method;
				}
				void register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback = __method;
				}
				void register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback = __method;
				}
				void register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback = __method;
				}
				void register_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback = __method;
				}
				void register_setShadowTexturePixelFormat_PixelFormat_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTexturePixelFormat_PixelFormat_callback = __method;
				}
				void register_setShadowTextureFSAA_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureFSAA_ev_uint16_callback = __method;
				}
				void register_setShadowTextureCount_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureCount_ev_size_t_callback = __method;
				}
				void register_setShadowTextureSettings_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSettings_ev_uint16_ev_uint16_callback = __method;
				}
				void register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback = __method;
				}
				void register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback = __method;
				}
				void register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback = __method;
				}
				void register_getShadowTexture_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowTexture_ev_size_t_callback = __method;
				}
				void register_setShadowDirLightTextureOffset_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowDirLightTextureOffset_Real_callback = __method;
				}
				void register_getShadowDirLightTextureOffset_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowDirLightTextureOffset_void_callback = __method;
				}
				void register_setShadowTextureFadeStart_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureFadeStart_Real_callback = __method;
				}
				void register_setShadowTextureFadeEnd_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureFadeEnd_Real_callback = __method;
				}
				void register_setShadowTextureSelfShadow_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSelfShadow_ev_bool_callback = __method;
				}
				void register_getShadowTextureSelfShadow_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowTextureSelfShadow_void_callback = __method;
				}
				void register_setShadowTextureCasterMaterial_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureCasterMaterial_EVString_callback = __method;
				}
				void register_setShadowTextureReceiverMaterial_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureReceiverMaterial_EVString_callback = __method;
				}
				void register_setShadowCasterRenderBackFaces_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowCasterRenderBackFaces_ev_bool_callback = __method;
				}
				void register_getShadowCasterRenderBackFaces_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowCasterRenderBackFaces_void_callback = __method;
				}
				void register_setShadowCameraSetup_ShadowCameraSetupPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowCameraSetup_ShadowCameraSetupPtr_callback = __method;
				}
				void register_getShadowCameraSetup_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowCameraSetup_void_callback = __method;
				}
				void register_setShadowUseInfiniteFarPlane_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowUseInfiniteFarPlane_ev_bool_callback = __method;
				}
				void register_isShadowTechniqueStencilBased_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueStencilBased_void_callback = __method;
				}
				void register_isShadowTechniqueTextureBased_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueTextureBased_void_callback = __method;
				}
				void register_isShadowTechniqueModulative_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueModulative_void_callback = __method;
				}
				void register_isShadowTechniqueAdditive_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueAdditive_void_callback = __method;
				}
				void register_isShadowTechniqueIntegrated_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueIntegrated_void_callback = __method;
				}
				void register_isShadowTechniqueInUse_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueInUse_void_callback = __method;
				}
				void register_setShadowUseLightClipPlanes_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowUseLightClipPlanes_ev_bool_callback = __method;
				}
				void register_getShadowUseLightClipPlanes_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowUseLightClipPlanes_void_callback = __method;
				}
				void register__setActiveCompositorChain_CCompositorChain_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setActiveCompositorChain_CCompositorChain_callback = __method;
				}
				void register_setLateMaterialResolving_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setLateMaterialResolving_ev_bool_callback = __method;
				}
				void register_isLateMaterialResolving_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isLateMaterialResolving_void_callback = __method;
				}
				void register__getActiveCompositorChain_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__getActiveCompositorChain_void_callback = __method;
				}
				void register_addListener_CSceneManagerListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addListener_CSceneManagerListener_callback = __method;
				}
				void register_removeListener_CSceneManagerListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeListener_CSceneManagerListener_callback = __method;
				}
				void register_existListener_CSceneManagerListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_existListener_CSceneManagerListener_callback = __method;
				}
				void register_createStaticGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createStaticGeometry_EVString_callback = __method;
				}
				void register_getStaticGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getStaticGeometry_EVString_callback = __method;
				}
				void register_hasStaticGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasStaticGeometry_EVString_callback = __method;
				}
				void register_destroyStaticGeometry_CStaticGeometry_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyStaticGeometry_CStaticGeometry_callback = __method;
				}
				void register_destroyStaticGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyStaticGeometry_EVString_callback = __method;
				}
				void register_destroyAllStaticGeometry_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllStaticGeometry_void_callback = __method;
				}
				void register_createInstancedGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstancedGeometry_EVString_callback = __method;
				}
				void register_getInstancedGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getInstancedGeometry_EVString_callback = __method;
				}
				void register_destroyInstancedGeometry_CInstancedGeometry_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstancedGeometry_CInstancedGeometry_callback = __method;
				}
				void register_destroyInstancedGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstancedGeometry_EVString_callback = __method;
				}
				void register_destroyAllInstancedGeometry_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllInstancedGeometry_void_callback = __method;
				}
				void register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback = __method;
				}
				void register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback = __method;
				}
				void register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback = __method;
				}
				void register_getInstanceManager_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getInstanceManager_EVString_callback = __method;
				}
				void register_hasInstanceManager_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasInstanceManager_EVString_callback = __method;
				}
				void register_destroyInstanceManager_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstanceManager_EVString_callback = __method;
				}
				void register_destroyInstanceManager_CInstanceManager_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstanceManager_CInstanceManager_callback = __method;
				}
				void register_destroyInstanceManagerWithThreadSafe_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstanceManagerWithThreadSafe_EVString_callback = __method;
				}
				void register_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback = __method;
				}
				void register_destroyAllInstanceManagers_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllInstanceManagers_void_callback = __method;
				}
				void register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback = __method;
				}
				void register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback = __method;
				}
				void register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback = __method;
				}
				void register_createInstancedEntity_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstancedEntity_EVString_EVString_callback = __method;
				}
				void register_destroyInstancedEntity_CInstancedEntity_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstancedEntity_CInstancedEntity_callback = __method;
				}
				void register_createMovableObject_EVString_EVString_CommonStringPairList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createMovableObject_EVString_EVString_CommonStringPairList_callback = __method;
				}
				void register_createMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createMovableObject_EVString_EVString_callback = __method;
				}
				void register_createMovableObject_EVString_CommonStringPairList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createMovableObject_EVString_CommonStringPairList_callback = __method;
				}
				void register_createMovableObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createMovableObject_EVString_callback = __method;
				}
				void register_destroyMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyMovableObject_EVString_EVString_callback = __method;
				}
				void register_destroyMovableObject_CMovableObject_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyMovableObject_CMovableObject_callback = __method;
				}
				void register_destroyAllMovableObjectsByType_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllMovableObjectsByType_EVString_callback = __method;
				}
				void register_destroyAllMovableObjects_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllMovableObjects_void_callback = __method;
				}
				void register_getMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getMovableObject_EVString_EVString_callback = __method;
				}
				void register_hasMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasMovableObject_EVString_EVString_callback = __method;
				}
				void register_getMovableObjectIterator_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getMovableObjectIterator_EVString_callback = __method;
				}
				void register_injectMovableObject_CMovableObject_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_injectMovableObject_CMovableObject_callback = __method;
				}
				void register_extractMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_extractMovableObject_EVString_EVString_callback = __method;
				}
				void register_extractMovableObject_CMovableObject_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_extractMovableObject_CMovableObject_callback = __method;
				}
				void register_extractAllMovableObjectsByType_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_extractAllMovableObjectsByType_EVString_callback = __method;
				}
				void register_setVisibilityMask_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setVisibilityMask_ev_uint32_callback = __method;
				}
				void register_getVisibilityMask_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getVisibilityMask_void_callback = __method;
				}
				void register_setFindVisibleObjects_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setFindVisibleObjects_ev_bool_callback = __method;
				}
				void register_getFindVisibleObjects_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFindVisibleObjects_void_callback = __method;
				}
				void register_setNormaliseNormalsOnScale_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setNormaliseNormalsOnScale_ev_bool_callback = __method;
				}
				void register_getNormaliseNormalsOnScale_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getNormaliseNormalsOnScale_void_callback = __method;
				}
				void register_setFlipCullingOnNegativeScale_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setFlipCullingOnNegativeScale_ev_bool_callback = __method;
				}
				void register_getFlipCullingOnNegativeScale_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFlipCullingOnNegativeScale_void_callback = __method;
				}
				void register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback = __method;
				}
				void register__injectRenderWithPass_CPass_CRenderable_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_callback = __method;
				}
				void register__injectRenderWithPass_CPass_CRenderable_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__injectRenderWithPass_CPass_CRenderable_callback = __method;
				}
				void register__suppressRenderStateChanges_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__suppressRenderStateChanges_ev_bool_callback = __method;
				}
				void register__areRenderStateChangesSuppressed_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__areRenderStateChangesSuppressed_void_callback = __method;
				}
				void register__setPass_CPass_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setPass_CPass_ev_bool_ev_bool_callback = __method;
				}
				void register__setPass_CPass_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setPass_CPass_ev_bool_callback = __method;
				}
				void register__setPass_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setPass_CPass_callback = __method;
				}
				void register__markGpuParamsDirty_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__markGpuParamsDirty_ev_uint16_callback = __method;
				}
				void register__suppressShadows_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__suppressShadows_ev_bool_callback = __method;
				}
				void register__areShadowsSuppressed_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__areShadowsSuppressed_void_callback = __method;
				}
				void register__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_setCameraRelativeRendering_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setCameraRelativeRendering_ev_bool_callback = __method;
				}
				void register_getCameraRelativeRendering_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCameraRelativeRendering_void_callback = __method;
				}
				void register_getHeightAt_Real_Real_ev_real32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getHeightAt_Real_Real_ev_real32_callback = __method;
				}
				void register_getBestHeightAt_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getBestHeightAt_Real_Real_callback = __method;
				}
				void register_getHeightAtTile_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getHeightAtTile_Real_Real_callback = __method;
				}
				void register_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback = __method;
				}
				void register_addTempLayer_ILayer_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addTempLayer_ILayer_callback = __method;
				}
				void register_removeTempLayer_ILayer_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeTempLayer_ILayer_callback = __method;
				}
				void register_updateQuadImage_bool_bool_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateQuadImage_bool_bool_bool_callback = __method;
				}
				void register_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback = __method;
				}
				void register_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback = __method;
				}
				void register_setCollisionDetectionEnable_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setCollisionDetectionEnable_ev_bool_callback = __method;
				}
				virtual void _findVisibleObjects(EarthView::World::Graphic::CCamera* cam, EarthView::World::Graphic::VisibleObjectsBoundsInfo* visibleBounds, ev_bool onlyShadowCasters)
				{
					if (this->_gRef != NULL && this->m__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jlong visibleBounds_j = (jlong) visibleBounds;
						jboolean onlyShadowCasters_j = (jboolean) onlyShadowCasters;
						jmethodID __method = __gr->getMethod("_findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , cam_j, visibleBounds_j, onlyShadowCasters_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_findVisibleObjects(cam, visibleBounds, onlyShadowCasters);
					}
				}
				virtual EarthView::World::Graphic::CCamera* createCamera(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createCamera_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createCamera_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CCamera *__values1 = (EarthView::World::Graphic::CCamera*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createCamera(name);
					}
				}
				virtual EVString getTypeName() const
				{
					if (this->_gRef != NULL && this->m_getTypeName_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getTypeName_void_callback");
						jstring __values1_j = (jstring)__env->CallObjectMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						const char* values_ch = __env->GetStringUTFChars(__values1_j,JNI_FALSE);
						EVString __values1 = values_ch;
						__env->ReleaseStringUTFChars(__values1_j,values_ch);
						#else
						const ev_wchar* values_ch = (const ev_wchar*)__env->GetStringChars(__values1_j,JNI_FALSE);
						EVString __values1 = values_ch;
						__env->ReleaseStringChars(__values1_j,(const jchar *)values_ch);
						#endif
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getTypeName();
					}
				}
				virtual void _updateSceneGraph(EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m__updateSceneGraph_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("_updateSceneGraph_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_updateSceneGraph(cam);
					}
				}
				virtual EarthView::World::Spatial::Math::CVector3 getSunPosition()
				{
					if (this->_gRef != NULL && this->m_getSunPosition_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSunPosition_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Spatial::Math::CVector3 __values1 = *(EarthView::World::Spatial::Math::CVector3*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSunPosition();
					}
				}
				virtual void setAtmosphereVisible(const ev_bool& visible)
				{
					if (this->_gRef != NULL && this->m_setAtmosphereVisible_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean visible_j = (jboolean) visible;
						jmethodID __method = __gr->getMethod("setAtmosphereVisible_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , visible_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setAtmosphereVisible(visible);
					}
				}
				virtual void storeAtmosphereVisibleState()
				{
					if (this->_gRef != NULL && this->m_storeAtmosphereVisibleState_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("storeAtmosphereVisibleState_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::storeAtmosphereVisibleState();
					}
				}
				virtual void restoreAtmosphereVisibleState()
				{
					if (this->_gRef != NULL && this->m_restoreAtmosphereVisibleState_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("restoreAtmosphereVisibleState_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::restoreAtmosphereVisibleState();
					}
				}
				virtual void setSunVisible(ev_bool flag)
				{
					if (this->_gRef != NULL && this->m_setSunVisible_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean flag_j = (jboolean) flag;
						jmethodID __method = __gr->getMethod("setSunVisible_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , flag_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSunVisible(flag);
					}
				}
				virtual void setShadowTextureConfig(ev_size_t shadowIndex, const EarthView::World::Graphic::ShadowTextureConfig& config)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong shadowIndex_j = (jlong) shadowIndex;
						jlong config_j = (jlong) &config;
						jmethodID __method = __gr->getMethod("setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback");
						__env->CallVoidMethod(__obj, __method , shadowIndex_j, config_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureConfig(shadowIndex, config);
					}
				}
				virtual void prepareShadowTextures(EarthView::World::Graphic::CCamera* cam, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Graphic::LightList* lightList)
				{
					if (this->_gRef != NULL && this->m_prepareShadowTextures_CCamera_CViewport_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jlong vp_j = (jlong) vp;
						jlong lightList_j = (jlong) lightList;
						jmethodID __method = __gr->getMethod("prepareShadowTextures_CCamera_CViewport_LightList_callback");
						__env->CallVoidMethod(__obj, __method , cam_j, vp_j, lightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::prepareShadowTextures(cam, vp, lightList);
					}
				}
				virtual void checkShadowCasterInFrustum(EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_checkShadowCasterInFrustum_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("checkShadowCasterInFrustum_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::checkShadowCasterInFrustum(camera);
					}
				}
				virtual bool getTerrainCastShadow() const
				{
					if (this->_gRef != NULL && this->m_getTerrainCastShadow_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getTerrainCastShadow_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						bool __values1 = (bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getTerrainCastShadow();
					}
				}
				virtual void setTerrainCastShadow(bool flag)
				{
					if (this->_gRef != NULL && this->m_setTerrainCastShadow_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean flag_j = (jboolean) flag;
						jmethodID __method = __gr->getMethod("setTerrainCastShadow_bool_callback");
						__env->CallVoidMethod(__obj, __method , flag_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setTerrainCastShadow(flag);
					}
				}
				virtual ev_bool addTempLayer(EarthView::World::Spatial::Atlas::ILayer* ref_layer)
				{
					if (this->_gRef != NULL && this->m_addTempLayer_ILayer_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ref_layer_j = (jlong) ref_layer;
						jmethodID __method = __gr->getMethod("addTempLayer_ILayer_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , ref_layer_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::addTempLayer(ref_layer);
					}
				}
				virtual ev_bool removeTempLayer(EarthView::World::Spatial::Atlas::ILayer* layer)
				{
					if (this->_gRef != NULL && this->m_removeTempLayer_ILayer_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong layer_j = (jlong) layer;
						jmethodID __method = __gr->getMethod("removeTempLayer_ILayer_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , layer_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::removeTempLayer(layer);
					}
				}
				virtual ev_real64 getTileAverageAltitude(ev_real64 latitude, ev_real64 longitude)
				{
					if (this->_gRef != NULL && this->m_getTileAverageAltitude_ev_real64_ev_real64_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble latitude_j = (jdouble) latitude;
						jdouble longitude_j = (jdouble) longitude;
						jmethodID __method = __gr->getMethod("getTileAverageAltitude_ev_real64_ev_real64_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method , latitude_j, longitude_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_real64 __values1 = (ev_real64) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getTileAverageAltitude(latitude, longitude);
					}
				}
				virtual Real getBestHeightAt(Real latitude, Real longitude)
				{
					if (this->_gRef != NULL && this->m_getBestHeightAt_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble latitude_j = (jdouble) latitude;
						jdouble longitude_j = (jdouble) longitude;
						jmethodID __method = __gr->getMethod("getBestHeightAt_Real_Real_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method , latitude_j, longitude_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getBestHeightAt(latitude, longitude);
					}
				}
				virtual Real getHeightAt(Real latitude, Real longitude, ev_real32 targetSamplesPerDegrees)
				{
					if (this->_gRef != NULL && this->m_getHeightAt_Real_Real_ev_real32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble latitude_j = (jdouble) latitude;
						jdouble longitude_j = (jdouble) longitude;
						jfloat targetSamplesPerDegrees_j = (jfloat) targetSamplesPerDegrees;
						jmethodID __method = __gr->getMethod("getHeightAt_Real_Real_ev_real32_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method , latitude_j, longitude_j, targetSamplesPerDegrees_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getHeightAt(latitude, longitude, targetSamplesPerDegrees);
					}
				}
				virtual Real getHeightAtTile(Real latitude, Real longitude)
				{
					if (this->_gRef != NULL && this->m_getHeightAtTile_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble latitude_j = (jdouble) latitude;
						jdouble longitude_j = (jdouble) longitude;
						jmethodID __method = __gr->getMethod("getHeightAtTile_Real_Real_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method , latitude_j, longitude_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getHeightAtTile(latitude, longitude);
					}
				}
				virtual EarthView::World::Core::MemoryDataStreamPtr getTerrain(ev_int32 level, ev_int32 row, ev_int32 col)
				{
					if (this->_gRef != NULL && this->m_getTerrain_ev_int32_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint level_j = (jint) level;
						jint row_j = (jint) row;
						jint col_j = (jint) col;
						jmethodID __method = __gr->getMethod("getTerrain_ev_int32_ev_int32_ev_int32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , level_j, row_j, col_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Core::MemoryDataStreamPtr __values1 = *(EarthView::World::Core::MemoryDataStreamPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getTerrain(level, row, col);
					}
				}
				virtual EarthView::World::Core::MemoryDataStreamPtr getTerrainFromMemoryCache(ev_int32 row, ev_int32 col, ev_int32 level)
				{
					if (this->_gRef != NULL && this->m_getTerrainFromMemoryCache_ev_int32_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint row_j = (jint) row;
						jint col_j = (jint) col;
						jint level_j = (jint) level;
						jmethodID __method = __gr->getMethod("getTerrainFromMemoryCache_ev_int32_ev_int32_ev_int32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , row_j, col_j, level_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Core::MemoryDataStreamPtr __values1 = *(EarthView::World::Core::MemoryDataStreamPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getTerrainFromMemoryCache(row, col, level);
					}
				}
				virtual EarthView::World::Core::MemoryDataStreamPtr getTerrainFromDBCache(ev_int32 row, ev_int32 col, ev_int32 level)
				{
					if (this->_gRef != NULL && this->m_getTerrainFromDBCache_ev_int32_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint row_j = (jint) row;
						jint col_j = (jint) col;
						jint level_j = (jint) level;
						jmethodID __method = __gr->getMethod("getTerrainFromDBCache_ev_int32_ev_int32_ev_int32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , row_j, col_j, level_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Core::MemoryDataStreamPtr __values1 = *(EarthView::World::Core::MemoryDataStreamPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getTerrainFromDBCache(row, col, level);
					}
				}
				virtual EarthView::World::Core::MemoryDataStreamPtr getTerrainFromServer(ev_int32 row, ev_int32 col, ev_int32 level)
				{
					if (this->_gRef != NULL && this->m_getTerrainFromServer_ev_int32_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint row_j = (jint) row;
						jint col_j = (jint) col;
						jint level_j = (jint) level;
						jmethodID __method = __gr->getMethod("getTerrainFromServer_ev_int32_ev_int32_ev_int32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , row_j, col_j, level_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Core::MemoryDataStreamPtr __values1 = *(EarthView::World::Core::MemoryDataStreamPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getTerrainFromServer(row, col, level);
					}
				}
				virtual ev_bool usingWebMercator() const
				{
					if (this->_gRef != NULL && this->m_usingWebMercator_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("usingWebMercator_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::usingWebMercator();
					}
				}
				virtual ev_bool getTileEnvelope(ev_int32 level, ev_uint32 row, ev_uint32 col, Real& minX, Real& maxX, Real& minY, Real& maxY)
				{
					if (this->_gRef != NULL && this->m_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint level_j = (jint) level;
						jlong row_j = (jlong) row;
						jlong col_j = (jlong) col;
						jlong minX_j = (jlong) &minX;
						jlong maxX_j = (jlong) &maxX;
						jlong minY_j = (jlong) &minY;
						jlong maxY_j = (jlong) &maxY;
						jmethodID __method = __gr->getMethod("getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , level_j, row_j, col_j, minX_j, maxX_j, minY_j, maxY_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getTileEnvelope(level, row, col, minX, maxX, minY, maxY);
					}
				}
				virtual void updateQuadImage(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup)
				{
					if (this->_gRef != NULL && this->m_updateQuadImage_bool_bool_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean updateImageGroup_j = (jboolean) updateImageGroup;
						jboolean updateFeatureGroup_j = (jboolean) updateFeatureGroup;
						jboolean updateKmlGroup_j = (jboolean) updateKmlGroup;
						jmethodID __method = __gr->getMethod("updateQuadImage_bool_bool_bool_callback");
						__env->CallVoidMethod(__obj, __method , updateImageGroup_j, updateFeatureGroup_j, updateKmlGroup_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup);
					}
				}
				virtual void updateQuadImage(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup, Real minX, Real maxX, Real minY, Real maxY)
				{
					if (this->_gRef != NULL && this->m_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean updateImageGroup_j = (jboolean) updateImageGroup;
						jboolean updateFeatureGroup_j = (jboolean) updateFeatureGroup;
						jboolean updateKmlGroup_j = (jboolean) updateKmlGroup;
						jdouble minX_j = (jdouble) minX;
						jdouble maxX_j = (jdouble) maxX;
						jdouble minY_j = (jdouble) minY;
						jdouble maxY_j = (jdouble) maxY;
						jmethodID __method = __gr->getMethod("updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , updateImageGroup_j, updateFeatureGroup_j, updateKmlGroup_j, minX_j, maxX_j, minY_j, maxY_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup, minX, maxX, minY, maxY);
					}
				}
				virtual void updateOBQ(ev_bool bUpdateVectorTexture, ev_bool bUpdateKmlTexture, ev_bool bUpdateTemporaryTexture, ev_bool bUpdateTerrain)
				{
					if (this->_gRef != NULL && this->m_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean bUpdateVectorTexture_j = (jboolean) bUpdateVectorTexture;
						jboolean bUpdateKmlTexture_j = (jboolean) bUpdateKmlTexture;
						jboolean bUpdateTemporaryTexture_j = (jboolean) bUpdateTemporaryTexture;
						jboolean bUpdateTerrain_j = (jboolean) bUpdateTerrain;
						jmethodID __method = __gr->getMethod("updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , bUpdateVectorTexture_j, bUpdateKmlTexture_j, bUpdateTemporaryTexture_j, bUpdateTerrain_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::updateOBQ(bUpdateVectorTexture, bUpdateKmlTexture, bUpdateTemporaryTexture, bUpdateTerrain);
					}
				}
				virtual void showImage(ev_bool visible)
				{
					if (this->_gRef != NULL && this->m_showImage_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean visible_j = (jboolean) visible;
						jmethodID __method = __gr->getMethod("showImage_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , visible_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::showImage(visible);
					}
				}
				virtual ev_bool getImageVisible() const
				{
					if (this->_gRef != NULL && this->m_getImageVisible_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getImageVisible_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getImageVisible();
					}
				}
				virtual void showOcean(ev_bool visible)
				{
					if (this->_gRef != NULL && this->m_showOcean_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean visible_j = (jboolean) visible;
						jmethodID __method = __gr->getMethod("showOcean_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , visible_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::showOcean(visible);
					}
				}
				virtual ev_bool getOceanVisible() const
				{
					if (this->_gRef != NULL && this->m_getOceanVisible_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getOceanVisible_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getOceanVisible();
					}
				}
				virtual void setImageDefaultMaterial(const EarthView::World::Graphic::CMaterialPtr& matPtr)
				{
					if (this->_gRef != NULL && this->m_setImageDefaultMaterial_CMaterialPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong matPtr_j = (jlong) &matPtr;
						jmethodID __method = __gr->getMethod("setImageDefaultMaterial_CMaterialPtr_callback");
						__env->CallVoidMethod(__obj, __method , matPtr_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setImageDefaultMaterial(matPtr);
					}
				}
				virtual void setImageUseDefaultMaterial(const ev_bool& useDefaultMat)
				{
					if (this->_gRef != NULL && this->m_setImageUseDefaultMaterial_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean useDefaultMat_j = (jboolean) useDefaultMat;
						jmethodID __method = __gr->getMethod("setImageUseDefaultMaterial_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , useDefaultMat_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setImageUseDefaultMaterial(useDefaultMat);
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* createSceneNodeImpl()
				{
					if (this->_gRef != NULL && this->m_createSceneNodeImpl_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createSceneNodeImpl_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createSceneNodeImpl();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* createSceneNodeImpl(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createSceneNodeImpl_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createSceneNodeImpl_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createSceneNodeImpl(name);
					}
				}
				virtual void destroySceneNode(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroySceneNode_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroySceneNode_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroySceneNode(name);
					}
				}
				virtual void _alertVisibleObjects()
				{
					if (this->_gRef != NULL && this->m__alertVisibleObjects_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_alertVisibleObjects_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_alertVisibleObjects();
					}
				}
				virtual ev_bool setOption(const EVString& key, const void* val)
				{
					if (this->_gRef != NULL && this->m_setOption_EVString_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring key_wch = key;
						jstring key_j = __env->NewString((const jchar*)key_wch.getString(), key_wch.size());
						jlong val_j = (jlong) val;
						jmethodID __method = __gr->getMethod("setOption_EVString_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , key_j, val_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::setOption(key, val);
					}
				}
				virtual ev_bool getOption(const EVString& key, void* val)
				{
					if (this->_gRef != NULL && this->m_getOption_EVString_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring key_wch = key;
						jstring key_j = __env->NewString((const jchar*)key_wch.getString(), key_wch.size());
						jlong val_j = (jlong) val;
						jmethodID __method = __gr->getMethod("getOption_EVString_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , key_j, val_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getOption(key, val);
					}
				}
				virtual ev_bool getOptionValues(const EVString& key, EarthView::World::Core::StringVector& refValueList)
				{
					if (this->_gRef != NULL && this->m_getOptionValues_EVString_StringVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring key_wch = key;
						jstring key_j = __env->NewString((const jchar*)key_wch.getString(), key_wch.size());
						jlong refValueList_j = (jlong) &refValueList;
						jmethodID __method = __gr->getMethod("getOptionValues_EVString_StringVector_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , key_j, refValueList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getOptionValues(key, refValueList);
					}
				}
				virtual ev_bool getOptionKeys(EarthView::World::Core::StringVector& refKeys)
				{
					if (this->_gRef != NULL && this->m_getOptionKeys_StringVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong refKeys_j = (jlong) &refKeys;
						jmethodID __method = __gr->getMethod("getOptionKeys_StringVector_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , refKeys_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getOptionKeys(refKeys);
					}
				}
				virtual void clearScene()
				{
					if (this->_gRef != NULL && this->m_clearScene_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("clearScene_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::clearScene();
					}
				}
				virtual EarthView::World::Graphic::CAxisAlignedBoxSceneQuery* createAABBQuery(const EarthView::World::Spatial::Math::CAxisAlignedBox& box, ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createAABBQuery_CAxisAlignedBox_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong box_j = (jlong) &box;
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createAABBQuery_CAxisAlignedBox_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , box_j, mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAxisAlignedBoxSceneQuery *__values1 = (EarthView::World::Graphic::CAxisAlignedBoxSceneQuery*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createAABBQuery(box, mask);
					}
				}
				virtual EarthView::World::Graphic::CSphereSceneQuery* createSphereQuery(const EarthView::World::Spatial::Math::CSphere& sphere, ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createSphereQuery_CSphere_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong sphere_j = (jlong) &sphere;
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createSphereQuery_CSphere_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , sphere_j, mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSphereSceneQuery *__values1 = (EarthView::World::Graphic::CSphereSceneQuery*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createSphereQuery(sphere, mask);
					}
				}
				virtual EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery* createPlaneBoundedVolumeQuery(const EarthView::World::Spatial::Math::PlaneBoundedVolumeList& volumes, ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong volumes_j = (jlong) &volumes;
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , volumes_j, mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery *__values1 = (EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createPlaneBoundedVolumeQuery(volumes, mask);
					}
				}
				virtual EarthView::World::Graphic::CRaySceneQuery* createRayQuery(const EarthView::World::Spatial::Math::CRay& ray, ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createRayQuery_CRay_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ray_j = (jlong) &ray;
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createRayQuery_CRay_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , ray_j, mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRaySceneQuery *__values1 = (EarthView::World::Graphic::CRaySceneQuery*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createRayQuery(ray, mask);
					}
				}
				virtual EarthView::World::Graphic::CIntersectionSceneQuery* createIntersectionQuery(ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createIntersectionQuery_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createIntersectionQuery_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CIntersectionSceneQuery *__values1 = (EarthView::World::Graphic::CIntersectionSceneQuery*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createIntersectionQuery(mask);
					}
				}
				virtual void initRenderQueue()
				{
					if (this->_gRef != NULL && this->m_initRenderQueue_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("initRenderQueue_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::initRenderQueue();
					}
				}
				virtual const EarthView::World::Graphic::CPass* deriveShadowCasterPass(const EarthView::World::Graphic::CPass* pass)
				{
					if (this->_gRef != NULL && this->m_deriveShadowCasterPass_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jmethodID __method = __gr->getMethod("deriveShadowCasterPass_CPass_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::deriveShadowCasterPass(pass);
					}
				}
				virtual const EarthView::World::Graphic::CPass* deriveShadowReceiverPass(const EarthView::World::Graphic::CPass* pass)
				{
					if (this->_gRef != NULL && this->m_deriveShadowReceiverPass_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jmethodID __method = __gr->getMethod("deriveShadowReceiverPass_CPass_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::deriveShadowReceiverPass(pass);
					}
				}
				virtual ev_bool validatePassForRendering(const EarthView::World::Graphic::CPass* pass)
				{
					if (this->_gRef != NULL && this->m_validatePassForRendering_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jmethodID __method = __gr->getMethod("validatePassForRendering_CPass_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , pass_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::validatePassForRendering(pass);
					}
				}
				virtual ev_bool validateRenderableForRendering(const EarthView::World::Graphic::CPass* pass, const EarthView::World::Graphic::CRenderable* rend)
				{
					if (this->_gRef != NULL && this->m_validateRenderableForRendering_CPass_CRenderable_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jmethodID __method = __gr->getMethod("validateRenderableForRendering_CPass_CRenderable_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , pass_j, rend_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::validateRenderableForRendering(pass, rend);
					}
				}
				virtual EarthView::World::Graphic::CMeshPtr createSkyboxPlane(EarthView::World::Graphic::CSceneManager::BoxPlane bp, Real distance, const EarthView::World::Spatial::Math::CQuaternion& orientation, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint bp_j = (jint) bp;
						jdouble distance_j = (jdouble) distance;
						jlong orientation_j = (jlong) &orientation;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , bp_j, distance_j, orientation_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMeshPtr __values1 = *(EarthView::World::Graphic::CMeshPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createSkyboxPlane(bp, distance, orientation, groupName);
					}
				}
				virtual EarthView::World::Graphic::CMeshPtr createSkydomePlane(EarthView::World::Graphic::CSceneManager::BoxPlane bp, Real curvature, Real tiling, Real distance, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ySegmentsToKeep, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint bp_j = (jint) bp;
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ySegmentsToKeep_j = (jint) ySegmentsToKeep;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , bp_j, curvature_j, tiling_j, distance_j, orientation_j, xsegments_j, ysegments_j, ySegmentsToKeep_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMeshPtr __values1 = *(EarthView::World::Graphic::CMeshPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createSkydomePlane(bp, curvature, tiling, distance, orientation, xsegments, ysegments, ySegmentsToKeep, groupName);
					}
				}
				virtual void useRenderableViewProjMode(const EarthView::World::Graphic::CRenderable* pRend, ev_bool fixedFunction)
				{
					if (this->_gRef != NULL && this->m_useRenderableViewProjMode_CRenderable_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pRend_j = (jlong) pRend;
						jboolean fixedFunction_j = (jboolean) fixedFunction;
						jmethodID __method = __gr->getMethod("useRenderableViewProjMode_CRenderable_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , pRend_j, fixedFunction_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::useRenderableViewProjMode(pRend, fixedFunction);
					}
				}
				virtual void resetViewProjMode(ev_bool fixedFunction)
				{
					if (this->_gRef != NULL && this->m_resetViewProjMode_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean fixedFunction_j = (jboolean) fixedFunction;
						jmethodID __method = __gr->getMethod("resetViewProjMode_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , fixedFunction_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::resetViewProjMode(fixedFunction);
					}
				}
				virtual void firePreRenderQueues()
				{
					if (this->_gRef != NULL && this->m_firePreRenderQueues_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("firePreRenderQueues_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::firePreRenderQueues();
					}
				}
				virtual void firePostRenderQueues()
				{
					if (this->_gRef != NULL && this->m_firePostRenderQueues_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("firePostRenderQueues_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::firePostRenderQueues();
					}
				}
				virtual ev_bool fireRenderQueueStarted(ev_uint8 id, const EVString& invocation)
				{
					if (this->_gRef != NULL && this->m_fireRenderQueueStarted_ev_uint8_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort id_j = (jshort) id;
						EarthView::World::Core::ev_wstring invocation_wch = invocation;
						jstring invocation_j = __env->NewString((const jchar*)invocation_wch.getString(), invocation_wch.size());
						jmethodID __method = __gr->getMethod("fireRenderQueueStarted_ev_uint8_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , id_j, invocation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::fireRenderQueueStarted(id, invocation);
					}
				}
				virtual ev_bool fireRenderQueueEnded(ev_uint8 id, const EVString& invocation)
				{
					if (this->_gRef != NULL && this->m_fireRenderQueueEnded_ev_uint8_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort id_j = (jshort) id;
						EarthView::World::Core::ev_wstring invocation_wch = invocation;
						jstring invocation_j = __env->NewString((const jchar*)invocation_wch.getString(), invocation_wch.size());
						jmethodID __method = __gr->getMethod("fireRenderQueueEnded_ev_uint8_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , id_j, invocation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::fireRenderQueueEnded(id, invocation);
					}
				}
				virtual void fireRenderSingleObjectStarted(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, const EarthView::World::Graphic::CAutoParamDataSource* source, const EarthView::World::Graphic::LightList* pLightList, ev_bool suppressRenderStateChanges)
				{
					if (this->_gRef != NULL && this->m_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong source_j = (jlong) source;
						jlong pLightList_j = (jlong) pLightList;
						jboolean suppressRenderStateChanges_j = (jboolean) suppressRenderStateChanges;
						jmethodID __method = __gr->getMethod("fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, source_j, pLightList_j, suppressRenderStateChanges_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::fireRenderSingleObjectStarted(rend, pass, source, pLightList, suppressRenderStateChanges);
					}
				}
				virtual void fireRenderSingleObjectEnd(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, const EarthView::World::Graphic::CAutoParamDataSource* source, const EarthView::World::Graphic::LightList* pLightList, ev_bool suppressRenderStateChanges)
				{
					if (this->_gRef != NULL && this->m_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong source_j = (jlong) source;
						jlong pLightList_j = (jlong) pLightList;
						jboolean suppressRenderStateChanges_j = (jboolean) suppressRenderStateChanges;
						jmethodID __method = __gr->getMethod("fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, source_j, pLightList_j, suppressRenderStateChanges_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::fireRenderSingleObjectEnd(rend, pass, source, pLightList, suppressRenderStateChanges);
					}
				}
				virtual void fireShadowTexturesUpdated(ev_size_t numberOfShadowTextures)
				{
					if (this->_gRef != NULL && this->m_fireShadowTexturesUpdated_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong numberOfShadowTextures_j = (jlong) numberOfShadowTextures;
						jmethodID __method = __gr->getMethod("fireShadowTexturesUpdated_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , numberOfShadowTextures_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::fireShadowTexturesUpdated(numberOfShadowTextures);
					}
				}
				virtual void fireShadowTexturesPreCaster(EarthView::World::Graphic::CLight* light, EarthView::World::Graphic::CCamera* camera, ev_size_t iteration)
				{
					if (this->_gRef != NULL && this->m_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong camera_j = (jlong) camera;
						jlong iteration_j = (jlong) iteration;
						jmethodID __method = __gr->getMethod("fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , light_j, camera_j, iteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::fireShadowTexturesPreCaster(light, camera, iteration);
					}
				}
				virtual void fireShadowTexturesPreReceiver(EarthView::World::Graphic::CLight* light, EarthView::World::Graphic::CFrustum* f)
				{
					if (this->_gRef != NULL && this->m_fireShadowTexturesPreReceiver_CLight_CFrustum_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong f_j = (jlong) f;
						jmethodID __method = __gr->getMethod("fireShadowTexturesPreReceiver_CLight_CFrustum_callback");
						__env->CallVoidMethod(__obj, __method , light_j, f_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::fireShadowTexturesPreReceiver(light, f);
					}
				}
				virtual void firePreUpdateSceneGraph(EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_firePreUpdateSceneGraph_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("firePreUpdateSceneGraph_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::firePreUpdateSceneGraph(camera);
					}
				}
				virtual void firePostUpdateSceneGraph(EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_firePostUpdateSceneGraph_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("firePostUpdateSceneGraph_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::firePostUpdateSceneGraph(camera);
					}
				}
				virtual void firePreFindVisibleObjects(EarthView::World::Graphic::CViewport* v)
				{
					if (this->_gRef != NULL && this->m_firePreFindVisibleObjects_CViewport_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong v_j = (jlong) v;
						jmethodID __method = __gr->getMethod("firePreFindVisibleObjects_CViewport_callback");
						__env->CallVoidMethod(__obj, __method , v_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::firePreFindVisibleObjects(v);
					}
				}
				virtual void firePostFindVisibleObjects(EarthView::World::Graphic::CViewport* v)
				{
					if (this->_gRef != NULL && this->m_firePostFindVisibleObjects_CViewport_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong v_j = (jlong) v;
						jmethodID __method = __gr->getMethod("firePostFindVisibleObjects_CViewport_callback");
						__env->CallVoidMethod(__obj, __method , v_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::firePostFindVisibleObjects(v);
					}
				}
				virtual void fireSceneManagerDestroyed()
				{
					if (this->_gRef != NULL && this->m_fireSceneManagerDestroyed_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("fireSceneManagerDestroyed_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::fireSceneManagerDestroyed();
					}
				}
				virtual void setViewport(EarthView::World::Graphic::CViewport* vp)
				{
					if (this->_gRef != NULL && this->m_setViewport_CViewport_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong vp_j = (jlong) vp;
						jmethodID __method = __gr->getMethod("setViewport_CViewport_callback");
						__env->CallVoidMethod(__obj, __method , vp_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setViewport(vp);
					}
				}
				virtual void renderVisibleObjectsDefaultSequence()
				{
					if (this->_gRef != NULL && this->m_renderVisibleObjectsDefaultSequence_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("renderVisibleObjectsDefaultSequence_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderVisibleObjectsDefaultSequence();
					}
				}
				virtual void renderVisibleObjectsCustomSequence(EarthView::World::Graphic::CRenderQueueInvocationSequence* s)
				{
					if (this->_gRef != NULL && this->m_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong s_j = (jlong) s;
						jmethodID __method = __gr->getMethod("renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback");
						__env->CallVoidMethod(__obj, __method , s_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderVisibleObjectsCustomSequence(s);
					}
				}
				virtual void prepareRenderQueue()
				{
					if (this->_gRef != NULL && this->m_prepareRenderQueue_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("prepareRenderQueue_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::prepareRenderQueue();
					}
				}
				virtual void renderSingleObject(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, ev_bool lightScissoringClipping, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, lightScissoringClipping_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration, manualLightList);
					}
				}
				virtual void renderSingleObject(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, ev_bool lightScissoringClipping, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, lightScissoringClipping_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration);
					}
				}
				virtual EarthView::World::Graphic::CAutoParamDataSource* createAutoParamDataSource() const
				{
					if (this->_gRef != NULL && this->m_createAutoParamDataSource_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createAutoParamDataSource_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAutoParamDataSource *__values1 = (EarthView::World::Graphic::CAutoParamDataSource*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createAutoParamDataSource();
					}
				}
				virtual void findLightsAffectingFrustum(const EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_findLightsAffectingFrustum_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("findLightsAffectingFrustum_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::findLightsAffectingFrustum(camera);
					}
				}
				virtual void initShadowVolumeMaterials()
				{
					if (this->_gRef != NULL && this->m_initShadowVolumeMaterials_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("initShadowVolumeMaterials_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::initShadowVolumeMaterials();
					}
				}
				virtual void ensureShadowTexturesCreated()
				{
					if (this->_gRef != NULL && this->m_ensureShadowTexturesCreated_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("ensureShadowTexturesCreated_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::ensureShadowTexturesCreated();
					}
				}
				virtual void destroyShadowTextures()
				{
					if (this->_gRef != NULL && this->m_destroyShadowTextures_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyShadowTextures_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyShadowTextures();
					}
				}
				virtual EarthView::World::Graphic::CSceneManager::RenderContext* _pauseRendering()
				{
					if (this->_gRef != NULL && this->m__pauseRendering_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_pauseRendering_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneManager::RenderContext *__values1 = (EarthView::World::Graphic::CSceneManager::RenderContext*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::_pauseRendering();
					}
				}
				virtual void _resumeRendering(EarthView::World::Graphic::CSceneManager::RenderContext* context)
				{
					if (this->_gRef != NULL && this->m__resumeRendering_RenderContext_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong context_j = (jlong) context;
						jmethodID __method = __gr->getMethod("_resumeRendering_RenderContext_callback");
						__env->CallVoidMethod(__obj, __method , context_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_resumeRendering(context);
					}
				}
				virtual void renderShadowVolumesToStencil(const EarthView::World::Graphic::CLight* light, const EarthView::World::Graphic::CCamera* cam, ev_bool calcScissor)
				{
					if (this->_gRef != NULL && this->m_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong cam_j = (jlong) cam;
						jboolean calcScissor_j = (jboolean) calcScissor;
						jmethodID __method = __gr->getMethod("renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , light_j, cam_j, calcScissor_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderShadowVolumesToStencil(light, cam, calcScissor);
					}
				}
				virtual void setShadowVolumeStencilState(ev_bool secondpass, ev_bool zfail, ev_bool twosided)
				{
					if (this->_gRef != NULL && this->m_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean secondpass_j = (jboolean) secondpass;
						jboolean zfail_j = (jboolean) zfail;
						jboolean twosided_j = (jboolean) twosided;
						jmethodID __method = __gr->getMethod("setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , secondpass_j, zfail_j, twosided_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowVolumeStencilState(secondpass, zfail, twosided);
					}
				}
				virtual const EarthView::World::Graphic::CSceneManager::ShadowCasterList& findShadowCastersForLight(const EarthView::World::Graphic::CLight* light, const EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_findShadowCastersForLight_CLight_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("findShadowCastersForLight_CLight_CCamera_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , light_j, camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CSceneManager::ShadowCasterList &__values1 = *(const EarthView::World::Graphic::CSceneManager::ShadowCasterList*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::findShadowCastersForLight(light, camera);
					}
				}
				virtual void renderBasicQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* pGroup, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pGroup_j = (jlong) pGroup;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , pGroup_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderBasicQueueGroupObjects(pGroup, om);
					}
				}
				virtual void renderAdditiveStencilShadowedQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderAdditiveStencilShadowedQueueGroupObjects(group, om);
					}
				}
				virtual void renderModulativeStencilShadowedQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderModulativeStencilShadowedQueueGroupObjects(group, om);
					}
				}
				virtual void renderTextureShadowCasterQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderTextureShadowCasterQueueGroupObjects(group, om);
					}
				}
				virtual void renderTextureShadowReceiverQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderTextureShadowReceiverQueueGroupObjects(group, om);
					}
				}
				virtual void renderModulativeTextureShadowedQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderModulativeTextureShadowedQueueGroupObjects(group, om);
					}
				}
				virtual void renderAdditiveTextureShadowedQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderAdditiveTextureShadowedQueueGroupObjects(group, om);
					}
				}
				virtual void renderObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong objs_j = (jlong) &objs;
						jint om_j = (jint) om;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , objs_j, om_j, lightScissoringClipping_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
					}
				}
				virtual void renderObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong objs_j = (jlong) &objs;
						jint om_j = (jint) om;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , objs_j, om_j, lightScissoringClipping_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderObjects(objs, om, lightScissoringClipping, doLightIteration);
					}
				}
				virtual void renderTransparentShadowCasterObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong objs_j = (jlong) &objs;
						jint om_j = (jint) om;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , objs_j, om_j, lightScissoringClipping_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
					}
				}
				virtual void renderTransparentShadowCasterObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong objs_j = (jlong) &objs;
						jint om_j = (jint) om;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , objs_j, om_j, lightScissoringClipping_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration);
					}
				}
				virtual void updateRenderQueueSplitOptions()
				{
					if (this->_gRef != NULL && this->m_updateRenderQueueSplitOptions_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("updateRenderQueueSplitOptions_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::updateRenderQueueSplitOptions();
					}
				}
				virtual void updateRenderQueueGroupSplitOptions(EarthView::World::Graphic::CRenderQueueGroup* group, ev_bool suppressShadows, ev_bool suppressRenderState)
				{
					if (this->_gRef != NULL && this->m_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jboolean suppressShadows_j = (jboolean) suppressShadows;
						jboolean suppressRenderState_j = (jboolean) suppressRenderState;
						jmethodID __method = __gr->getMethod("updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , group_j, suppressShadows_j, suppressRenderState_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::updateRenderQueueGroupSplitOptions(group, suppressShadows, suppressRenderState);
					}
				}
				virtual EarthView::World::Graphic::ClipResult buildAndSetScissor(const EarthView::World::Graphic::LightList& ll, const EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m_buildAndSetScissor_LightList_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ll_j = (jlong) &ll;
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("buildAndSetScissor_LightList_CCamera_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method , ll_j, cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ClipResult __values1 = (EarthView::World::Graphic::ClipResult) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::buildAndSetScissor(ll, cam);
					}
				}
				virtual void buildScissor(const EarthView::World::Graphic::CLight* l, const EarthView::World::Graphic::CCamera* cam, EarthView::World::Graphic::RealRect& rect)
				{
					if (this->_gRef != NULL && this->m_buildScissor_CLight_CCamera_RealRect_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong l_j = (jlong) l;
						jlong cam_j = (jlong) cam;
						jlong rect_j = (jlong) &rect;
						jmethodID __method = __gr->getMethod("buildScissor_CLight_CCamera_RealRect_callback");
						__env->CallVoidMethod(__obj, __method , l_j, cam_j, rect_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::buildScissor(l, cam, rect);
					}
				}
				virtual void resetScissor()
				{
					if (this->_gRef != NULL && this->m_resetScissor_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("resetScissor_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::resetScissor();
					}
				}
				virtual EarthView::World::Graphic::ClipResult buildAndSetLightClip(const EarthView::World::Graphic::LightList& ll)
				{
					if (this->_gRef != NULL && this->m_buildAndSetLightClip_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ll_j = (jlong) &ll;
						jmethodID __method = __gr->getMethod("buildAndSetLightClip_LightList_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method , ll_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ClipResult __values1 = (EarthView::World::Graphic::ClipResult) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::buildAndSetLightClip(ll);
					}
				}
				virtual void buildLightClip(const EarthView::World::Graphic::CLight* l, EarthView::World::Spatial::Math::PlaneList& planes)
				{
					if (this->_gRef != NULL && this->m_buildLightClip_CLight_PlaneList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong l_j = (jlong) l;
						jlong planes_j = (jlong) &planes;
						jmethodID __method = __gr->getMethod("buildLightClip_CLight_PlaneList_callback");
						__env->CallVoidMethod(__obj, __method , l_j, planes_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::buildLightClip(l, planes);
					}
				}
				virtual void resetLightClip()
				{
					if (this->_gRef != NULL && this->m_resetLightClip_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("resetLightClip_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::resetLightClip();
					}
				}
				virtual void checkCachedLightClippingInfo()
				{
					if (this->_gRef != NULL && this->m_checkCachedLightClippingInfo_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("checkCachedLightClippingInfo_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::checkCachedLightClippingInfo();
					}
				}
				virtual void useLights(const EarthView::World::Graphic::LightList& lights, ev_uint16 limit)
				{
					if (this->_gRef != NULL && this->m_useLights_LightList_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong lights_j = (jlong) &lights;
						jint limit_j = (jint) limit;
						jmethodID __method = __gr->getMethod("useLights_LightList_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , lights_j, limit_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::useLights(lights, limit);
					}
				}
				virtual void setViewMatrix(const EarthView::World::Spatial::Math::CMatrix4& m)
				{
					if (this->_gRef != NULL && this->m_setViewMatrix_CMatrix4_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong m_j = (jlong) &m;
						jmethodID __method = __gr->getMethod("setViewMatrix_CMatrix4_callback");
						__env->CallVoidMethod(__obj, __method , m_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setViewMatrix(m);
					}
				}
				virtual void useLightsGpuProgram(const EarthView::World::Graphic::CPass* pass, const EarthView::World::Graphic::LightList* lights)
				{
					if (this->_gRef != NULL && this->m_useLightsGpuProgram_CPass_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong lights_j = (jlong) lights;
						jmethodID __method = __gr->getMethod("useLightsGpuProgram_CPass_LightList_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, lights_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::useLightsGpuProgram(pass, lights);
					}
				}
				virtual void bindGpuProgram(EarthView::World::Graphic::CGpuProgram* prog)
				{
					if (this->_gRef != NULL && this->m_bindGpuProgram_CGpuProgram_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong prog_j = (jlong) prog;
						jmethodID __method = __gr->getMethod("bindGpuProgram_CGpuProgram_callback");
						__env->CallVoidMethod(__obj, __method , prog_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::bindGpuProgram(prog);
					}
				}
				virtual void updateGpuProgramParameters(const EarthView::World::Graphic::CPass* p)
				{
					if (this->_gRef != NULL && this->m_updateGpuProgramParameters_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong p_j = (jlong) p;
						jmethodID __method = __gr->getMethod("updateGpuProgramParameters_CPass_callback");
						__env->CallVoidMethod(__obj, __method , p_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::updateGpuProgramParameters(p);
					}
				}
				virtual EarthView::World::Graphic::CCamera* getCamera(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getCamera_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getCamera_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CCamera *__values1 = (EarthView::World::Graphic::CCamera*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getCamera(name);
					}
				}
				virtual ev_bool hasCamera(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasCamera_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasCamera_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasCamera(name);
					}
				}
				virtual void destroyCamera(EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m_destroyCamera_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("destroyCamera_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyCamera(cam);
					}
				}
				virtual void destroyCamera(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyCamera_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyCamera_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyCamera(name);
					}
				}
				virtual void destroyAllCameras()
				{
					if (this->_gRef != NULL && this->m_destroyAllCameras_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllCameras_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllCameras();
					}
				}
				virtual EarthView::World::Graphic::CLight* createLight(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createLight_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createLight_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CLight *__values1 = (EarthView::World::Graphic::CLight*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createLight(name);
					}
				}
				virtual EarthView::World::Graphic::CLight* createLight()
				{
					if (this->_gRef != NULL && this->m_createLight_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createLight_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CLight *__values1 = (EarthView::World::Graphic::CLight*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createLight();
					}
				}
				virtual ev_uint16 getLightCount() const
				{
					if (this->_gRef != NULL && this->m_getLightCount_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getLightCount_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_uint16 __values1 = (ev_uint16) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getLightCount();
					}
				}
				virtual EarthView::World::Graphic::CLight* getLight(ev_uint16 index) const
				{
					if (this->_gRef != NULL && this->m_getLight_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint index_j = (jint) index;
						jmethodID __method = __gr->getMethod("getLight_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CLight *__values1 = (EarthView::World::Graphic::CLight*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getLight(index);
					}
				}
				virtual EarthView::World::Graphic::CLight* getLight(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getLight_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getLight_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CLight *__values1 = (EarthView::World::Graphic::CLight*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getLight(name);
					}
				}
				virtual ev_bool hasLight(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasLight_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasLight_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasLight(name);
					}
				}
				virtual const EarthView::World::Spatial::Math::PlaneList& getLightClippingPlanes(EarthView::World::Graphic::CLight* l)
				{
					if (this->_gRef != NULL && this->m_getLightClippingPlanes_CLight_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong l_j = (jlong) l;
						jmethodID __method = __gr->getMethod("getLightClippingPlanes_CLight_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , l_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Spatial::Math::PlaneList &__values1 = *(const EarthView::World::Spatial::Math::PlaneList*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getLightClippingPlanes(l);
					}
				}
				virtual const EarthView::World::Graphic::RealRect& getLightScissorRect(EarthView::World::Graphic::CLight* l, const EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m_getLightScissorRect_CLight_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong l_j = (jlong) l;
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("getLightScissorRect_CLight_CCamera_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , l_j, cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::RealRect &__values1 = *(const EarthView::World::Graphic::RealRect*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getLightScissorRect(l, cam);
					}
				}
				virtual void destroyLight(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyLight_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyLight_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyLight(name);
					}
				}
				virtual void destroyLight(EarthView::World::Graphic::CLight* light)
				{
					if (this->_gRef != NULL && this->m_destroyLight_CLight_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jmethodID __method = __gr->getMethod("destroyLight_CLight_callback");
						__env->CallVoidMethod(__obj, __method , light_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyLight(light);
					}
				}
				virtual void destroyAllLights()
				{
					if (this->_gRef != NULL && this->m_destroyAllLights_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllLights_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllLights();
					}
				}
				virtual EVString getSoftShadowTexName() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowTexName_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowTexName_void_callback");
						jstring __values1_j = (jstring)__env->CallObjectMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						const char* values_ch = __env->GetStringUTFChars(__values1_j,JNI_FALSE);
						EVString __values1 = values_ch;
						__env->ReleaseStringUTFChars(__values1_j,values_ch);
						#else
						const ev_wchar* values_ch = (const ev_wchar*)__env->GetStringChars(__values1_j,JNI_FALSE);
						EVString __values1 = values_ch;
						__env->ReleaseStringChars(__values1_j,(const jchar *)values_ch);
						#endif
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSoftShadowTexName();
					}
				}
				virtual EarthView::World::Graphic::CCamera* getShadowTexCam() const
				{
					if (this->_gRef != NULL && this->m_getShadowTexCam_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowTexCam_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CCamera *__values1 = (EarthView::World::Graphic::CCamera*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowTexCam();
					}
				}
				virtual EarthView::World::Spatial::Math::CMatrix4 getSoftShadowProjMatrix(ev_uint16 index) const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowProjMatrix_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint index_j = (jint) index;
						jmethodID __method = __gr->getMethod("getSoftShadowProjMatrix_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Spatial::Math::CMatrix4 __values1 = *(EarthView::World::Spatial::Math::CMatrix4*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSoftShadowProjMatrix(index);
					}
				}
				virtual EarthView::World::Spatial::Math::CVector4 getCascadeEyeSpaceDepthArray() const
				{
					if (this->_gRef != NULL && this->m_getCascadeEyeSpaceDepthArray_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getCascadeEyeSpaceDepthArray_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Spatial::Math::CVector4 __values1 = *(EarthView::World::Spatial::Math::CVector4*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getCascadeEyeSpaceDepthArray();
					}
				}
				virtual float getSoftShadowNearClip(ev_uint8 index) const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowNearClip_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort index_j = (jshort) index;
						jmethodID __method = __gr->getMethod("getSoftShadowNearClip_ev_uint8_callback");
						jfloat __values1_j = (jfloat)__env->CallFloatMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						float __values1 = (float) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSoftShadowNearClip(index);
					}
				}
				virtual float getSoftShadowFarClip(ev_uint8 index) const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowFarClip_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort index_j = (jshort) index;
						jmethodID __method = __gr->getMethod("getSoftShadowFarClip_ev_uint8_callback");
						jfloat __values1_j = (jfloat)__env->CallFloatMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						float __values1 = (float) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSoftShadowFarClip(index);
					}
				}
				virtual bool getIsUseSoftShadowFitToCascadesMode() const
				{
					if (this->_gRef != NULL && this->m_getIsUseSoftShadowFitToCascadesMode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getIsUseSoftShadowFitToCascadesMode_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						bool __values1 = (bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getIsUseSoftShadowFitToCascadesMode();
					}
				}
				virtual void setIsUseSoftShadowFitToCascadesMode(bool flag)
				{
					if (this->_gRef != NULL && this->m_setIsUseSoftShadowFitToCascadesMode_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean flag_j = (jboolean) flag;
						jmethodID __method = __gr->getMethod("setIsUseSoftShadowFitToCascadesMode_bool_callback");
						__env->CallVoidMethod(__obj, __method , flag_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setIsUseSoftShadowFitToCascadesMode(flag);
					}
				}
				virtual ev_uint8 getCurrentClipIndex() const
				{
					if (this->_gRef != NULL && this->m_getCurrentClipIndex_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getCurrentClipIndex_void_callback");
						jshort __values1_j = (jshort)__env->CallShortMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_uint8 __values1 = (ev_uint8) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getCurrentClipIndex();
					}
				}
				virtual bool getIsUseSoftShadowTechnique() const
				{
					if (this->_gRef != NULL && this->m_getIsUseSoftShadowTechnique_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getIsUseSoftShadowTechnique_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						bool __values1 = (bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getIsUseSoftShadowTechnique();
					}
				}
				virtual void setIsUseSoftShadowTechnique(bool flag)
				{
					if (this->_gRef != NULL && this->m_setIsUseSoftShadowTechnique_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean flag_j = (jboolean) flag;
						jmethodID __method = __gr->getMethod("setIsUseSoftShadowTechnique_bool_callback");
						__env->CallVoidMethod(__obj, __method , flag_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setIsUseSoftShadowTechnique(flag);
					}
				}
				virtual float getCascadePartitionsPercent() const
				{
					if (this->_gRef != NULL && this->m_getCascadePartitionsPercent_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getCascadePartitionsPercent_void_callback");
						jfloat __values1_j = (jfloat)__env->CallFloatMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						float __values1 = (float) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getCascadePartitionsPercent();
					}
				}
				virtual void setCascadePartitionsPercent(float percent)
				{
					if (this->_gRef != NULL && this->m_setCascadePartitionsPercent_float_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jfloat percent_j = (jfloat) percent;
						jmethodID __method = __gr->getMethod("setCascadePartitionsPercent_float_callback");
						__env->CallVoidMethod(__obj, __method , percent_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setCascadePartitionsPercent(percent);
					}
				}
				virtual int getCascadePartitionsDistance(ev_uint8 index) const
				{
					if (this->_gRef != NULL && this->m_getCascadePartitionsDistance_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort index_j = (jshort) index;
						jmethodID __method = __gr->getMethod("getCascadePartitionsDistance_ev_uint8_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						int __values1 = (int) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getCascadePartitionsDistance(index);
					}
				}
				virtual void setCascadePartitionsDistance(ev_uint8 index, ev_uint8 distance)
				{
					if (this->_gRef != NULL && this->m_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort index_j = (jshort) index;
						jshort distance_j = (jshort) distance;
						jmethodID __method = __gr->getMethod("setCascadePartitionsDistance_ev_uint8_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , index_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setCascadePartitionsDistance(index, distance);
					}
				}
				virtual EarthView::World::Graphic::PixelFormat getSoftShadowOffsetFormat() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowOffsetFormat_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowOffsetFormat_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::PixelFormat __values1 = (EarthView::World::Graphic::PixelFormat) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSoftShadowOffsetFormat();
					}
				}
				virtual bool hasShadowCasterInFrustum() const
				{
					if (this->_gRef != NULL && this->m_hasShadowCasterInFrustum_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("hasShadowCasterInFrustum_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						bool __values1 = (bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasShadowCasterInFrustum();
					}
				}
				virtual Real getSoftShadowLightBleedPower() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowLightBleedPower_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowLightBleedPower_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSoftShadowLightBleedPower();
					}
				}
				virtual void setSoftShadowLightBleedPower(Real power)
				{
					if (this->_gRef != NULL && this->m_setSoftShadowLightBleedPower_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble power_j = (jdouble) power;
						jmethodID __method = __gr->getMethod("setSoftShadowLightBleedPower_Real_callback");
						__env->CallVoidMethod(__obj, __method , power_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSoftShadowLightBleedPower(power);
					}
				}
				virtual Real getSoftShadowDepthOffset() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowDepthOffset_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowDepthOffset_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSoftShadowDepthOffset();
					}
				}
				virtual void setSoftShadowDepthOffset(Real offset)
				{
					if (this->_gRef != NULL && this->m_setSoftShadowDepthOffset_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble offset_j = (jdouble) offset;
						jmethodID __method = __gr->getMethod("setSoftShadowDepthOffset_Real_callback");
						__env->CallVoidMethod(__obj, __method , offset_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSoftShadowDepthOffset(offset);
					}
				}
				virtual float getSoftShadowNormalFactor() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowNormalFactor_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowNormalFactor_void_callback");
						jfloat __values1_j = (jfloat)__env->CallFloatMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						float __values1 = (float) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSoftShadowNormalFactor();
					}
				}
				virtual void setSoftShadowNormalFactor(float factor)
				{
					if (this->_gRef != NULL && this->m_setSoftShadowNormalFactor_float_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jfloat factor_j = (jfloat) factor;
						jmethodID __method = __gr->getMethod("setSoftShadowNormalFactor_float_callback");
						__env->CallVoidMethod(__obj, __method , factor_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSoftShadowNormalFactor(factor);
					}
				}
				virtual void _notifyLightsDirty()
				{
					if (this->_gRef != NULL && this->m__notifyLightsDirty_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_notifyLightsDirty_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_notifyLightsDirty();
					}
				}
				virtual const EarthView::World::Graphic::LightList& _getLightsAffectingFrustum() const
				{
					if (this->_gRef != NULL && this->m__getLightsAffectingFrustum_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_getLightsAffectingFrustum_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::LightList &__values1 = *(const EarthView::World::Graphic::LightList*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::_getLightsAffectingFrustum();
					}
				}
				virtual void _populateLightList(const EarthView::World::Spatial::Math::CVector3& position, Real radius, EarthView::World::Graphic::LightList& destList, ev_uint32 lightMask)
				{
					if (this->_gRef != NULL && this->m__populateLightList_CVector3_Real_LightList_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong position_j = (jlong) &position;
						jdouble radius_j = (jdouble) radius;
						jlong destList_j = (jlong) &destList;
						jlong lightMask_j = (jlong) lightMask;
						jmethodID __method = __gr->getMethod("_populateLightList_CVector3_Real_LightList_ev_uint32_callback");
						__env->CallVoidMethod(__obj, __method , position_j, radius_j, destList_j, lightMask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_populateLightList(position, radius, destList, lightMask);
					}
				}
				virtual void _populateLightList(const EarthView::World::Spatial::Math::CVector3& position, Real radius, EarthView::World::Graphic::LightList& destList)
				{
					if (this->_gRef != NULL && this->m__populateLightList_CVector3_Real_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong position_j = (jlong) &position;
						jdouble radius_j = (jdouble) radius;
						jlong destList_j = (jlong) &destList;
						jmethodID __method = __gr->getMethod("_populateLightList_CVector3_Real_LightList_callback");
						__env->CallVoidMethod(__obj, __method , position_j, radius_j, destList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_populateLightList(position, radius, destList);
					}
				}
				virtual void _populateLightList(const EarthView::World::Graphic::CSceneNode* sn, Real radius, EarthView::World::Graphic::LightList& destList, ev_uint32 lightMask)
				{
					if (this->_gRef != NULL && this->m__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong sn_j = (jlong) sn;
						jdouble radius_j = (jdouble) radius;
						jlong destList_j = (jlong) &destList;
						jlong lightMask_j = (jlong) lightMask;
						jmethodID __method = __gr->getMethod("_populateLightList_CSceneNode_Real_LightList_ev_uint32_callback");
						__env->CallVoidMethod(__obj, __method , sn_j, radius_j, destList_j, lightMask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_populateLightList(sn, radius, destList, lightMask);
					}
				}
				virtual void _populateLightList(const EarthView::World::Graphic::CSceneNode* sn, Real radius, EarthView::World::Graphic::LightList& destList)
				{
					if (this->_gRef != NULL && this->m__populateLightList_CSceneNode_Real_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong sn_j = (jlong) sn;
						jdouble radius_j = (jdouble) radius;
						jlong destList_j = (jlong) &destList;
						jmethodID __method = __gr->getMethod("_populateLightList_CSceneNode_Real_LightList_callback");
						__env->CallVoidMethod(__obj, __method , sn_j, radius_j, destList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_populateLightList(sn, radius, destList);
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* createSceneNode()
				{
					if (this->_gRef != NULL && this->m_createSceneNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createSceneNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createSceneNode();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* createSceneNode(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createSceneNode_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createSceneNode_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createSceneNode(name);
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getRootSceneNode()
				{
					if (this->_gRef != NULL && this->m_getRootSceneNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getRootSceneNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getRootSceneNode();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getSceneNode(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getSceneNode_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getSceneNode_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSceneNode(name);
					}
				}
				virtual ev_bool hasSceneNode(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasSceneNode_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasSceneNode_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasSceneNode(name);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EVString& meshName, const EarthView::World::Core::IntVector& subentityIndics, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_EVString_IntVector_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jlong subentityIndics_j = (jlong) &subentityIndics;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("createEntity_EVString_EVString_IntVector_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, meshName_j, subentityIndics_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(entityName, meshName, subentityIndics, groupName);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EVString& meshName, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("createEntity_EVString_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, meshName_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(entityName, meshName, groupName);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EVString& meshName, const EarthView::World::Core::IntVector& subentityIndics)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_EVString_IntVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jlong subentityIndics_j = (jlong) &subentityIndics;
						jmethodID __method = __gr->getMethod("createEntity_EVString_EVString_IntVector_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, meshName_j, subentityIndics_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(entityName, meshName, subentityIndics);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EVString& meshName)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jmethodID __method = __gr->getMethod("createEntity_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, meshName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(entityName, meshName);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EarthView::World::Graphic::CMeshPtr& pMesh, const EarthView::World::Core::IntVector& subentityIndics)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_CMeshPtr_IntVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						jlong pMesh_j = (jlong) &pMesh;
						jlong subentityIndics_j = (jlong) &subentityIndics;
						jmethodID __method = __gr->getMethod("createEntity_EVString_CMeshPtr_IntVector_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, pMesh_j, subentityIndics_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(entityName, pMesh, subentityIndics);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EarthView::World::Graphic::CMeshPtr& pMesh)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_CMeshPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						jlong pMesh_j = (jlong) &pMesh;
						jmethodID __method = __gr->getMethod("createEntity_EVString_CMeshPtr_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, pMesh_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(entityName, pMesh);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EarthView::World::Graphic::CMeshPtr& pMesh, const EarthView::World::Core::IntVector& subentityIndics)
				{
					if (this->_gRef != NULL && this->m_createEntity_CMeshPtr_IntVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pMesh_j = (jlong) &pMesh;
						jlong subentityIndics_j = (jlong) &subentityIndics;
						jmethodID __method = __gr->getMethod("createEntity_CMeshPtr_IntVector_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pMesh_j, subentityIndics_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(pMesh, subentityIndics);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EarthView::World::Graphic::CMeshPtr& pMesh)
				{
					if (this->_gRef != NULL && this->m_createEntity_CMeshPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pMesh_j = (jlong) &pMesh;
						jmethodID __method = __gr->getMethod("createEntity_CMeshPtr_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pMesh_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(pMesh);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& meshName, const EarthView::World::Core::IntVector& subentityIndics)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_IntVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jlong subentityIndics_j = (jlong) &subentityIndics;
						jmethodID __method = __gr->getMethod("createEntity_EVString_IntVector_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j, subentityIndics_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(meshName, subentityIndics);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& meshName)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jmethodID __method = __gr->getMethod("createEntity_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(meshName);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, EarthView::World::Graphic::CSceneManager::PrefabType ptype)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_PrefabType_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						jint ptype_j = (jint) ptype;
						jmethodID __method = __gr->getMethod("createEntity_EVString_PrefabType_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, ptype_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(entityName, ptype);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(EarthView::World::Graphic::CSceneManager::PrefabType ptype)
				{
					if (this->_gRef != NULL && this->m_createEntity_PrefabType_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint ptype_j = (jint) ptype;
						jmethodID __method = __gr->getMethod("createEntity_PrefabType_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , ptype_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createEntity(ptype);
					}
				}
				virtual EarthView::World::Graphic::CEntity* getEntity(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getEntity_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getEntity_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getEntity(name);
					}
				}
				virtual ev_bool hasEntity(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasEntity_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasEntity_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasEntity(name);
					}
				}
				virtual void destroyEntity(EarthView::World::Graphic::CEntity* ent)
				{
					if (this->_gRef != NULL && this->m_destroyEntity_CEntity_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ent_j = (jlong) ent;
						jmethodID __method = __gr->getMethod("destroyEntity_CEntity_callback");
						__env->CallVoidMethod(__obj, __method , ent_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyEntity(ent);
					}
				}
				virtual void destroyEntity(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyEntity_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyEntity_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyEntity(name);
					}
				}
				virtual void destroyAllEntities()
				{
					if (this->_gRef != NULL && this->m_destroyAllEntities_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllEntities_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllEntities();
					}
				}
				virtual EarthView::World::Graphic::CManualObject* createManualObject(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createManualObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createManualObject_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CManualObject *__values1 = (EarthView::World::Graphic::CManualObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createManualObject(name);
					}
				}
				virtual EarthView::World::Graphic::CManualObject* createManualObject()
				{
					if (this->_gRef != NULL && this->m_createManualObject_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createManualObject_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CManualObject *__values1 = (EarthView::World::Graphic::CManualObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createManualObject();
					}
				}
				virtual EarthView::World::Graphic::CManualObject* getManualObject(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getManualObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getManualObject_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CManualObject *__values1 = (EarthView::World::Graphic::CManualObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getManualObject(name);
					}
				}
				virtual ev_bool hasManualObject(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasManualObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasManualObject_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasManualObject(name);
					}
				}
				virtual void destroyManualObject(EarthView::World::Graphic::CManualObject* obj)
				{
					if (this->_gRef != NULL && this->m_destroyManualObject_CManualObject_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong obj_j = (jlong) obj;
						jmethodID __method = __gr->getMethod("destroyManualObject_CManualObject_callback");
						__env->CallVoidMethod(__obj, __method , obj_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyManualObject(obj);
					}
				}
				virtual void destroyManualObject(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyManualObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyManualObject_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyManualObject(name);
					}
				}
				virtual void destroyAllManualObjects()
				{
					if (this->_gRef != NULL && this->m_destroyAllManualObjects_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllManualObjects_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllManualObjects();
					}
				}
				virtual EarthView::World::Graphic::CBillboardChain* createBillboardChain(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createBillboardChain_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createBillboardChain_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardChain *__values1 = (EarthView::World::Graphic::CBillboardChain*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createBillboardChain(name);
					}
				}
				virtual EarthView::World::Graphic::CBillboardChain* createBillboardChain()
				{
					if (this->_gRef != NULL && this->m_createBillboardChain_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createBillboardChain_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardChain *__values1 = (EarthView::World::Graphic::CBillboardChain*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createBillboardChain();
					}
				}
				virtual EarthView::World::Graphic::CBillboardChain* getBillboardChain(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getBillboardChain_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getBillboardChain_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardChain *__values1 = (EarthView::World::Graphic::CBillboardChain*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getBillboardChain(name);
					}
				}
				virtual ev_bool hasBillboardChain(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasBillboardChain_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasBillboardChain_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasBillboardChain(name);
					}
				}
				virtual void destroyBillboardChain(EarthView::World::Graphic::CBillboardChain* obj)
				{
					if (this->_gRef != NULL && this->m_destroyBillboardChain_CBillboardChain_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong obj_j = (jlong) obj;
						jmethodID __method = __gr->getMethod("destroyBillboardChain_CBillboardChain_callback");
						__env->CallVoidMethod(__obj, __method , obj_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyBillboardChain(obj);
					}
				}
				virtual void destroyBillboardChain(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyBillboardChain_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyBillboardChain_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyBillboardChain(name);
					}
				}
				virtual void destroyAllBillboardChains()
				{
					if (this->_gRef != NULL && this->m_destroyAllBillboardChains_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllBillboardChains_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllBillboardChains();
					}
				}
				virtual EarthView::World::Graphic::CRibbonTrail* createRibbonTrail(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createRibbonTrail_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createRibbonTrail_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRibbonTrail *__values1 = (EarthView::World::Graphic::CRibbonTrail*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createRibbonTrail(name);
					}
				}
				virtual EarthView::World::Graphic::CRibbonTrail* createRibbonTrail()
				{
					if (this->_gRef != NULL && this->m_createRibbonTrail_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createRibbonTrail_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRibbonTrail *__values1 = (EarthView::World::Graphic::CRibbonTrail*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createRibbonTrail();
					}
				}
				virtual EarthView::World::Graphic::CRibbonTrail* getRibbonTrail(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getRibbonTrail_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getRibbonTrail_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRibbonTrail *__values1 = (EarthView::World::Graphic::CRibbonTrail*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getRibbonTrail(name);
					}
				}
				virtual ev_bool hasRibbonTrail(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasRibbonTrail_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasRibbonTrail_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasRibbonTrail(name);
					}
				}
				virtual void destroyRibbonTrail(EarthView::World::Graphic::CRibbonTrail* obj)
				{
					if (this->_gRef != NULL && this->m_destroyRibbonTrail_CRibbonTrail_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong obj_j = (jlong) obj;
						jmethodID __method = __gr->getMethod("destroyRibbonTrail_CRibbonTrail_callback");
						__env->CallVoidMethod(__obj, __method , obj_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyRibbonTrail(obj);
					}
				}
				virtual void destroyRibbonTrail(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyRibbonTrail_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyRibbonTrail_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyRibbonTrail(name);
					}
				}
				virtual void destroyAllRibbonTrails()
				{
					if (this->_gRef != NULL && this->m_destroyAllRibbonTrails_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllRibbonTrails_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllRibbonTrails();
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(const EVString& name, const EVString& templateName)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring templateName_wch = templateName;
						jstring templateName_j = __env->NewString((const jchar*)templateName_wch.getString(), templateName_wch.size());
						jmethodID __method = __gr->getMethod("createParticleSystem_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, templateName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createParticleSystem(name, templateName);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(const EVString& name, ev_size_t quota, const EVString& resourceGroup)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_EVString_ev_size_t_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jlong quota_j = (jlong) quota;
						EarthView::World::Core::ev_wstring resourceGroup_wch = resourceGroup;
						jstring resourceGroup_j = __env->NewString((const jchar*)resourceGroup_wch.getString(), resourceGroup_wch.size());
						jmethodID __method = __gr->getMethod("createParticleSystem_EVString_ev_size_t_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, quota_j, resourceGroup_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createParticleSystem(name, quota, resourceGroup);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(const EVString& name, ev_size_t quota)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_EVString_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jlong quota_j = (jlong) quota;
						jmethodID __method = __gr->getMethod("createParticleSystem_EVString_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, quota_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createParticleSystem(name, quota);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createParticleSystem_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createParticleSystem(name);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(ev_size_t quota, const EVString& resourceGroup)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_ev_size_t_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong quota_j = (jlong) quota;
						EarthView::World::Core::ev_wstring resourceGroup_wch = resourceGroup;
						jstring resourceGroup_j = __env->NewString((const jchar*)resourceGroup_wch.getString(), resourceGroup_wch.size());
						jmethodID __method = __gr->getMethod("createParticleSystem_ev_size_t_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , quota_j, resourceGroup_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createParticleSystem(quota, resourceGroup);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(ev_size_t quota)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong quota_j = (jlong) quota;
						jmethodID __method = __gr->getMethod("createParticleSystem_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , quota_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createParticleSystem(quota);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem()
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createParticleSystem_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createParticleSystem();
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* getParticleSystem(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getParticleSystem_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getParticleSystem_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getParticleSystem(name);
					}
				}
				virtual ev_bool hasParticleSystem(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasParticleSystem_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasParticleSystem_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasParticleSystem(name);
					}
				}
				virtual void destroyParticleSystem(EarthView::World::Graphic::CParticleSystem* obj)
				{
					if (this->_gRef != NULL && this->m_destroyParticleSystem_CParticleSystem_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong obj_j = (jlong) obj;
						jmethodID __method = __gr->getMethod("destroyParticleSystem_CParticleSystem_callback");
						__env->CallVoidMethod(__obj, __method , obj_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyParticleSystem(obj);
					}
				}
				virtual void destroyParticleSystem(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyParticleSystem_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyParticleSystem_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyParticleSystem(name);
					}
				}
				virtual void destroyAllParticleSystems()
				{
					if (this->_gRef != NULL && this->m_destroyAllParticleSystems_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllParticleSystems_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllParticleSystems();
					}
				}
				virtual void prepareWorldGeometry(const EVString& filename)
				{
					if (this->_gRef != NULL && this->m_prepareWorldGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring filename_wch = filename;
						jstring filename_j = __env->NewString((const jchar*)filename_wch.getString(), filename_wch.size());
						jmethodID __method = __gr->getMethod("prepareWorldGeometry_EVString_callback");
						__env->CallVoidMethod(__obj, __method , filename_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::prepareWorldGeometry(filename);
					}
				}
				virtual void prepareWorldGeometry(EarthView::World::Core::DataStreamPtr& stream, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_prepareWorldGeometry_DataStreamPtr_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("prepareWorldGeometry_DataStreamPtr_EVString_callback");
						__env->CallVoidMethod(__obj, __method , stream_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::prepareWorldGeometry(stream, typeName);
					}
				}
				virtual void prepareWorldGeometry(EarthView::World::Core::DataStreamPtr& stream)
				{
					if (this->_gRef != NULL && this->m_prepareWorldGeometry_DataStreamPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						jmethodID __method = __gr->getMethod("prepareWorldGeometry_DataStreamPtr_callback");
						__env->CallVoidMethod(__obj, __method , stream_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::prepareWorldGeometry(stream);
					}
				}
				virtual void setWorldGeometry(const EVString& filename)
				{
					if (this->_gRef != NULL && this->m_setWorldGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring filename_wch = filename;
						jstring filename_j = __env->NewString((const jchar*)filename_wch.getString(), filename_wch.size());
						jmethodID __method = __gr->getMethod("setWorldGeometry_EVString_callback");
						__env->CallVoidMethod(__obj, __method , filename_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setWorldGeometry(filename);
					}
				}
				virtual void setWorldGeometry(EarthView::World::Core::DataStreamPtr& stream, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_setWorldGeometry_DataStreamPtr_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("setWorldGeometry_DataStreamPtr_EVString_callback");
						__env->CallVoidMethod(__obj, __method , stream_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setWorldGeometry(stream, typeName);
					}
				}
				virtual void setWorldGeometry(EarthView::World::Core::DataStreamPtr& stream)
				{
					if (this->_gRef != NULL && this->m_setWorldGeometry_DataStreamPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						jmethodID __method = __gr->getMethod("setWorldGeometry_DataStreamPtr_callback");
						__env->CallVoidMethod(__obj, __method , stream_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setWorldGeometry(stream);
					}
				}
				virtual ev_size_t estimateWorldGeometry(const EVString& filename)
				{
					if (this->_gRef != NULL && this->m_estimateWorldGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring filename_wch = filename;
						jstring filename_j = __env->NewString((const jchar*)filename_wch.getString(), filename_wch.size());
						jmethodID __method = __gr->getMethod("estimateWorldGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , filename_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::estimateWorldGeometry(filename);
					}
				}
				virtual ev_size_t estimateWorldGeometry(EarthView::World::Core::DataStreamPtr& stream, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_estimateWorldGeometry_DataStreamPtr_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("estimateWorldGeometry_DataStreamPtr_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , stream_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::estimateWorldGeometry(stream, typeName);
					}
				}
				virtual ev_size_t estimateWorldGeometry(EarthView::World::Core::DataStreamPtr& stream)
				{
					if (this->_gRef != NULL && this->m_estimateWorldGeometry_DataStreamPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						jmethodID __method = __gr->getMethod("estimateWorldGeometry_DataStreamPtr_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , stream_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::estimateWorldGeometry(stream);
					}
				}
				virtual EarthView::World::Graphic::ViewPoint getSuggestedViewpoint(ev_bool random)
				{
					if (this->_gRef != NULL && this->m_getSuggestedViewpoint_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean random_j = (jboolean) random;
						jmethodID __method = __gr->getMethod("getSuggestedViewpoint_ev_bool_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , random_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ViewPoint __values1 = *(EarthView::World::Graphic::ViewPoint*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSuggestedViewpoint(random);
					}
				}
				virtual EarthView::World::Graphic::ViewPoint getSuggestedViewpoint()
				{
					if (this->_gRef != NULL && this->m_getSuggestedViewpoint_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSuggestedViewpoint_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ViewPoint __values1 = *(EarthView::World::Graphic::ViewPoint*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSuggestedViewpoint();
					}
				}
				virtual ev_bool hasOption(const EVString& strKey) const
				{
					if (this->_gRef != NULL && this->m_hasOption_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring strKey_wch = strKey;
						jstring strKey_j = __env->NewString((const jchar*)strKey_wch.getString(), strKey_wch.size());
						jmethodID __method = __gr->getMethod("hasOption_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , strKey_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasOption(strKey);
					}
				}
				virtual void _applySceneAnimations()
				{
					if (this->_gRef != NULL && this->m__applySceneAnimations_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_applySceneAnimations_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_applySceneAnimations();
					}
				}
				virtual void _renderVisibleObjects()
				{
					if (this->_gRef != NULL && this->m__renderVisibleObjects_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_renderVisibleObjects_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_renderVisibleObjects();
					}
				}
				virtual void _renderScene(EarthView::World::Graphic::CCamera* camera, EarthView::World::Graphic::CViewport* vp, ev_bool includeOverlays)
				{
					if (this->_gRef != NULL && this->m__renderScene_CCamera_CViewport_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jlong vp_j = (jlong) vp;
						jboolean includeOverlays_j = (jboolean) includeOverlays;
						jmethodID __method = __gr->getMethod("_renderScene_CCamera_CViewport_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , camera_j, vp_j, includeOverlays_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_renderScene(camera, vp, includeOverlays);
					}
				}
				virtual void _queueSkiesForRendering(EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m__queueSkiesForRendering_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("_queueSkiesForRendering_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_queueSkiesForRendering(cam);
					}
				}
				virtual void _setDestinationRenderSystem(EarthView::World::Graphic::CRenderSystem* ref_sys)
				{
					if (this->_gRef != NULL && this->m__setDestinationRenderSystem_CRenderSystem_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ref_sys_j = (jlong) ref_sys;
						jmethodID __method = __gr->getMethod("_setDestinationRenderSystem_CRenderSystem_callback");
						__env->CallVoidMethod(__obj, __method , ref_sys_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setDestinationRenderSystem(ref_sys);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst, Real bow, ev_int32 xsegments, ev_int32 ysegments, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j, bow_j, xsegments_j, ysegments_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments, groupName);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst, Real bow, ev_int32 xsegments, ev_int32 ysegments)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j, bow_j, xsegments_j, ysegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst, Real bow, ev_int32 xsegments)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j, bow_j, xsegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst, Real bow)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jdouble bow_j = (jdouble) bow;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j, bow_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyPlane(enable, plane, materialName, scale);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyPlane(enable, plane, materialName);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue, Real bow, ev_int32 xsegments, ev_int32 ysegments, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j, bow_j, xsegments_j, ysegments_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments, groupName);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue, Real bow, ev_int32 xsegments, ev_int32 ysegments)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j, bow_j, xsegments_j, ysegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue, Real bow, ev_int32 xsegments)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j, bow_j, xsegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue, Real bow)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jdouble bow_j = (jdouble) bow;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j, bow_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyPlane(enable, plane, materialName, scale);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyPlane(enable, plane, materialName);
					}
				}
				virtual void setSkyPlaneEnabled(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setSkyPlaneEnabled_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setSkyPlaneEnabled_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyPlaneEnabled(enable);
					}
				}
				virtual ev_bool isSkyPlaneEnabled() const
				{
					if (this->_gRef != NULL && this->m_isSkyPlaneEnabled_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isSkyPlaneEnabled_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isSkyPlaneEnabled();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getSkyPlaneNode() const
				{
					if (this->_gRef != NULL && this->m_getSkyPlaneNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyPlaneNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSkyPlaneNode();
					}
				}
				virtual const EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters& getSkyPlaneGenParameters() const
				{
					if (this->_gRef != NULL && this->m_getSkyPlaneGenParameters_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyPlaneGenParameters_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters &__values1 = *(EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSkyPlaneGenParameters();
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, drawFirst_j, orientation_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyBox(enable, materialName, distance, drawFirst, orientation, groupName);
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, drawFirst_j, orientation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyBox(enable, materialName, distance, drawFirst, orientation);
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_bool drawFirst)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_Real_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, drawFirst_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyBox(enable, materialName, distance, drawFirst);
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName, Real distance)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyBox(enable, materialName, distance);
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyBox(enable, materialName);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, renderQueue_j, orientation_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyBox(enable, materialName, distance, renderQueue, orientation, groupName);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, renderQueue_j, orientation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyBox(enable, materialName, distance, renderQueue, orientation);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_uint8 renderQueue)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_Real_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, renderQueue_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyBox(enable, materialName, distance, renderQueue);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName, Real distance)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyBox(enable, materialName, distance);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyBox(enable, materialName);
					}
				}
				virtual void setSkyBoxEnabled(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setSkyBoxEnabled_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setSkyBoxEnabled_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyBoxEnabled(enable);
					}
				}
				virtual ev_bool isSkyBoxEnabled() const
				{
					if (this->_gRef != NULL && this->m_isSkyBoxEnabled_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isSkyBoxEnabled_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isSkyBoxEnabled();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getSkyBoxNode() const
				{
					if (this->_gRef != NULL && this->m_getSkyBoxNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyBoxNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSkyBoxNode();
					}
				}
				virtual const EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters& getSkyBoxGenParameters() const
				{
					if (this->_gRef != NULL && this->m_getSkyBoxGenParameters_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyBoxGenParameters_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters &__values1 = *(EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSkyBoxGenParameters();
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ysegments_keep, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ysegments_keep_j = (jint) ysegments_keep;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j, xsegments_j, ysegments_j, ysegments_keep_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep, groupName);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ysegments_keep)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ysegments_keep_j = (jint) ysegments_keep;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j, xsegments_j, ysegments_j, ysegments_keep_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j, xsegments_j, ysegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j, xsegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName, curvature, tiling);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName, curvature);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDome(enable, materialName);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ysegments_keep, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ysegments_keep_j = (jint) ysegments_keep;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j, xsegments_j, ysegments_j, ysegments_keep_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep, groupName);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ysegments_keep)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ysegments_keep_j = (jint) ysegments_keep;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j, xsegments_j, ysegments_j, ysegments_keep_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j, xsegments_j, ysegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j, xsegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName, curvature, tiling);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName, curvature);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setSkyDome(enable, materialName);
					}
				}
				virtual void setSkyDomeEnabled(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setSkyDomeEnabled_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setSkyDomeEnabled_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSkyDomeEnabled(enable);
					}
				}
				virtual ev_bool isSkyDomeEnabled() const
				{
					if (this->_gRef != NULL && this->m_isSkyDomeEnabled_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isSkyDomeEnabled_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isSkyDomeEnabled();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getSkyDomeNode() const
				{
					if (this->_gRef != NULL && this->m_getSkyDomeNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyDomeNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSkyDomeNode();
					}
				}
				virtual const EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters& getSkyDomeGenParameters() const
				{
					if (this->_gRef != NULL && this->m_getSkyDomeGenParameters_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyDomeGenParameters_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters &__values1 = *(EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSkyDomeGenParameters();
					}
				}
				virtual EarthView::World::Graphic::FogMode getFogMode() const
				{
					if (this->_gRef != NULL && this->m_getFogMode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogMode_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::FogMode __values1 = (EarthView::World::Graphic::FogMode) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getFogMode();
					}
				}
				virtual const EarthView::World::Graphic::CColourValue& getFogColour() const
				{
					if (this->_gRef != NULL && this->m_getFogColour_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogColour_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CColourValue &__values1 = *(const EarthView::World::Graphic::CColourValue*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getFogColour();
					}
				}
				virtual Real getFogStart() const
				{
					if (this->_gRef != NULL && this->m_getFogStart_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogStart_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getFogStart();
					}
				}
				virtual Real getFogEnd() const
				{
					if (this->_gRef != NULL && this->m_getFogEnd_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogEnd_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getFogEnd();
					}
				}
				virtual Real getFogDensity() const
				{
					if (this->_gRef != NULL && this->m_getFogDensity_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogDensity_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getFogDensity();
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* createBillboardSet(const EVString& name, ev_uint32 poolSize)
				{
					if (this->_gRef != NULL && this->m_createBillboardSet_EVString_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jlong poolSize_j = (jlong) poolSize;
						jmethodID __method = __gr->getMethod("createBillboardSet_EVString_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, poolSize_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createBillboardSet(name, poolSize);
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* createBillboardSet(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createBillboardSet_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createBillboardSet_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createBillboardSet(name);
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* createBillboardSet(ev_uint32 poolSize)
				{
					if (this->_gRef != NULL && this->m_createBillboardSet_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong poolSize_j = (jlong) poolSize;
						jmethodID __method = __gr->getMethod("createBillboardSet_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , poolSize_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createBillboardSet(poolSize);
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* createBillboardSet()
				{
					if (this->_gRef != NULL && this->m_createBillboardSet_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createBillboardSet_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createBillboardSet();
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* getBillboardSet(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getBillboardSet_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getBillboardSet_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getBillboardSet(name);
					}
				}
				virtual ev_bool hasBillboardSet(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasBillboardSet_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasBillboardSet_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasBillboardSet(name);
					}
				}
				virtual void destroyBillboardSet(EarthView::World::Graphic::CBillboardSet* set)
				{
					if (this->_gRef != NULL && this->m_destroyBillboardSet_CBillboardSet_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong set_j = (jlong) set;
						jmethodID __method = __gr->getMethod("destroyBillboardSet_CBillboardSet_callback");
						__env->CallVoidMethod(__obj, __method , set_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyBillboardSet(set);
					}
				}
				virtual void destroyBillboardSet(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyBillboardSet_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyBillboardSet_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyBillboardSet(name);
					}
				}
				virtual void destroyAllBillboardSets()
				{
					if (this->_gRef != NULL && this->m_destroyAllBillboardSets_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllBillboardSets_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllBillboardSets();
					}
				}
				virtual void setDisplaySceneNodes(ev_bool display)
				{
					if (this->_gRef != NULL && this->m_setDisplaySceneNodes_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean display_j = (jboolean) display;
						jmethodID __method = __gr->getMethod("setDisplaySceneNodes_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , display_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setDisplaySceneNodes(display);
					}
				}
				virtual ev_bool getDisplaySceneNodes() const
				{
					if (this->_gRef != NULL && this->m_getDisplaySceneNodes_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getDisplaySceneNodes_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getDisplaySceneNodes();
					}
				}
				virtual EarthView::World::Graphic::CAnimation* createAnimation(const EVString& name, Real length)
				{
					if (this->_gRef != NULL && this->m_createAnimation_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jdouble length_j = (jdouble) length;
						jmethodID __method = __gr->getMethod("createAnimation_EVString_Real_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, length_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAnimation *__values1 = (EarthView::World::Graphic::CAnimation*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createAnimation(name, length);
					}
				}
				virtual EarthView::World::Graphic::CAnimation* getAnimation(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getAnimation_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getAnimation_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAnimation *__values1 = (EarthView::World::Graphic::CAnimation*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getAnimation(name);
					}
				}
				virtual ev_bool hasAnimation(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasAnimation_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasAnimation_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasAnimation(name);
					}
				}
				virtual void destroyAnimation(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyAnimation_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyAnimation_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAnimation(name);
					}
				}
				virtual void destroyAllAnimations()
				{
					if (this->_gRef != NULL && this->m_destroyAllAnimations_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllAnimations_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllAnimations();
					}
				}
				virtual EarthView::World::Graphic::CAnimationState* createAnimationState(const EVString& animName)
				{
					if (this->_gRef != NULL && this->m_createAnimationState_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring animName_wch = animName;
						jstring animName_j = __env->NewString((const jchar*)animName_wch.getString(), animName_wch.size());
						jmethodID __method = __gr->getMethod("createAnimationState_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , animName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAnimationState *__values1 = (EarthView::World::Graphic::CAnimationState*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createAnimationState(animName);
					}
				}
				virtual EarthView::World::Graphic::CAnimationState* getAnimationState(const EVString& animName) const
				{
					if (this->_gRef != NULL && this->m_getAnimationState_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring animName_wch = animName;
						jstring animName_j = __env->NewString((const jchar*)animName_wch.getString(), animName_wch.size());
						jmethodID __method = __gr->getMethod("getAnimationState_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , animName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAnimationState *__values1 = (EarthView::World::Graphic::CAnimationState*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getAnimationState(animName);
					}
				}
				virtual ev_bool hasAnimationState(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasAnimationState_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasAnimationState_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasAnimationState(name);
					}
				}
				virtual void destroyAnimationState(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyAnimationState_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyAnimationState_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAnimationState(name);
					}
				}
				virtual void destroyAllAnimationStates()
				{
					if (this->_gRef != NULL && this->m_destroyAllAnimationStates_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllAnimationStates_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllAnimationStates();
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderOperation* rend, EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& worldMatrix, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong worldMatrix_j = (jlong) &worldMatrix;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jmethodID __method = __gr->getMethod("manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, worldMatrix_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix, doBeginEndFrame);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderOperation* rend, EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& worldMatrix, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong worldMatrix_j = (jlong) &worldMatrix;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jmethodID __method = __gr->getMethod("manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, worldMatrix_j, viewMatrix_j, projMatrix_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame, ev_bool lightScissoringClipping, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j, lightScissoringClipping_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration, manualLightList);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame, ev_bool lightScissoringClipping, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j, lightScissoringClipping_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame, ev_bool lightScissoringClipping)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j, lightScissoringClipping_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix);
					}
				}
				virtual EarthView::World::Graphic::CRenderQueue* getRenderQueue()
				{
					if (this->_gRef != NULL && this->m_getRenderQueue_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getRenderQueue_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRenderQueue *__values1 = (EarthView::World::Graphic::CRenderQueue*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getRenderQueue();
					}
				}
				virtual void addRenderQueueListener(EarthView::World::Graphic::CRenderQueueListener* ref_newListener)
				{
					if (this->_gRef != NULL && this->m_addRenderQueueListener_CRenderQueueListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ref_newListener_j = (jlong) ref_newListener;
						jmethodID __method = __gr->getMethod("addRenderQueueListener_CRenderQueueListener_callback");
						__env->CallVoidMethod(__obj, __method , ref_newListener_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::addRenderQueueListener(ref_newListener);
					}
				}
				virtual void removeRenderQueueListener(EarthView::World::Graphic::CRenderQueueListener* delListener)
				{
					if (this->_gRef != NULL && this->m_removeRenderQueueListener_CRenderQueueListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong delListener_j = (jlong) delListener;
						jmethodID __method = __gr->getMethod("removeRenderQueueListener_CRenderQueueListener_callback");
						__env->CallVoidMethod(__obj, __method , delListener_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::removeRenderQueueListener(delListener);
					}
				}
				virtual void addRenderObjectListener(EarthView::World::Graphic::CRenderObjectListener* ref_newListener)
				{
					if (this->_gRef != NULL && this->m_addRenderObjectListener_CRenderObjectListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ref_newListener_j = (jlong) ref_newListener;
						jmethodID __method = __gr->getMethod("addRenderObjectListener_CRenderObjectListener_callback");
						__env->CallVoidMethod(__obj, __method , ref_newListener_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::addRenderObjectListener(ref_newListener);
					}
				}
				virtual void removeRenderObjectListener(EarthView::World::Graphic::CRenderObjectListener* delListener)
				{
					if (this->_gRef != NULL && this->m_removeRenderObjectListener_CRenderObjectListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong delListener_j = (jlong) delListener;
						jmethodID __method = __gr->getMethod("removeRenderObjectListener_CRenderObjectListener_callback");
						__env->CallVoidMethod(__obj, __method , delListener_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::removeRenderObjectListener(delListener);
					}
				}
				virtual void addSpecialCaseRenderQueue(ev_uint8 qid)
				{
					if (this->_gRef != NULL && this->m_addSpecialCaseRenderQueue_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort qid_j = (jshort) qid;
						jmethodID __method = __gr->getMethod("addSpecialCaseRenderQueue_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , qid_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::addSpecialCaseRenderQueue(qid);
					}
				}
				virtual void removeSpecialCaseRenderQueue(ev_uint8 qid)
				{
					if (this->_gRef != NULL && this->m_removeSpecialCaseRenderQueue_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort qid_j = (jshort) qid;
						jmethodID __method = __gr->getMethod("removeSpecialCaseRenderQueue_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , qid_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::removeSpecialCaseRenderQueue(qid);
					}
				}
				virtual void clearSpecialCaseRenderQueues()
				{
					if (this->_gRef != NULL && this->m_clearSpecialCaseRenderQueues_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("clearSpecialCaseRenderQueues_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::clearSpecialCaseRenderQueues();
					}
				}
				virtual void setSpecialCaseRenderQueueMode(EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode mode)
				{
					if (this->_gRef != NULL && this->m_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint mode_j = (jint) mode;
						jmethodID __method = __gr->getMethod("setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback");
						__env->CallVoidMethod(__obj, __method , mode_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setSpecialCaseRenderQueueMode(mode);
					}
				}
				virtual EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode getSpecialCaseRenderQueueMode()
				{
					if (this->_gRef != NULL && this->m_getSpecialCaseRenderQueueMode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSpecialCaseRenderQueueMode_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode __values1 = (EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getSpecialCaseRenderQueueMode();
					}
				}
				virtual ev_bool isRenderQueueToBeProcessed(ev_uint8 qid)
				{
					if (this->_gRef != NULL && this->m_isRenderQueueToBeProcessed_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort qid_j = (jshort) qid;
						jmethodID __method = __gr->getMethod("isRenderQueueToBeProcessed_ev_uint8_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , qid_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isRenderQueueToBeProcessed(qid);
					}
				}
				virtual void setWorldGeometryRenderQueue(ev_uint8 qid)
				{
					if (this->_gRef != NULL && this->m_setWorldGeometryRenderQueue_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort qid_j = (jshort) qid;
						jmethodID __method = __gr->getMethod("setWorldGeometryRenderQueue_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , qid_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setWorldGeometryRenderQueue(qid);
					}
				}
				virtual ev_uint8 getWorldGeometryRenderQueue()
				{
					if (this->_gRef != NULL && this->m_getWorldGeometryRenderQueue_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getWorldGeometryRenderQueue_void_callback");
						jshort __values1_j = (jshort)__env->CallShortMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_uint8 __values1 = (ev_uint8) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getWorldGeometryRenderQueue();
					}
				}
				virtual void showBoundingBoxes(ev_bool bShow)
				{
					if (this->_gRef != NULL && this->m_showBoundingBoxes_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean bShow_j = (jboolean) bShow;
						jmethodID __method = __gr->getMethod("showBoundingBoxes_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , bShow_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::showBoundingBoxes(bShow);
					}
				}
				virtual ev_bool getShowBoundingBoxes() const
				{
					if (this->_gRef != NULL && this->m_getShowBoundingBoxes_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShowBoundingBoxes_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShowBoundingBoxes();
					}
				}
				virtual void _notifyAutotrackingSceneNode(EarthView::World::Graphic::CSceneNode* node, ev_bool autoTrack)
				{
					if (this->_gRef != NULL && this->m__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong node_j = (jlong) node;
						jboolean autoTrack_j = (jboolean) autoTrack;
						jmethodID __method = __gr->getMethod("_notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , node_j, autoTrack_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_notifyAutotrackingSceneNode(node, autoTrack);
					}
				}
				virtual void destroyQuery(EarthView::World::Graphic::CSceneQuery* query)
				{
					if (this->_gRef != NULL && this->m_destroyQuery_CSceneQuery_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong query_j = (jlong) query;
						jmethodID __method = __gr->getMethod("destroyQuery_CSceneQuery_callback");
						__env->CallVoidMethod(__obj, __method , query_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyQuery(query);
					}
				}
				virtual void setShadowTechnique(EarthView::World::Graphic::ShadowTechnique technique)
				{
					if (this->_gRef != NULL && this->m_setShadowTechnique_ShadowTechnique_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint technique_j = (jint) technique;
						jmethodID __method = __gr->getMethod("setShadowTechnique_ShadowTechnique_callback");
						__env->CallVoidMethod(__obj, __method , technique_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTechnique(technique);
					}
				}
				virtual EarthView::World::Graphic::ShadowTechnique getShadowTechnique() const
				{
					if (this->_gRef != NULL && this->m_getShadowTechnique_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowTechnique_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ShadowTechnique __values1 = (EarthView::World::Graphic::ShadowTechnique) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowTechnique();
					}
				}
				virtual void setShowDebugShadows(ev_bool debug)
				{
					if (this->_gRef != NULL && this->m_setShowDebugShadows_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean debug_j = (jboolean) debug;
						jmethodID __method = __gr->getMethod("setShowDebugShadows_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , debug_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShowDebugShadows(debug);
					}
				}
				virtual ev_bool getShowDebugShadows() const
				{
					if (this->_gRef != NULL && this->m_getShowDebugShadows_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShowDebugShadows_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShowDebugShadows();
					}
				}
				virtual void setShadowColour(const EarthView::World::Graphic::CColourValue& colour)
				{
					if (this->_gRef != NULL && this->m_setShadowColour_CColourValue_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong colour_j = (jlong) &colour;
						jmethodID __method = __gr->getMethod("setShadowColour_CColourValue_callback");
						__env->CallVoidMethod(__obj, __method , colour_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowColour(colour);
					}
				}
				virtual const EarthView::World::Graphic::CColourValue& getShadowColour() const
				{
					if (this->_gRef != NULL && this->m_getShadowColour_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowColour_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CColourValue &__values1 = *(const EarthView::World::Graphic::CColourValue*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowColour();
					}
				}
				virtual void setShadowDirectionalLightExtrusionDistance(Real dist)
				{
					if (this->_gRef != NULL && this->m_setShadowDirectionalLightExtrusionDistance_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble dist_j = (jdouble) dist;
						jmethodID __method = __gr->getMethod("setShadowDirectionalLightExtrusionDistance_Real_callback");
						__env->CallVoidMethod(__obj, __method , dist_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowDirectionalLightExtrusionDistance(dist);
					}
				}
				virtual Real getShadowDirectionalLightExtrusionDistance() const
				{
					if (this->_gRef != NULL && this->m_getShadowDirectionalLightExtrusionDistance_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowDirectionalLightExtrusionDistance_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowDirectionalLightExtrusionDistance();
					}
				}
				virtual void setShadowColorRRatio(Real rRatio)
				{
					if (this->_gRef != NULL && this->m_setShadowColorRRatio_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble rRatio_j = (jdouble) rRatio;
						jmethodID __method = __gr->getMethod("setShadowColorRRatio_Real_callback");
						__env->CallVoidMethod(__obj, __method , rRatio_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowColorRRatio(rRatio);
					}
				}
				virtual void setShadowColorGRatio(Real gRatio)
				{
					if (this->_gRef != NULL && this->m_setShadowColorGRatio_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble gRatio_j = (jdouble) gRatio;
						jmethodID __method = __gr->getMethod("setShadowColorGRatio_Real_callback");
						__env->CallVoidMethod(__obj, __method , gRatio_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowColorGRatio(gRatio);
					}
				}
				virtual void setShadowColorBRatio(Real bRatio)
				{
					if (this->_gRef != NULL && this->m_setShadowColorBRatio_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble bRatio_j = (jdouble) bRatio;
						jmethodID __method = __gr->getMethod("setShadowColorBRatio_Real_callback");
						__env->CallVoidMethod(__obj, __method , bRatio_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowColorBRatio(bRatio);
					}
				}
				virtual Real getShadowColorRRatio() const
				{
					if (this->_gRef != NULL && this->m_getShadowColorRRatio_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowColorRRatio_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowColorRRatio();
					}
				}
				virtual Real getShadowColorGRatio() const
				{
					if (this->_gRef != NULL && this->m_getShadowColorGRatio_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowColorGRatio_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowColorGRatio();
					}
				}
				virtual Real getShadowColorBRatio() const
				{
					if (this->_gRef != NULL && this->m_getShadowColorBRatio_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowColorBRatio_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowColorBRatio();
					}
				}
				virtual void setShadowFarDistance(Real distance)
				{
					if (this->_gRef != NULL && this->m_setShadowFarDistance_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("setShadowFarDistance_Real_callback");
						__env->CallVoidMethod(__obj, __method , distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowFarDistance(distance);
					}
				}
				virtual Real getShadowFarDistance() const
				{
					if (this->_gRef != NULL && this->m_getShadowFarDistance_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowFarDistance_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowFarDistance();
					}
				}
				virtual Real getShadowFarDistanceSquared() const
				{
					if (this->_gRef != NULL && this->m_getShadowFarDistanceSquared_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowFarDistanceSquared_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowFarDistanceSquared();
					}
				}
				virtual void setShadowIndexBufferSize(ev_size_t size)
				{
					if (this->_gRef != NULL && this->m_setShadowIndexBufferSize_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong size_j = (jlong) size;
						jmethodID __method = __gr->getMethod("setShadowIndexBufferSize_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , size_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowIndexBufferSize(size);
					}
				}
				virtual ev_size_t getShadowIndexBufferSize() const
				{
					if (this->_gRef != NULL && this->m_getShadowIndexBufferSize_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowIndexBufferSize_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowIndexBufferSize();
					}
				}
				virtual void setShadowTextureSize(ev_uint16 size)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSize_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jmethodID __method = __gr->getMethod("setShadowTextureSize_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , size_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureSize(size);
					}
				}
				virtual void setShadowTexturePixelFormat(EarthView::World::Graphic::PixelFormat fmt)
				{
					if (this->_gRef != NULL && this->m_setShadowTexturePixelFormat_PixelFormat_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint fmt_j = (jint) fmt;
						jmethodID __method = __gr->getMethod("setShadowTexturePixelFormat_PixelFormat_callback");
						__env->CallVoidMethod(__obj, __method , fmt_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTexturePixelFormat(fmt);
					}
				}
				virtual void setShadowTextureFSAA(ev_uint16 fsaa)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureFSAA_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint fsaa_j = (jint) fsaa;
						jmethodID __method = __gr->getMethod("setShadowTextureFSAA_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , fsaa_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureFSAA(fsaa);
					}
				}
				virtual void setShadowTextureCount(ev_size_t count)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureCount_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong count_j = (jlong) count;
						jmethodID __method = __gr->getMethod("setShadowTextureCount_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , count_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureCount(count);
					}
				}
				virtual void setShadowTextureSettings(ev_uint16 size, ev_uint16 count)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSettings_ev_uint16_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jint count_j = (jint) count;
						jmethodID __method = __gr->getMethod("setShadowTextureSettings_ev_uint16_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , size_j, count_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureSettings(size, count);
					}
				}
				virtual void setShadowTextureSettings(ev_uint16 size, ev_uint16 count, EarthView::World::Graphic::PixelFormat fmt)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jint count_j = (jint) count;
						jint fmt_j = (jint) fmt;
						jmethodID __method = __gr->getMethod("setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback");
						__env->CallVoidMethod(__obj, __method , size_j, count_j, fmt_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureSettings(size, count, fmt);
					}
				}
				virtual void setShadowTextureSettings(ev_uint16 size, ev_uint16 count, EarthView::World::Graphic::PixelFormat fmt, ev_uint16 fsaa)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jint count_j = (jint) count;
						jint fmt_j = (jint) fmt;
						jint fsaa_j = (jint) fsaa;
						jmethodID __method = __gr->getMethod("setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , size_j, count_j, fmt_j, fsaa_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureSettings(size, count, fmt, fsaa);
					}
				}
				virtual void setShadowTextureSettings(ev_uint16 size, ev_uint16 count, EarthView::World::Graphic::PixelFormat fmt, ev_uint16 fsaa, ev_uint16 depthBufferPoolId)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jint count_j = (jint) count;
						jint fmt_j = (jint) fmt;
						jint fsaa_j = (jint) fsaa;
						jint depthBufferPoolId_j = (jint) depthBufferPoolId;
						jmethodID __method = __gr->getMethod("setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , size_j, count_j, fmt_j, fsaa_j, depthBufferPoolId_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureSettings(size, count, fmt, fsaa, depthBufferPoolId);
					}
				}
				virtual const EarthView::World::Graphic::CTexturePtr& getShadowTexture(ev_size_t shadowIndex)
				{
					if (this->_gRef != NULL && this->m_getShadowTexture_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong shadowIndex_j = (jlong) shadowIndex;
						jmethodID __method = __gr->getMethod("getShadowTexture_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , shadowIndex_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CTexturePtr &__values1 = *(const EarthView::World::Graphic::CTexturePtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowTexture(shadowIndex);
					}
				}
				virtual void setShadowDirLightTextureOffset(Real offset)
				{
					if (this->_gRef != NULL && this->m_setShadowDirLightTextureOffset_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble offset_j = (jdouble) offset;
						jmethodID __method = __gr->getMethod("setShadowDirLightTextureOffset_Real_callback");
						__env->CallVoidMethod(__obj, __method , offset_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowDirLightTextureOffset(offset);
					}
				}
				virtual Real getShadowDirLightTextureOffset() const
				{
					if (this->_gRef != NULL && this->m_getShadowDirLightTextureOffset_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowDirLightTextureOffset_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowDirLightTextureOffset();
					}
				}
				virtual void setShadowTextureFadeStart(Real fadeStart)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureFadeStart_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble fadeStart_j = (jdouble) fadeStart;
						jmethodID __method = __gr->getMethod("setShadowTextureFadeStart_Real_callback");
						__env->CallVoidMethod(__obj, __method , fadeStart_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureFadeStart(fadeStart);
					}
				}
				virtual void setShadowTextureFadeEnd(Real fadeEnd)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureFadeEnd_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble fadeEnd_j = (jdouble) fadeEnd;
						jmethodID __method = __gr->getMethod("setShadowTextureFadeEnd_Real_callback");
						__env->CallVoidMethod(__obj, __method , fadeEnd_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureFadeEnd(fadeEnd);
					}
				}
				virtual void setShadowTextureSelfShadow(ev_bool selfShadow)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSelfShadow_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean selfShadow_j = (jboolean) selfShadow;
						jmethodID __method = __gr->getMethod("setShadowTextureSelfShadow_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , selfShadow_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureSelfShadow(selfShadow);
					}
				}
				virtual ev_bool getShadowTextureSelfShadow() const
				{
					if (this->_gRef != NULL && this->m_getShadowTextureSelfShadow_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowTextureSelfShadow_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowTextureSelfShadow();
					}
				}
				virtual void setShadowTextureCasterMaterial(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureCasterMaterial_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("setShadowTextureCasterMaterial_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureCasterMaterial(name);
					}
				}
				virtual void setShadowTextureReceiverMaterial(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureReceiverMaterial_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("setShadowTextureReceiverMaterial_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowTextureReceiverMaterial(name);
					}
				}
				virtual void setShadowCasterRenderBackFaces(ev_bool bf)
				{
					if (this->_gRef != NULL && this->m_setShadowCasterRenderBackFaces_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean bf_j = (jboolean) bf;
						jmethodID __method = __gr->getMethod("setShadowCasterRenderBackFaces_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , bf_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowCasterRenderBackFaces(bf);
					}
				}
				virtual ev_bool getShadowCasterRenderBackFaces() const
				{
					if (this->_gRef != NULL && this->m_getShadowCasterRenderBackFaces_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowCasterRenderBackFaces_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowCasterRenderBackFaces();
					}
				}
				virtual void setShadowCameraSetup(const EarthView::World::Graphic::ShadowCameraSetupPtr& shadowSetup)
				{
					if (this->_gRef != NULL && this->m_setShadowCameraSetup_ShadowCameraSetupPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong shadowSetup_j = (jlong) &shadowSetup;
						jmethodID __method = __gr->getMethod("setShadowCameraSetup_ShadowCameraSetupPtr_callback");
						__env->CallVoidMethod(__obj, __method , shadowSetup_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowCameraSetup(shadowSetup);
					}
				}
				virtual const EarthView::World::Graphic::ShadowCameraSetupPtr& getShadowCameraSetup() const
				{
					if (this->_gRef != NULL && this->m_getShadowCameraSetup_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowCameraSetup_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::ShadowCameraSetupPtr &__values1 = *(const EarthView::World::Graphic::ShadowCameraSetupPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowCameraSetup();
					}
				}
				virtual void setShadowUseInfiniteFarPlane(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setShadowUseInfiniteFarPlane_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setShadowUseInfiniteFarPlane_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowUseInfiniteFarPlane(enable);
					}
				}
				virtual ev_bool isShadowTechniqueStencilBased() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueStencilBased_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueStencilBased_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isShadowTechniqueStencilBased();
					}
				}
				virtual ev_bool isShadowTechniqueTextureBased() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueTextureBased_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueTextureBased_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isShadowTechniqueTextureBased();
					}
				}
				virtual ev_bool isShadowTechniqueModulative() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueModulative_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueModulative_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isShadowTechniqueModulative();
					}
				}
				virtual ev_bool isShadowTechniqueAdditive() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueAdditive_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueAdditive_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isShadowTechniqueAdditive();
					}
				}
				virtual ev_bool isShadowTechniqueIntegrated() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueIntegrated_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueIntegrated_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isShadowTechniqueIntegrated();
					}
				}
				virtual ev_bool isShadowTechniqueInUse() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueInUse_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueInUse_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isShadowTechniqueInUse();
					}
				}
				virtual void setShadowUseLightClipPlanes(ev_bool enabled)
				{
					if (this->_gRef != NULL && this->m_setShadowUseLightClipPlanes_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enabled_j = (jboolean) enabled;
						jmethodID __method = __gr->getMethod("setShadowUseLightClipPlanes_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enabled_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setShadowUseLightClipPlanes(enabled);
					}
				}
				virtual ev_bool getShadowUseLightClipPlanes() const
				{
					if (this->_gRef != NULL && this->m_getShadowUseLightClipPlanes_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowUseLightClipPlanes_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getShadowUseLightClipPlanes();
					}
				}
				virtual void _setActiveCompositorChain(EarthView::World::Graphic::CCompositorChain* chain)
				{
					if (this->_gRef != NULL && this->m__setActiveCompositorChain_CCompositorChain_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong chain_j = (jlong) chain;
						jmethodID __method = __gr->getMethod("_setActiveCompositorChain_CCompositorChain_callback");
						__env->CallVoidMethod(__obj, __method , chain_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_setActiveCompositorChain(chain);
					}
				}
				virtual void setLateMaterialResolving(ev_bool isLate)
				{
					if (this->_gRef != NULL && this->m_setLateMaterialResolving_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean isLate_j = (jboolean) isLate;
						jmethodID __method = __gr->getMethod("setLateMaterialResolving_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , isLate_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setLateMaterialResolving(isLate);
					}
				}
				virtual ev_bool isLateMaterialResolving() const
				{
					if (this->_gRef != NULL && this->m_isLateMaterialResolving_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isLateMaterialResolving_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::isLateMaterialResolving();
					}
				}
				virtual EarthView::World::Graphic::CCompositorChain* _getActiveCompositorChain() const
				{
					if (this->_gRef != NULL && this->m__getActiveCompositorChain_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_getActiveCompositorChain_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CCompositorChain *__values1 = (EarthView::World::Graphic::CCompositorChain*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::_getActiveCompositorChain();
					}
				}
				virtual void addListener(EarthView::World::Graphic::CSceneManager::CSceneManagerListener* ref_s)
				{
					if (this->_gRef != NULL && this->m_addListener_CSceneManagerListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ref_s_j = (jlong) ref_s;
						jmethodID __method = __gr->getMethod("addListener_CSceneManagerListener_callback");
						__env->CallVoidMethod(__obj, __method , ref_s_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::addListener(ref_s);
					}
				}
				virtual void removeListener(EarthView::World::Graphic::CSceneManager::CSceneManagerListener* s)
				{
					if (this->_gRef != NULL && this->m_removeListener_CSceneManagerListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong s_j = (jlong) s;
						jmethodID __method = __gr->getMethod("removeListener_CSceneManagerListener_callback");
						__env->CallVoidMethod(__obj, __method , s_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::removeListener(s);
					}
				}
				virtual ev_bool existListener(EarthView::World::Graphic::CSceneManager::CSceneManagerListener* s)
				{
					if (this->_gRef != NULL && this->m_existListener_CSceneManagerListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong s_j = (jlong) s;
						jmethodID __method = __gr->getMethod("existListener_CSceneManagerListener_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , s_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::existListener(s);
					}
				}
				virtual EarthView::World::Graphic::CStaticGeometry* createStaticGeometry(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createStaticGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createStaticGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CStaticGeometry *__values1 = (EarthView::World::Graphic::CStaticGeometry*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createStaticGeometry(name);
					}
				}
				virtual EarthView::World::Graphic::CStaticGeometry* getStaticGeometry(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getStaticGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getStaticGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CStaticGeometry *__values1 = (EarthView::World::Graphic::CStaticGeometry*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getStaticGeometry(name);
					}
				}
				virtual ev_bool hasStaticGeometry(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasStaticGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasStaticGeometry_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasStaticGeometry(name);
					}
				}
				virtual void destroyStaticGeometry(EarthView::World::Graphic::CStaticGeometry* geom)
				{
					if (this->_gRef != NULL && this->m_destroyStaticGeometry_CStaticGeometry_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong geom_j = (jlong) geom;
						jmethodID __method = __gr->getMethod("destroyStaticGeometry_CStaticGeometry_callback");
						__env->CallVoidMethod(__obj, __method , geom_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyStaticGeometry(geom);
					}
				}
				virtual void destroyStaticGeometry(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyStaticGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyStaticGeometry_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyStaticGeometry(name);
					}
				}
				virtual void destroyAllStaticGeometry()
				{
					if (this->_gRef != NULL && this->m_destroyAllStaticGeometry_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllStaticGeometry_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllStaticGeometry();
					}
				}
				virtual EarthView::World::Graphic::CInstancedGeometry* createInstancedGeometry(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createInstancedGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createInstancedGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstancedGeometry *__values1 = (EarthView::World::Graphic::CInstancedGeometry*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createInstancedGeometry(name);
					}
				}
				virtual EarthView::World::Graphic::CInstancedGeometry* getInstancedGeometry(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getInstancedGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getInstancedGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstancedGeometry *__values1 = (EarthView::World::Graphic::CInstancedGeometry*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getInstancedGeometry(name);
					}
				}
				virtual void destroyInstancedGeometry(EarthView::World::Graphic::CInstancedGeometry* geom)
				{
					if (this->_gRef != NULL && this->m_destroyInstancedGeometry_CInstancedGeometry_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong geom_j = (jlong) geom;
						jmethodID __method = __gr->getMethod("destroyInstancedGeometry_CInstancedGeometry_callback");
						__env->CallVoidMethod(__obj, __method , geom_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyInstancedGeometry(geom);
					}
				}
				virtual void destroyInstancedGeometry(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyInstancedGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyInstancedGeometry_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyInstancedGeometry(name);
					}
				}
				virtual void destroyAllInstancedGeometry()
				{
					if (this->_gRef != NULL && this->m_destroyAllInstancedGeometry_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllInstancedGeometry_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllInstancedGeometry();
					}
				}
				virtual EarthView::World::Graphic::CInstanceManager* createInstanceManager(const EVString& customName, const EVString& meshName, const EVString& groupName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch, ev_uint16 flags, ev_uint16 subMeshIdx)
				{
					if (this->_gRef != NULL && this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring customName_wch = customName;
						jstring customName_j = __env->NewString((const jchar*)customName_wch.getString(), customName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jint flags_j = (jint) flags;
						jint subMeshIdx_j = (jint) subMeshIdx;
						jmethodID __method = __gr->getMethod("createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , customName_j, meshName_j, groupName_j, technique_j, numInstancesPerBatch_j, flags_j, subMeshIdx_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstanceManager *__values1 = (EarthView::World::Graphic::CInstanceManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags, subMeshIdx);
					}
				}
				virtual EarthView::World::Graphic::CInstanceManager* createInstanceManager(const EVString& customName, const EVString& meshName, const EVString& groupName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch, ev_uint16 flags)
				{
					if (this->_gRef != NULL && this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring customName_wch = customName;
						jstring customName_j = __env->NewString((const jchar*)customName_wch.getString(), customName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jint flags_j = (jint) flags;
						jmethodID __method = __gr->getMethod("createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , customName_j, meshName_j, groupName_j, technique_j, numInstancesPerBatch_j, flags_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstanceManager *__values1 = (EarthView::World::Graphic::CInstanceManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags);
					}
				}
				virtual EarthView::World::Graphic::CInstanceManager* createInstanceManager(const EVString& customName, const EVString& meshName, const EVString& groupName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch)
				{
					if (this->_gRef != NULL && this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring customName_wch = customName;
						jstring customName_j = __env->NewString((const jchar*)customName_wch.getString(), customName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jmethodID __method = __gr->getMethod("createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , customName_j, meshName_j, groupName_j, technique_j, numInstancesPerBatch_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstanceManager *__values1 = (EarthView::World::Graphic::CInstanceManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch);
					}
				}
				virtual EarthView::World::Graphic::CInstanceManager* getInstanceManager(const EVString& managerName) const
				{
					if (this->_gRef != NULL && this->m_getInstanceManager_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring managerName_wch = managerName;
						jstring managerName_j = __env->NewString((const jchar*)managerName_wch.getString(), managerName_wch.size());
						jmethodID __method = __gr->getMethod("getInstanceManager_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , managerName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstanceManager *__values1 = (EarthView::World::Graphic::CInstanceManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getInstanceManager(managerName);
					}
				}
				virtual ev_bool hasInstanceManager(const EVString& managerName) const
				{
					if (this->_gRef != NULL && this->m_hasInstanceManager_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring managerName_wch = managerName;
						jstring managerName_j = __env->NewString((const jchar*)managerName_wch.getString(), managerName_wch.size());
						jmethodID __method = __gr->getMethod("hasInstanceManager_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , managerName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasInstanceManager(managerName);
					}
				}
				virtual void destroyInstanceManager(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyInstanceManager_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyInstanceManager_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyInstanceManager(name);
					}
				}
				virtual void destroyInstanceManager(EarthView::World::Graphic::CInstanceManager* instanceManager)
				{
					if (this->_gRef != NULL && this->m_destroyInstanceManager_CInstanceManager_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong instanceManager_j = (jlong) instanceManager;
						jmethodID __method = __gr->getMethod("destroyInstanceManager_CInstanceManager_callback");
						__env->CallVoidMethod(__obj, __method , instanceManager_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyInstanceManager(instanceManager);
					}
				}
				virtual void destroyInstanceManagerWithThreadSafe(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyInstanceManagerWithThreadSafe_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyInstanceManagerWithThreadSafe_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyInstanceManagerWithThreadSafe(name);
					}
				}
				virtual void destroyInstanceManagerWithThreadSafe(EarthView::World::Graphic::CInstanceManager* instanceManager)
				{
					if (this->_gRef != NULL && this->m_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong instanceManager_j = (jlong) instanceManager;
						jmethodID __method = __gr->getMethod("destroyInstanceManagerWithThreadSafe_CInstanceManager_callback");
						__env->CallVoidMethod(__obj, __method , instanceManager_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyInstanceManagerWithThreadSafe(instanceManager);
					}
				}
				virtual void destroyAllInstanceManagers()
				{
					if (this->_gRef != NULL && this->m_destroyAllInstanceManagers_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllInstanceManagers_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllInstanceManagers();
					}
				}
				virtual ev_size_t getNumInstancesPerBatch(const EVString& meshName, const EVString& groupName, const EVString& materialName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch)
				{
					if (this->_gRef != NULL && this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jmethodID __method = __gr->getMethod("getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j, groupName_j, materialName_j, technique_j, numInstancesPerBatch_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch);
					}
				}
				virtual ev_size_t getNumInstancesPerBatch(const EVString& meshName, const EVString& groupName, const EVString& materialName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch, ev_uint16 flags)
				{
					if (this->_gRef != NULL && this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jint flags_j = (jint) flags;
						jmethodID __method = __gr->getMethod("getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j, groupName_j, materialName_j, technique_j, numInstancesPerBatch_j, flags_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags);
					}
				}
				virtual ev_size_t getNumInstancesPerBatch(const EVString& meshName, const EVString& groupName, const EVString& materialName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch, ev_uint16 flags, ev_uint16 subMeshIdx)
				{
					if (this->_gRef != NULL && this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jint flags_j = (jint) flags;
						jint subMeshIdx_j = (jint) subMeshIdx;
						jmethodID __method = __gr->getMethod("getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j, groupName_j, materialName_j, technique_j, numInstancesPerBatch_j, flags_j, subMeshIdx_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags, subMeshIdx);
					}
				}
				virtual EarthView::World::Graphic::CInstancedEntity* createInstancedEntity(const EVString& materialName, const EVString& managerName)
				{
					if (this->_gRef != NULL && this->m_createInstancedEntity_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						EarthView::World::Core::ev_wstring managerName_wch = managerName;
						jstring managerName_j = __env->NewString((const jchar*)managerName_wch.getString(), managerName_wch.size());
						jmethodID __method = __gr->getMethod("createInstancedEntity_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , materialName_j, managerName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstancedEntity *__values1 = (EarthView::World::Graphic::CInstancedEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createInstancedEntity(materialName, managerName);
					}
				}
				virtual void destroyInstancedEntity(EarthView::World::Graphic::CInstancedEntity* instancedEntity)
				{
					if (this->_gRef != NULL && this->m_destroyInstancedEntity_CInstancedEntity_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong instancedEntity_j = (jlong) instancedEntity;
						jmethodID __method = __gr->getMethod("destroyInstancedEntity_CInstancedEntity_callback");
						__env->CallVoidMethod(__obj, __method , instancedEntity_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyInstancedEntity(instancedEntity);
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* createMovableObject(const EVString& name, const EVString& typeName, const EarthView::World::Core::CommonStringPairList* params)
				{
					if (this->_gRef != NULL && this->m_createMovableObject_EVString_EVString_CommonStringPairList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jlong params_j = (jlong) params;
						jmethodID __method = __gr->getMethod("createMovableObject_EVString_EVString_CommonStringPairList_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, typeName_j, params_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createMovableObject(name, typeName, params);
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* createMovableObject(const EVString& name, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_createMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("createMovableObject_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createMovableObject(name, typeName);
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* createMovableObject(const EVString& typeName, const EarthView::World::Core::CommonStringPairList* params)
				{
					if (this->_gRef != NULL && this->m_createMovableObject_EVString_CommonStringPairList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jlong params_j = (jlong) params;
						jmethodID __method = __gr->getMethod("createMovableObject_EVString_CommonStringPairList_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , typeName_j, params_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createMovableObject(typeName, params);
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* createMovableObject(const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_createMovableObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("createMovableObject_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::createMovableObject(typeName);
					}
				}
				virtual void destroyMovableObject(const EVString& name, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_destroyMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("destroyMovableObject_EVString_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyMovableObject(name, typeName);
					}
				}
				virtual void destroyMovableObject(EarthView::World::Graphic::CMovableObject* m)
				{
					if (this->_gRef != NULL && this->m_destroyMovableObject_CMovableObject_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong m_j = (jlong) m;
						jmethodID __method = __gr->getMethod("destroyMovableObject_CMovableObject_callback");
						__env->CallVoidMethod(__obj, __method , m_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyMovableObject(m);
					}
				}
				virtual void destroyAllMovableObjectsByType(const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_destroyAllMovableObjectsByType_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("destroyAllMovableObjectsByType_EVString_callback");
						__env->CallVoidMethod(__obj, __method , typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllMovableObjectsByType(typeName);
					}
				}
				virtual void destroyAllMovableObjects()
				{
					if (this->_gRef != NULL && this->m_destroyAllMovableObjects_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllMovableObjects_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::destroyAllMovableObjects();
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* getMovableObject(const EVString& name, const EVString& typeName) const
				{
					if (this->_gRef != NULL && this->m_getMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("getMovableObject_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getMovableObject(name, typeName);
					}
				}
				virtual ev_bool hasMovableObject(const EVString& name, const EVString& typeName) const
				{
					if (this->_gRef != NULL && this->m_hasMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("hasMovableObject_EVString_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::hasMovableObject(name, typeName);
					}
				}
				virtual EarthView::World::Graphic::CSceneManager::MovableObjectIterator getMovableObjectIterator(const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_getMovableObjectIterator_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("getMovableObjectIterator_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneManager::MovableObjectIterator __values1 = *(EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getMovableObjectIterator(typeName);
					}
				}
				virtual void injectMovableObject(EarthView::World::Graphic::CMovableObject* m)
				{
					if (this->_gRef != NULL && this->m_injectMovableObject_CMovableObject_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong m_j = (jlong) m;
						jmethodID __method = __gr->getMethod("injectMovableObject_CMovableObject_callback");
						__env->CallVoidMethod(__obj, __method , m_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::injectMovableObject(m);
					}
				}
				virtual void extractMovableObject(const EVString& name, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_extractMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("extractMovableObject_EVString_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::extractMovableObject(name, typeName);
					}
				}
				virtual void extractMovableObject(EarthView::World::Graphic::CMovableObject* m)
				{
					if (this->_gRef != NULL && this->m_extractMovableObject_CMovableObject_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong m_j = (jlong) m;
						jmethodID __method = __gr->getMethod("extractMovableObject_CMovableObject_callback");
						__env->CallVoidMethod(__obj, __method , m_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::extractMovableObject(m);
					}
				}
				virtual void extractAllMovableObjectsByType(const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_extractAllMovableObjectsByType_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("extractAllMovableObjectsByType_EVString_callback");
						__env->CallVoidMethod(__obj, __method , typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::extractAllMovableObjectsByType(typeName);
					}
				}
				virtual void setVisibilityMask(ev_uint32 vmask)
				{
					if (this->_gRef != NULL && this->m_setVisibilityMask_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong vmask_j = (jlong) vmask;
						jmethodID __method = __gr->getMethod("setVisibilityMask_ev_uint32_callback");
						__env->CallVoidMethod(__obj, __method , vmask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setVisibilityMask(vmask);
					}
				}
				virtual ev_uint32 getVisibilityMask()
				{
					if (this->_gRef != NULL && this->m_getVisibilityMask_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getVisibilityMask_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_uint32 __values1 = (ev_uint32) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getVisibilityMask();
					}
				}
				virtual void setFindVisibleObjects(ev_bool find)
				{
					if (this->_gRef != NULL && this->m_setFindVisibleObjects_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean find_j = (jboolean) find;
						jmethodID __method = __gr->getMethod("setFindVisibleObjects_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , find_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setFindVisibleObjects(find);
					}
				}
				virtual ev_bool getFindVisibleObjects()
				{
					if (this->_gRef != NULL && this->m_getFindVisibleObjects_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFindVisibleObjects_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getFindVisibleObjects();
					}
				}
				virtual void setNormaliseNormalsOnScale(ev_bool n)
				{
					if (this->_gRef != NULL && this->m_setNormaliseNormalsOnScale_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean n_j = (jboolean) n;
						jmethodID __method = __gr->getMethod("setNormaliseNormalsOnScale_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , n_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setNormaliseNormalsOnScale(n);
					}
				}
				virtual ev_bool getNormaliseNormalsOnScale() const
				{
					if (this->_gRef != NULL && this->m_getNormaliseNormalsOnScale_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getNormaliseNormalsOnScale_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getNormaliseNormalsOnScale();
					}
				}
				virtual void setFlipCullingOnNegativeScale(ev_bool n)
				{
					if (this->_gRef != NULL && this->m_setFlipCullingOnNegativeScale_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean n_j = (jboolean) n;
						jmethodID __method = __gr->getMethod("setFlipCullingOnNegativeScale_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , n_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setFlipCullingOnNegativeScale(n);
					}
				}
				virtual ev_bool getFlipCullingOnNegativeScale() const
				{
					if (this->_gRef != NULL && this->m_getFlipCullingOnNegativeScale_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFlipCullingOnNegativeScale_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getFlipCullingOnNegativeScale();
					}
				}
				virtual void _injectRenderWithPass(EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CRenderable* rend, ev_bool shadowDerivation, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jboolean shadowDerivation_j = (jboolean) shadowDerivation;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, rend_j, shadowDerivation_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration, manualLightList);
					}
				}
				virtual void _injectRenderWithPass(EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CRenderable* rend, ev_bool shadowDerivation, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jboolean shadowDerivation_j = (jboolean) shadowDerivation;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, rend_j, shadowDerivation_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration);
					}
				}
				virtual void _injectRenderWithPass(EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CRenderable* rend, ev_bool shadowDerivation)
				{
					if (this->_gRef != NULL && this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jboolean shadowDerivation_j = (jboolean) shadowDerivation;
						jmethodID __method = __gr->getMethod("_injectRenderWithPass_CPass_CRenderable_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, rend_j, shadowDerivation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation);
					}
				}
				virtual void _injectRenderWithPass(EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CRenderable* rend)
				{
					if (this->_gRef != NULL && this->m__injectRenderWithPass_CPass_CRenderable_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jmethodID __method = __gr->getMethod("_injectRenderWithPass_CPass_CRenderable_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, rend_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_injectRenderWithPass(pass, rend);
					}
				}
				virtual void _suppressRenderStateChanges(ev_bool suppress)
				{
					if (this->_gRef != NULL && this->m__suppressRenderStateChanges_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean suppress_j = (jboolean) suppress;
						jmethodID __method = __gr->getMethod("_suppressRenderStateChanges_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , suppress_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_suppressRenderStateChanges(suppress);
					}
				}
				virtual ev_bool _areRenderStateChangesSuppressed() const
				{
					if (this->_gRef != NULL && this->m__areRenderStateChangesSuppressed_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_areRenderStateChangesSuppressed_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::_areRenderStateChangesSuppressed();
					}
				}
				virtual const EarthView::World::Graphic::CPass* _setPass(const EarthView::World::Graphic::CPass* pass, ev_bool evenIfSuppressed, ev_bool shadowDerivation)
				{
					if (this->_gRef != NULL && this->m__setPass_CPass_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jboolean evenIfSuppressed_j = (jboolean) evenIfSuppressed;
						jboolean shadowDerivation_j = (jboolean) shadowDerivation;
						jmethodID __method = __gr->getMethod("_setPass_CPass_ev_bool_ev_bool_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j, evenIfSuppressed_j, shadowDerivation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::_setPass(pass, evenIfSuppressed, shadowDerivation);
					}
				}
				virtual const EarthView::World::Graphic::CPass* _setPass(const EarthView::World::Graphic::CPass* pass, ev_bool evenIfSuppressed)
				{
					if (this->_gRef != NULL && this->m__setPass_CPass_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jboolean evenIfSuppressed_j = (jboolean) evenIfSuppressed;
						jmethodID __method = __gr->getMethod("_setPass_CPass_ev_bool_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j, evenIfSuppressed_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::_setPass(pass, evenIfSuppressed);
					}
				}
				virtual const EarthView::World::Graphic::CPass* _setPass(const EarthView::World::Graphic::CPass* pass)
				{
					if (this->_gRef != NULL && this->m__setPass_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jmethodID __method = __gr->getMethod("_setPass_CPass_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::_setPass(pass);
					}
				}
				virtual void _markGpuParamsDirty(ev_uint16 mask)
				{
					if (this->_gRef != NULL && this->m__markGpuParamsDirty_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint mask_j = (jint) mask;
						jmethodID __method = __gr->getMethod("_markGpuParamsDirty_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_markGpuParamsDirty(mask);
					}
				}
				virtual void _suppressShadows(ev_bool suppress)
				{
					if (this->_gRef != NULL && this->m__suppressShadows_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean suppress_j = (jboolean) suppress;
						jmethodID __method = __gr->getMethod("_suppressShadows_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , suppress_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_suppressShadows(suppress);
					}
				}
				virtual ev_bool _areShadowsSuppressed() const
				{
					if (this->_gRef != NULL && this->m__areShadowsSuppressed_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_areShadowsSuppressed_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::_areShadowsSuppressed();
					}
				}
				virtual void _renderQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("_renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::_renderQueueGroupObjects(group, om);
					}
				}
				virtual void setCameraRelativeRendering(ev_bool rel)
				{
					if (this->_gRef != NULL && this->m_setCameraRelativeRendering_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean rel_j = (jboolean) rel;
						jmethodID __method = __gr->getMethod("setCameraRelativeRendering_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rel_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setCameraRelativeRendering(rel);
					}
				}
				virtual ev_bool getCameraRelativeRendering() const
				{
					if (this->_gRef != NULL && this->m_getCameraRelativeRendering_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getCameraRelativeRendering_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManager::getCameraRelativeRendering();
					}
				}
				virtual void setCollisionDetectionEnable(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setCollisionDetectionEnable_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setCollisionDetectionEnable_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManager::setCollisionDetectionEnable(enable);
					}
				}
			};
			REGISTER_FACTORY_CLASS(JCGeoSceneManagerProxy);
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager__1findVisibleObjects_1CCamera_1VisibleObjectsBoundsInfo_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong visibleBounds_j, jboolean onlyShadowCasters_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *visibleBounds = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*) visibleBounds_j;
				ev_bool onlyShadowCasters = (ev_bool) onlyShadowCasters_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::_findVisibleObjects(cam, visibleBounds, onlyShadowCasters);
				}
				else
				{
					pObjectX->_findVisibleObjects(cam, visibleBounds, onlyShadowCasters);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1findVisibleObjects_1CCamera_1VisibleObjectsBoundsInfo_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback", "(JJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager__1findVisibleObjects_1CCamera_1VisibleObjectsBoundsInfo_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong visibleBounds_j, jboolean onlyShadowCasters_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *visibleBounds = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*) visibleBounds_j;
				ev_bool onlyShadowCasters = (ev_bool) onlyShadowCasters_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::_findVisibleObjects(cam, visibleBounds, onlyShadowCasters);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setSceneTileType_1SceneTileType(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint type_j)
			{
				EarthView::World::Spatial3D::SceneTileType type = (EarthView::World::Spatial3D::SceneTileType) type_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->setSceneTileType(type);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getSceneTileType_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::SceneTileType __values1 = pObjectX->getSceneTileType();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageTileDivisionMode_1ImageTileDivisionMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mode_j)
			{
				EarthView::World::Spatial3D::ImageTileDivisionMode mode = (EarthView::World::Spatial3D::ImageTileDivisionMode) mode_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setImageTileDivisionMode(mode);
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageTileDivisionMode_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::ImageTileDivisionMode __values1 = pObjectX->getImageTileDivisionMode();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getSeaType_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::SeaType __values1 = pObjectX->getSeaType();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setFFTSeaType_1FFTSeaType(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint type_j)
			{
				EarthView::World::Spatial3D::FFTSeaType type = (EarthView::World::Spatial3D::FFTSeaType) type_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setFFTSeaType(type);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setSeaType_1SeaType(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint type_j)
			{
				EarthView::World::Spatial3D::SeaType type = (EarthView::World::Spatial3D::SeaType) type_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setSeaType(type);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setSeaVertexNum_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong vertexnum_j)
			{
				ev_uint32 vertexnum = (ev_uint32) vertexnum_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setSeaVertexNum(vertexnum);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getSeaVertexNum_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_uint32 __values1 = pObjectX->getSeaVertexNum();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_createCamera_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					EarthView::World::Graphic::CCamera* __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::createCamera(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CCamera* __values1 = pObjectX->createCamera(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createCamera_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createCamera_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createCamera_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_createCamera_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CCamera* __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::createCamera(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTypeName_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					EVString __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTypeName();
					EarthView::World::Core::ev_wstring valuesw1 = __values1;
					jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
					return __values1_j;
				}
				else
				{
					EVString __values1 = pObjectX->getTypeName();
					EarthView::World::Core::ev_wstring valuesw1 = __values1;
					jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getTypeName_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTypeName_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTypeName_void_callback", "()Ljava/lang/String;");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTypeName_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EVString __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTypeName();
				EarthView::World::Core::ev_wstring valuesw1 = __values1;
				jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager__1updateSceneGraph_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::_updateSceneGraph(cam);
				}
				else
				{
					pObjectX->_updateSceneGraph(cam);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1updateSceneGraph_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__updateSceneGraph_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_updateSceneGraph_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager__1updateSceneGraph_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::_updateSceneGraph(cam);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_update_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->update(cam);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_intersect_1CRay_1CVector3_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong intersectPoint_j, jlong camera_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Spatial::Math::CVector3 &intersectPoint = *(EarthView::World::Spatial::Math::CVector3*) intersectPoint_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->intersect(ray, intersectPoint, camera);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_intersect_1CRay_1CVector3(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong intersectPoint_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Spatial::Math::CVector3 &intersectPoint = *(EarthView::World::Spatial::Math::CVector3*) intersectPoint_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->intersect(ray, intersectPoint);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_intersect_1CRay_1CVector3_1CCamera_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong intersectPoint_j, jlong camera_j, jboolean intersectModel_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Spatial::Math::CVector3 &intersectPoint = *(EarthView::World::Spatial::Math::CVector3*) intersectPoint_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				bool intersectModel = (bool) intersectModel_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->intersect(ray, intersectPoint, camera, intersectModel);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_intersect_1CRay_1CVector3_1CCamera_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong intersectPoint_j, jlong camera_j, jboolean intersectModel_j, jboolean intersectSeaMap_j, jboolean positiveSide_j, jboolean negativeSide_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Spatial::Math::CVector3 &intersectPoint = *(EarthView::World::Spatial::Math::CVector3*) intersectPoint_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				ev_bool intersectModel = (ev_bool) intersectModel_j;
				ev_bool intersectSeaMap = (ev_bool) intersectSeaMap_j;
				ev_bool positiveSide = (ev_bool) positiveSide_j;
				ev_bool negativeSide = (ev_bool) negativeSide_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->intersect(ray, intersectPoint, camera, intersectModel, intersectSeaMap, positiveSide, negativeSide);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_intersect_1CRay_1CVector3_1CCamera_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong intersectPoint_j, jlong camera_j, jboolean intersectModel_j, jboolean intersectSeaMap_j, jboolean positiveSide_j, jboolean negativeSide_j, jlong modelIntersected_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Spatial::Math::CVector3 &intersectPoint = *(EarthView::World::Spatial::Math::CVector3*) intersectPoint_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				ev_bool intersectModel = (ev_bool) intersectModel_j;
				ev_bool intersectSeaMap = (ev_bool) intersectSeaMap_j;
				ev_bool positiveSide = (ev_bool) positiveSide_j;
				ev_bool negativeSide = (ev_bool) negativeSide_j;
				ev_bool &modelIntersected = *(ev_bool*) modelIntersected_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->intersect(ray, intersectPoint, camera, intersectModel, intersectSeaMap, positiveSide, negativeSide, modelIntersected);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_intersect_1CRay_1CVector3_1CCamera_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong intersectPoint_j, jlong camera_j, jboolean intersectModel_j, jboolean intersectSeaMap_j, jboolean positiveSide_j, jboolean negativeSide_j, jlong modelIntersected_j, jlong seaIntersected_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Spatial::Math::CVector3 &intersectPoint = *(EarthView::World::Spatial::Math::CVector3*) intersectPoint_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				ev_bool intersectModel = (ev_bool) intersectModel_j;
				ev_bool intersectSeaMap = (ev_bool) intersectSeaMap_j;
				ev_bool positiveSide = (ev_bool) positiveSide_j;
				ev_bool negativeSide = (ev_bool) negativeSide_j;
				ev_bool &modelIntersected = *(ev_bool*) modelIntersected_j;
				ev_bool &seaIntersected = *(ev_bool*) seaIntersected_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->intersect(ray, intersectPoint, camera, intersectModel, intersectSeaMap, positiveSide, negativeSide, modelIntersected, seaIntersected);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_intersect_1CRay_1CVector3_1CCamera_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong intersectPoint_j, jlong camera_j, jboolean intersectModel_j, jboolean intersectSeaMap_j, jboolean positiveSide_j, jboolean negativeSide_j, jlong modelIntersected_j, jlong seaIntersected_j, jlong groundIntersected_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Spatial::Math::CVector3 &intersectPoint = *(EarthView::World::Spatial::Math::CVector3*) intersectPoint_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				ev_bool intersectModel = (ev_bool) intersectModel_j;
				ev_bool intersectSeaMap = (ev_bool) intersectSeaMap_j;
				ev_bool positiveSide = (ev_bool) positiveSide_j;
				ev_bool negativeSide = (ev_bool) negativeSide_j;
				ev_bool &modelIntersected = *(ev_bool*) modelIntersected_j;
				ev_bool &seaIntersected = *(ev_bool*) seaIntersected_j;
				ev_bool &groundIntersected = *(ev_bool*) groundIntersected_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->intersect(ray, intersectPoint, camera, intersectModel, intersectSeaMap, positiveSide, negativeSide, modelIntersected, seaIntersected, groundIntersected);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_00024IntersectTypeHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					CGeoSceneManager::ITT_NULL,
					CGeoSceneManager::ITT_Ground,
					CGeoSceneManager::ITT_Model,
					CGeoSceneManager::ITT_Sea,
					CGeoSceneManager::ITT_OBQ
				};
				jintArray array = __env->NewIntArray(5);
				__env->SetIntArrayRegion(array, 0, 5, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_intersect_1CRay_1CVector3_1CCamera_1ev_1uint16_1ev_1bool_1ev_1bool_1IntersectType(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong intersectPoint_j, jlong camera_j, jint intersectType_j, jboolean positiveSide_j, jboolean negativeSide_j, jlong intersectResult_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Spatial::Math::CVector3 &intersectPoint = *(EarthView::World::Spatial::Math::CVector3*) intersectPoint_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				ev_uint16 intersectType = (ev_uint16) intersectType_j;
				ev_bool positiveSide = (ev_bool) positiveSide_j;
				ev_bool negativeSide = (ev_bool) negativeSide_j;
				EarthView::World::Spatial3D::CGeoSceneManager::IntersectType &intersectResult = *(EarthView::World::Spatial3D::CGeoSceneManager::IntersectType*) intersectResult_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->intersect(ray, intersectPoint, camera, intersectType, positiveSide, negativeSide, intersectResult);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getCameraPostion_1CDegree_1CDegree_1CDegree_1CDegree_1ev_1real64(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong latitude_j, jlong longitude_j, jlong heading_j, jlong tilt_j, jlong altitude_j)
			{
				EarthView::World::Spatial::Math::CDegree &latitude = *(EarthView::World::Spatial::Math::CDegree*) latitude_j;
				EarthView::World::Spatial::Math::CDegree &longitude = *(EarthView::World::Spatial::Math::CDegree*) longitude_j;
				EarthView::World::Spatial::Math::CDegree &heading = *(EarthView::World::Spatial::Math::CDegree*) heading_j;
				EarthView::World::Spatial::Math::CDegree &tilt = *(EarthView::World::Spatial::Math::CDegree*) tilt_j;
				ev_real64 &altitude = *(ev_real64*) altitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->getCameraPostion(latitude, longitude, heading, tilt, altitude);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getCameraPostion_1CDegree_1CDegree_1CDegree_1CDegree_1ev_1real64_1ev_1real64(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong latitude_j, jlong longitude_j, jlong heading_j, jlong tilt_j, jlong altitude_j, jlong moditifAltitude_j)
			{
				EarthView::World::Spatial::Math::CDegree &latitude = *(EarthView::World::Spatial::Math::CDegree*) latitude_j;
				EarthView::World::Spatial::Math::CDegree &longitude = *(EarthView::World::Spatial::Math::CDegree*) longitude_j;
				EarthView::World::Spatial::Math::CDegree &heading = *(EarthView::World::Spatial::Math::CDegree*) heading_j;
				EarthView::World::Spatial::Math::CDegree &tilt = *(EarthView::World::Spatial::Math::CDegree*) tilt_j;
				ev_real64 &altitude = *(ev_real64*) altitude_j;
				ev_real64 &moditifAltitude = *(ev_real64*) moditifAltitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->getCameraPostion(latitude, longitude, heading, tilt, altitude, moditifAltitude);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getCameraUnderGroundMode_1ev_1bool_1ev_1bool_1ev_1real64(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong isUnderGround_j, jlong isPlaneBased_j, jlong cameraControlDepth_j)
			{
				ev_bool &isUnderGround = *(ev_bool*) isUnderGround_j;
				ev_bool &isPlaneBased = *(ev_bool*) isPlaneBased_j;
				ev_real64 &cameraControlDepth = *(ev_real64*) cameraControlDepth_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->getCameraUnderGroundMode(isUnderGround, isPlaneBased, cameraControlDepth);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_addFlyPath_1CGlobeFlyPathPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong flyPath_j)
			{
				const EarthView::World::Spatial3D::CGlobeFlyPathPtr &flyPath = *(EarthView::World::Spatial3D::CGlobeFlyPathPtr*) flyPath_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->addFlyPath(flyPath);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_hasFlyPath_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->hasFlyPath(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_removeFlyPath_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->removeFlyPath(name);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getFlyPath_1EVString_1CGlobeFlyPathPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jlong flyPath_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Spatial3D::CGlobeFlyPathPtr &flyPath = *(EarthView::World::Spatial3D::CGlobeFlyPathPtr*) flyPath_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getFlyPath(name, flyPath);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getFlyPathName_1int(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint index_j)
			{
				int index = (int) index_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EVString __values1 = pObjectX->getFlyPathName(index);
				EarthView::World::Core::ev_wstring valuesw1 = __values1;
				jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getFlyPathCount_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_int32 __values1 = pObjectX->getFlyPathCount();
				jint __values1_j = (jint)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getFlyPathIndex_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring flyPathName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* flyPathName_ch = (const ev_char*)__env->GetStringUTFChars(flyPathName_j,JNI_FALSE);
				const EVString flyPathName = flyPathName_ch;
				__env->ReleaseStringUTFChars(flyPathName_j, (const char *)flyPathName_ch);
				#else
				const ev_wchar* flyPathName_ch = (const ev_wchar*)__env->GetStringChars(flyPathName_j,JNI_FALSE);
				const EVString flyPathName = flyPathName_ch;
				__env->ReleaseStringChars(flyPathName_j, (const jchar *)flyPathName_ch);
				#endif
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_int32 __values1 = pObjectX->getFlyPathIndex(flyPathName);
				jint __values1_j = (jint)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setGoogleCameraManipulatorEnabled_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setGoogleCameraManipulatorEnabled(enable);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getGoogleCameraManipulatorEnabled_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getGoogleCameraManipulatorEnabled();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setEnableManipulatorIntersectModel_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setEnableManipulatorIntersectModel(enable);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getEnableManipulatorIntersectModel_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getEnableManipulatorIntersectModel();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setEnableManipulatorIntersectFloor_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setEnableManipulatorIntersectFloor(enable);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getEnableManipulatorIntersectFloor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getEnableManipulatorIntersectFloor();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setCameraNearClipRate_1ev_1real64(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble cameraNearClipRate_j)
			{
				ev_real64 cameraNearClipRate = (ev_real64) cameraNearClipRate_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setCameraNearClipRate(cameraNearClipRate);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getCameraNearClipRate_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_real64 __values1 = pObjectX->getCameraNearClipRate();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateAtmosphereViewport_1CViewport(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_viewport_j)
			{
				EarthView::World::Graphic::CViewport *ref_viewport = (EarthView::World::Graphic::CViewport*) ref_viewport_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->updateAtmosphereViewport(ref_viewport);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getGlobeAtmosphere_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial::Effect3D::CGlobeAtmosphere* __values1 = pObjectX->getGlobeAtmosphere();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getSunPosition_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					EarthView::World::Spatial::Math::CVector3 __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getSunPosition();
					EarthView::World::Spatial::Math::CVector3 *returnvalues = new EarthView::World::Spatial::Math::CVector3(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Spatial::Math::CVector3 __values1 = pObjectX->getSunPosition();
					EarthView::World::Spatial::Math::CVector3 *returnvalues = new EarthView::World::Spatial::Math::CVector3(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSunPosition_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSunPosition_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSunPosition_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getSunPosition_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial::Math::CVector3 __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getSunPosition();
				EarthView::World::Spatial::Math::CVector3 *returnvalues = new EarthView::World::Spatial::Math::CVector3(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setAtmosphereVisible_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				const ev_bool visible = (const ev_bool) visible_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setAtmosphereVisible(visible);
				}
				else
				{
					pObjectX->setAtmosphereVisible(visible);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setAtmosphereVisible_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setAtmosphereVisible_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setAtmosphereVisible_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setAtmosphereVisible_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				const ev_bool visible = (const ev_bool) visible_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setAtmosphereVisible(visible);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_storeAtmosphereVisibleState_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::storeAtmosphereVisibleState();
				}
				else
				{
					pObjectX->storeAtmosphereVisibleState();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1storeAtmosphereVisibleState_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_storeAtmosphereVisibleState_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"storeAtmosphereVisibleState_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_storeAtmosphereVisibleState_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::storeAtmosphereVisibleState();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_restoreAtmosphereVisibleState_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::restoreAtmosphereVisibleState();
				}
				else
				{
					pObjectX->restoreAtmosphereVisibleState();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1restoreAtmosphereVisibleState_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_restoreAtmosphereVisibleState_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"restoreAtmosphereVisibleState_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_restoreAtmosphereVisibleState_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::restoreAtmosphereVisibleState();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setSunVisible_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				ev_bool flag = (ev_bool) flag_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setSunVisible(flag);
				}
				else
				{
					pObjectX->setSunVisible(flag);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSunVisible_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSunVisible_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSunVisible_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setSunVisible_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				ev_bool flag = (ev_bool) flag_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setSunVisible(flag);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setShadowTextureConfig_1ev_1size_1t_1ShadowTextureConfig(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jlong config_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				const EarthView::World::Graphic::ShadowTextureConfig &config = *(EarthView::World::Graphic::ShadowTextureConfig*) config_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setShadowTextureConfig(shadowIndex, config);
				}
				else
				{
					pObjectX->setShadowTextureConfig(shadowIndex, config);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureConfig_1ev_1size_1t_1ShadowTextureConfig(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setShadowTextureConfig_1ev_1size_1t_1ShadowTextureConfig_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jlong config_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				const EarthView::World::Graphic::ShadowTextureConfig &config = *(EarthView::World::Graphic::ShadowTextureConfig*) config_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setShadowTextureConfig(shadowIndex, config);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_prepareShadowTextures_1CCamera_1CViewport_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong vp_j, jlong lightList_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Graphic::LightList *lightList = (const EarthView::World::Graphic::LightList*) lightList_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::prepareShadowTextures(cam, vp, lightList);
				}
				else
				{
					pObjectX->prepareShadowTextures(cam, vp, lightList);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1prepareShadowTextures_1CCamera_1CViewport_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareShadowTextures_CCamera_CViewport_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareShadowTextures_CCamera_CViewport_LightList_callback", "(JJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_prepareShadowTextures_1CCamera_1CViewport_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong vp_j, jlong lightList_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Graphic::LightList *lightList = (const EarthView::World::Graphic::LightList*) lightList_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::prepareShadowTextures(cam, vp, lightList);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_checkShadowCasterInFrustum_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::checkShadowCasterInFrustum(camera);
				}
				else
				{
					pObjectX->checkShadowCasterInFrustum(camera);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1checkShadowCasterInFrustum_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_checkShadowCasterInFrustum_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"checkShadowCasterInFrustum_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_checkShadowCasterInFrustum_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::checkShadowCasterInFrustum(camera);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainCastShadow_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrainCastShadow();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					bool __values1 = pObjectX->getTerrainCastShadow();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getTerrainCastShadow_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTerrainCastShadow_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTerrainCastShadow_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainCastShadow_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrainCastShadow();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setTerrainCastShadow_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				bool flag = (bool) flag_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setTerrainCastShadow(flag);
				}
				else
				{
					pObjectX->setTerrainCastShadow(flag);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setTerrainCastShadow_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setTerrainCastShadow_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setTerrainCastShadow_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setTerrainCastShadow_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				bool flag = (bool) flag_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setTerrainCastShadow(flag);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_addReflectionViewportListener_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->addReflectionViewportListener();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_removeReflectionViewportListener_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->removeReflectionViewportListener();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getKmlGroupLayer_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::Atlas::CKmlGroupLayer* __values1 = pObjectX->getKmlGroupLayer();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getFeatureGroupLayer_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::Atlas::CFeatureGroupLayer* __values1 = pObjectX->getFeatureGroupLayer();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageGroupLayer_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::Atlas::CImageGroupLayer* __values1 = pObjectX->getImageGroupLayer();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainGroupLayer_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::Atlas::CTerrainGroupLayer* __values1 = pObjectX->getTerrainGroupLayer();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTempGroupLayer_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::Atlas::CTempGroupLayer* __values1 = pObjectX->getTempGroupLayer();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_isActive_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->isActive();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setActive_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean active_j)
			{
				ev_bool active = (ev_bool) active_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setActive(active);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_addTempLayer_1ILayer(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_layer_j)
			{
				EarthView::World::Spatial::Atlas::ILayer *ref_layer = (EarthView::World::Spatial::Atlas::ILayer*) ref_layer_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::addTempLayer(ref_layer);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->addTempLayer(ref_layer);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1addTempLayer_1ILayer(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addTempLayer_ILayer_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addTempLayer_ILayer_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_addTempLayer_1ILayer_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_layer_j)
			{
				EarthView::World::Spatial::Atlas::ILayer *ref_layer = (EarthView::World::Spatial::Atlas::ILayer*) ref_layer_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::addTempLayer(ref_layer);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_removeTempLayer_1ILayer(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong layer_j)
			{
				EarthView::World::Spatial::Atlas::ILayer *layer = (EarthView::World::Spatial::Atlas::ILayer*) layer_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::removeTempLayer(layer);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->removeTempLayer(layer);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1removeTempLayer_1ILayer(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeTempLayer_ILayer_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeTempLayer_ILayer_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_removeTempLayer_1ILayer_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong layer_j)
			{
				EarthView::World::Spatial::Atlas::ILayer *layer = (EarthView::World::Spatial::Atlas::ILayer*) layer_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::removeTempLayer(layer);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTempLayersTile_1ev_1int32_1ev_1int32_1ev_1int32_1CTileData(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint level_j, jint row_j, jint col_j, jlong tile_j)
			{
				ev_int32 level = (ev_int32) level_j;
				ev_int32 row = (ev_int32) row_j;
				ev_int32 col = (ev_int32) col_j;
				EarthView::World::Spatial::CTileData &tile = *(EarthView::World::Spatial::CTileData*) tile_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getTempLayersTile(level, row, col, tile);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_toXML_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EVString __values1 = pObjectX->toXML();
				EarthView::World::Core::ev_wstring valuesw1 = __values1;
				jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTileAverageAltitude_1ev_1real64_1ev_1real64(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble longitude_j)
			{
				ev_real64 latitude = (ev_real64) latitude_j;
				ev_real64 longitude = (ev_real64) longitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					ev_real64 __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTileAverageAltitude(latitude, longitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					ev_real64 __values1 = pObjectX->getTileAverageAltitude(latitude, longitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getTileAverageAltitude_1ev_1real64_1ev_1real64(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTileAverageAltitude_ev_real64_ev_real64_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTileAverageAltitude_ev_real64_ev_real64_callback", "(DD)D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTileAverageAltitude_1ev_1real64_1ev_1real64_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble longitude_j)
			{
				ev_real64 latitude = (ev_real64) latitude_j;
				ev_real64 longitude = (ev_real64) longitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_real64 __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTileAverageAltitude(latitude, longitude);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getBestHeightAt_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble longitude_j)
			{
				Real latitude = (Real) latitude_j;
				Real longitude = (Real) longitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getBestHeightAt(latitude, longitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getBestHeightAt(latitude, longitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getBestHeightAt_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getBestHeightAt_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getBestHeightAt_Real_Real_callback", "(DD)D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getBestHeightAt_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble longitude_j)
			{
				Real latitude = (Real) latitude_j;
				Real longitude = (Real) longitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getBestHeightAt(latitude, longitude);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getHeightAt_1Real_1Real_1ev_1real32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble longitude_j, jfloat targetSamplesPerDegrees_j)
			{
				Real latitude = (Real) latitude_j;
				Real longitude = (Real) longitude_j;
				ev_real32 targetSamplesPerDegrees = (ev_real32) targetSamplesPerDegrees_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getHeightAt(latitude, longitude, targetSamplesPerDegrees);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getHeightAt(latitude, longitude, targetSamplesPerDegrees);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getHeightAt_1Real_1Real_1ev_1real32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getHeightAt_Real_Real_ev_real32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getHeightAt_Real_Real_ev_real32_callback", "(DDF)D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getHeightAt_1Real_1Real_1ev_1real32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble longitude_j, jfloat targetSamplesPerDegrees_j)
			{
				Real latitude = (Real) latitude_j;
				Real longitude = (Real) longitude_j;
				ev_real32 targetSamplesPerDegrees = (ev_real32) targetSamplesPerDegrees_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getHeightAt(latitude, longitude, targetSamplesPerDegrees);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTileInfo_1ev_1real64_1ev_1real64_1CStringArray_1IntVector_1IntVector_1IntVector(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble longitude_j, jdouble latitude_j, jlong LayerNames_j, jlong levels_j, jlong rows_j, jlong cols_j)
			{
				ev_real64 longitude = (ev_real64) longitude_j;
				ev_real64 latitude = (ev_real64) latitude_j;
				EarthView::World::Core::CStringArray &LayerNames = *(EarthView::World::Core::CStringArray*) LayerNames_j;
				EarthView::World::Core::IntVector &levels = *(EarthView::World::Core::IntVector*) levels_j;
				EarthView::World::Core::IntVector &rows = *(EarthView::World::Core::IntVector*) rows_j;
				EarthView::World::Core::IntVector &cols = *(EarthView::World::Core::IntVector*) cols_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->getTileInfo(longitude, latitude, LayerNames, levels, rows, cols);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTileInfo_1ev_1real64_1ev_1real64_1ev_1real32_1ev_1real32_1EVString_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble longitude_j, jdouble latitude_j, jfloat pixelX_j, jfloat piexlY_j, jlong LayerName_j, jlong level_j, jlong row_j, jlong col_j)
			{
				ev_real64 longitude = (ev_real64) longitude_j;
				ev_real64 latitude = (ev_real64) latitude_j;
				ev_real32 pixelX = (ev_real32) pixelX_j;
				ev_real32 piexlY = (ev_real32) piexlY_j;
				EVString &LayerName = *(EVString*) LayerName_j;
				ev_int32 &level = *(ev_int32*) level_j;
				ev_int32 &row = *(ev_int32*) row_j;
				ev_int32 &col = *(ev_int32*) col_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->getTileInfo(longitude, latitude, pixelX, piexlY, LayerName, level, row, col);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getHeightAtTile_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble longitude_j)
			{
				Real latitude = (Real) latitude_j;
				Real longitude = (Real) longitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getHeightAtTile(latitude, longitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getHeightAtTile(latitude, longitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getHeightAtTile_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getHeightAtTile_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getHeightAtTile_Real_Real_callback", "(DD)D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getHeightAtTile_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble longitude_j)
			{
				Real latitude = (Real) latitude_j;
				Real longitude = (Real) longitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getHeightAtTile(latitude, longitude);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_modifyHeightByTerrainRevisors_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble longitude_j, jdouble altitude_j)
			{
				Real latitude = (Real) latitude_j;
				Real longitude = (Real) longitude_j;
				Real altitude = (Real) altitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->modifyHeightByTerrainRevisors(latitude, longitude, altitude);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrain_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint level_j, jint row_j, jint col_j)
			{
				ev_int32 level = (ev_int32) level_j;
				ev_int32 row = (ev_int32) row_j;
				ev_int32 col = (ev_int32) col_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrain(level, row, col);
					EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->getTerrain(level, row, col);
					EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getTerrain_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTerrain_ev_int32_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTerrain_ev_int32_ev_int32_ev_int32_callback", "(III)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrain_1ev_1int32_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint level_j, jint row_j, jint col_j)
			{
				ev_int32 level = (ev_int32) level_j;
				ev_int32 row = (ev_int32) row_j;
				ev_int32 col = (ev_int32) col_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrain(level, row, col);
				EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainFromMemoryCache_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint row_j, jint col_j, jint level_j)
			{
				ev_int32 row = (ev_int32) row_j;
				ev_int32 col = (ev_int32) col_j;
				ev_int32 level = (ev_int32) level_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrainFromMemoryCache(row, col, level);
					EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->getTerrainFromMemoryCache(row, col, level);
					EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getTerrainFromMemoryCache_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTerrainFromMemoryCache_ev_int32_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTerrainFromMemoryCache_ev_int32_ev_int32_ev_int32_callback", "(III)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainFromMemoryCache_1ev_1int32_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint row_j, jint col_j, jint level_j)
			{
				ev_int32 row = (ev_int32) row_j;
				ev_int32 col = (ev_int32) col_j;
				ev_int32 level = (ev_int32) level_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrainFromMemoryCache(row, col, level);
				EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainFromDBCache_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint row_j, jint col_j, jint level_j)
			{
				ev_int32 row = (ev_int32) row_j;
				ev_int32 col = (ev_int32) col_j;
				ev_int32 level = (ev_int32) level_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrainFromDBCache(row, col, level);
					EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->getTerrainFromDBCache(row, col, level);
					EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getTerrainFromDBCache_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTerrainFromDBCache_ev_int32_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTerrainFromDBCache_ev_int32_ev_int32_ev_int32_callback", "(III)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainFromDBCache_1ev_1int32_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint row_j, jint col_j, jint level_j)
			{
				ev_int32 row = (ev_int32) row_j;
				ev_int32 col = (ev_int32) col_j;
				ev_int32 level = (ev_int32) level_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrainFromDBCache(row, col, level);
				EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainFromServer_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint row_j, jint col_j, jint level_j)
			{
				ev_int32 row = (ev_int32) row_j;
				ev_int32 col = (ev_int32) col_j;
				ev_int32 level = (ev_int32) level_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrainFromServer(row, col, level);
					EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->getTerrainFromServer(row, col, level);
					EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getTerrainFromServer_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTerrainFromServer_ev_int32_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTerrainFromServer_ev_int32_ev_int32_ev_int32_callback", "(III)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainFromServer_1ev_1int32_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint row_j, jint col_j, jint level_j)
			{
				ev_int32 row = (ev_int32) row_j;
				ev_int32 col = (ev_int32) col_j;
				ev_int32 level = (ev_int32) level_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Core::MemoryDataStreamPtr __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTerrainFromServer(row, col, level);
				EarthView::World::Core::MemoryDataStreamPtr *returnvalues = new EarthView::World::Core::MemoryDataStreamPtr(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_usingWebMercator_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::usingWebMercator();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->usingWebMercator();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1usingWebMercator_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_usingWebMercator_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"usingWebMercator_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_usingWebMercator_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::usingWebMercator();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTileEnvelope_1ev_1int32_1ev_1uint32_1ev_1uint32_1Real_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint level_j, jlong row_j, jlong col_j, jlong minX_j, jlong maxX_j, jlong minY_j, jlong maxY_j)
			{
				ev_int32 level = (ev_int32) level_j;
				ev_uint32 row = (ev_uint32) row_j;
				ev_uint32 col = (ev_uint32) col_j;
				Real &minX = *(Real*) minX_j;
				Real &maxX = *(Real*) maxX_j;
				Real &minY = *(Real*) minY_j;
				Real &maxY = *(Real*) maxY_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTileEnvelope(level, row, col, minX, maxX, minY, maxY);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getTileEnvelope(level, row, col, minX, maxX, minY, maxY);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getTileEnvelope_1ev_1int32_1ev_1uint32_1ev_1uint32_1Real_1Real_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback", "(IJJJJJJ)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTileEnvelope_1ev_1int32_1ev_1uint32_1ev_1uint32_1Real_1Real_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint level_j, jlong row_j, jlong col_j, jlong minX_j, jlong maxX_j, jlong minY_j, jlong maxY_j)
			{
				ev_int32 level = (ev_int32) level_j;
				ev_uint32 row = (ev_uint32) row_j;
				ev_uint32 col = (ev_uint32) col_j;
				Real &minX = *(Real*) minX_j;
				Real &maxX = *(Real*) maxX_j;
				Real &minY = *(Real*) minY_j;
				Real &maxY = *(Real*) maxY_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getTileEnvelope(level, row, col, minX, maxX, minY, maxY);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageTransparency_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getImageTransparency();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageTransparency_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble alpha_j)
			{
				Real alpha = (Real) alpha_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setImageTransparency(alpha);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageReceiveShadows_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getImageReceiveShadows();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageReceiveShadows_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enabled_j)
			{
				ev_bool enabled = (ev_bool) enabled_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setImageReceiveShadows(enabled);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_usePureColorTexture_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean valid_j)
			{
				ev_bool valid = (ev_bool) valid_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->usePureColorTexture(valid);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_useGridTexture_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean valid_j)
			{
				ev_bool valid = (ev_bool) valid_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->useGridTexture(valid);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_isUsingPureColorTexture_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->isUsingPureColorTexture();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_isUsingGridTexture_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->isUsingGridTexture();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getPureColorInfo_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				const EarthView::World::Spatial3D::CTerrainColorInfo& __values1 = pObjectX->getPureColorInfo();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setPureColorInfo_1CTerrainColorInfo(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong colorInfo_j)
			{
				const EarthView::World::Spatial3D::CTerrainColorInfo &colorInfo = *(EarthView::World::Spatial3D::CTerrainColorInfo*) colorInfo_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setPureColorInfo(colorInfo);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setAerosphereVisible_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				ev_bool visible = (ev_bool) visible_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setAerosphereVisible(visible);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getAerosphereVisible_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getAerosphereVisible();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_notifyDataChanged_1EVString_1EVString_1CEvent(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strDataSourceName_j, jstring strDatasetName_j, jlong pEvent_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strDataSourceName_ch = (const ev_char*)__env->GetStringUTFChars(strDataSourceName_j,JNI_FALSE);
				const EVString strDataSourceName = strDataSourceName_ch;
				__env->ReleaseStringUTFChars(strDataSourceName_j, (const char *)strDataSourceName_ch);
				#else
				const ev_wchar* strDataSourceName_ch = (const ev_wchar*)__env->GetStringChars(strDataSourceName_j,JNI_FALSE);
				const EVString strDataSourceName = strDataSourceName_ch;
				__env->ReleaseStringChars(strDataSourceName_j, (const jchar *)strDataSourceName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strDatasetName_ch = (const ev_char*)__env->GetStringUTFChars(strDatasetName_j,JNI_FALSE);
				const EVString strDatasetName = strDatasetName_ch;
				__env->ReleaseStringUTFChars(strDatasetName_j, (const char *)strDatasetName_ch);
				#else
				const ev_wchar* strDatasetName_ch = (const ev_wchar*)__env->GetStringChars(strDatasetName_j,JNI_FALSE);
				const EVString strDatasetName = strDatasetName_ch;
				__env->ReleaseStringChars(strDatasetName_j, (const jchar *)strDatasetName_ch);
				#endif
				EarthView::World::Core::CEvent *pEvent = (EarthView::World::Core::CEvent*) pEvent_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->notifyDataChanged(strDataSourceName, strDatasetName, pEvent);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadImage_1bool_1bool_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean updateImageGroup_j, jboolean updateFeatureGroup_j, jboolean updateKmlGroup_j)
			{
				bool updateImageGroup = (bool) updateImageGroup_j;
				bool updateFeatureGroup = (bool) updateFeatureGroup_j;
				bool updateKmlGroup = (bool) updateKmlGroup_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup);
				}
				else
				{
					pObjectX->updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1updateQuadImage_1bool_1bool_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateQuadImage_bool_bool_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateQuadImage_bool_bool_bool_callback", "(ZZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadImage_1bool_1bool_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean updateImageGroup_j, jboolean updateFeatureGroup_j, jboolean updateKmlGroup_j)
			{
				bool updateImageGroup = (bool) updateImageGroup_j;
				bool updateFeatureGroup = (bool) updateFeatureGroup_j;
				bool updateKmlGroup = (bool) updateKmlGroup_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadImage_1bool_1bool_1bool_1Real_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean updateImageGroup_j, jboolean updateFeatureGroup_j, jboolean updateKmlGroup_j, jdouble minX_j, jdouble maxX_j, jdouble minY_j, jdouble maxY_j)
			{
				bool updateImageGroup = (bool) updateImageGroup_j;
				bool updateFeatureGroup = (bool) updateFeatureGroup_j;
				bool updateKmlGroup = (bool) updateKmlGroup_j;
				Real minX = (Real) minX_j;
				Real maxX = (Real) maxX_j;
				Real minY = (Real) minY_j;
				Real maxY = (Real) maxY_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup, minX, maxX, minY, maxY);
				}
				else
				{
					pObjectX->updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup, minX, maxX, minY, maxY);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1updateQuadImage_1bool_1bool_1bool_1Real_1Real_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback", "(ZZZDDDD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadImage_1bool_1bool_1bool_1Real_1Real_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean updateImageGroup_j, jboolean updateFeatureGroup_j, jboolean updateKmlGroup_j, jdouble minX_j, jdouble maxX_j, jdouble minY_j, jdouble maxY_j)
			{
				bool updateImageGroup = (bool) updateImageGroup_j;
				bool updateFeatureGroup = (bool) updateFeatureGroup_j;
				bool updateKmlGroup = (bool) updateKmlGroup_j;
				Real minX = (Real) minX_j;
				Real maxX = (Real) maxX_j;
				Real minY = (Real) minY_j;
				Real maxY = (Real) maxY_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup, minX, maxX, minY, maxY);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadAltitude_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->updateQuadAltitude();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadAltitude_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean downloadAltitude_j)
			{
				ev_bool downloadAltitude = (ev_bool) downloadAltitude_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->updateQuadAltitude(downloadAltitude);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadAltitude_1Real_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble minX_j, jdouble maxX_j, jdouble minY_j, jdouble maxY_j)
			{
				Real minX = (Real) minX_j;
				Real maxX = (Real) maxX_j;
				Real minY = (Real) minY_j;
				Real maxY = (Real) maxY_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->updateQuadAltitude(minX, maxX, minY, maxY);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadAltitude_1ev_1bool_1Real_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean downloadAltitude_j, jdouble minX_j, jdouble maxX_j, jdouble minY_j, jdouble maxY_j)
			{
				ev_bool downloadAltitude = (ev_bool) downloadAltitude_j;
				Real minX = (Real) minX_j;
				Real maxX = (Real) maxX_j;
				Real minY = (Real) minY_j;
				Real maxY = (Real) maxY_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->updateQuadAltitude(downloadAltitude, minX, maxX, minY, maxY);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadmap_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->updateQuadmap();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateQuadmap_1Real_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble minX_j, jdouble maxX_j, jdouble minY_j, jdouble maxY_j)
			{
				Real minX = (Real) minX_j;
				Real maxX = (Real) maxX_j;
				Real minY = (Real) minY_j;
				Real maxY = (Real) maxY_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->updateQuadmap(minX, maxX, minY, maxY);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateRelativeLayers_1LayerRefreshFactor(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint updateType_j)
			{
				EarthView::World::Spatial3D::Atlas::LayerRefreshFactor updateType = (EarthView::World::Spatial3D::Atlas::LayerRefreshFactor) updateType_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->updateRelativeLayers(updateType);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateRelativeLayers_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->updateRelativeLayers();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateOBQ_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean bUpdateVectorTexture_j, jboolean bUpdateKmlTexture_j, jboolean bUpdateTemporaryTexture_j, jboolean bUpdateTerrain_j)
			{
				ev_bool bUpdateVectorTexture = (ev_bool) bUpdateVectorTexture_j;
				ev_bool bUpdateKmlTexture = (ev_bool) bUpdateKmlTexture_j;
				ev_bool bUpdateTemporaryTexture = (ev_bool) bUpdateTemporaryTexture_j;
				ev_bool bUpdateTerrain = (ev_bool) bUpdateTerrain_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::updateOBQ(bUpdateVectorTexture, bUpdateKmlTexture, bUpdateTemporaryTexture, bUpdateTerrain);
				}
				else
				{
					pObjectX->updateOBQ(bUpdateVectorTexture, bUpdateKmlTexture, bUpdateTemporaryTexture, bUpdateTerrain);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1updateOBQ_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback", "(ZZZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_updateOBQ_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean bUpdateVectorTexture_j, jboolean bUpdateKmlTexture_j, jboolean bUpdateTemporaryTexture_j, jboolean bUpdateTerrain_j)
			{
				ev_bool bUpdateVectorTexture = (ev_bool) bUpdateVectorTexture_j;
				ev_bool bUpdateKmlTexture = (ev_bool) bUpdateKmlTexture_j;
				ev_bool bUpdateTemporaryTexture = (ev_bool) bUpdateTemporaryTexture_j;
				ev_bool bUpdateTerrain = (ev_bool) bUpdateTerrain_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::updateOBQ(bUpdateVectorTexture, bUpdateKmlTexture, bUpdateTemporaryTexture, bUpdateTerrain);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager__1notifyLayersRefresh_1CCamera_1LayerRefreshFactor(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jint updateType_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Spatial3D::Atlas::LayerRefreshFactor updateType = (EarthView::World::Spatial3D::Atlas::LayerRefreshFactor) updateType_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->_notifyLayersRefresh(cam, updateType);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager__1notifyLayersRefresh_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->_notifyLayersRefresh(cam);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_addTerrainRevisor_1ITerrainRevisor(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong tr_j)
			{
				EarthView::World::Spatial3D::ITerrainRevisor *tr = (EarthView::World::Spatial3D::ITerrainRevisor*) tr_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->addTerrainRevisor(tr);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_removeTerrainRevisor_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->removeTerrainRevisor(key);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_swapTerrainRevisor_1ev_1uint32_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong first_j, jlong second_j)
			{
				ev_uint32 first = (ev_uint32) first_j;
				ev_uint32 second = (ev_uint32) second_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->swapTerrainRevisor(first, second);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_clearTerrainRevisors_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->clearTerrainRevisors();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainRevisorCount_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_uint32 __values1 = pObjectX->getTerrainRevisorCount();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrianRevisor_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong index_j)
			{
				ev_uint32 index = (ev_uint32) index_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::ITerrainRevisor* __values1 = pObjectX->getTerrianRevisor(index);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getTerrainRevisor_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::ITerrainRevisor* __values1 = pObjectX->getTerrainRevisor(key);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_showImage_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				ev_bool visible = (ev_bool) visible_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::showImage(visible);
				}
				else
				{
					pObjectX->showImage(visible);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1showImage_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_showImage_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"showImage_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_showImage_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				ev_bool visible = (ev_bool) visible_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::showImage(visible);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageVisible_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getImageVisible();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getImageVisible();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getImageVisible_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getImageVisible_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getImageVisible_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageVisible_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getImageVisible();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageQuadMapHasNegativeHeight_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getImageQuadMapHasNegativeHeight();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageLighteness_1ev_1real32_1ev_1real32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jfloat rate_j, jfloat delta_j)
			{
				ev_real32 rate = (ev_real32) rate_j;
				ev_real32 delta = (ev_real32) delta_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setImageLighteness(rate, delta);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageLighteness_1ev_1real32_1ev_1real32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rate_j, jlong delta_j)
			{
				ev_real32 &rate = *(ev_real32*) rate_j;
				ev_real32 &delta = *(ev_real32*) delta_j;
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->getImageLighteness(rate, delta);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_showOcean_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				ev_bool visible = (ev_bool) visible_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::showOcean(visible);
				}
				else
				{
					pObjectX->showOcean(visible);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1showOcean_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_showOcean_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"showOcean_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_showOcean_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				ev_bool visible = (ev_bool) visible_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::showOcean(visible);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanVisible_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getOceanVisible();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getOceanVisible();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getOceanVisible_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getOceanVisible_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getOceanVisible_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanVisible_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::getOceanVisible();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveStrength_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble waveStrength_j)
			{
				Real waveStrength = (Real) waveStrength_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveStrength(waveStrength);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveStrength_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getWaveStrength();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setFoamTransparency_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble foamTransparency_j)
			{
				Real foamTransparency = (Real) foamTransparency_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setFoamTransparency(foamTransparency);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getFoamTransparency_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getFoamTransparency();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setFoamRange_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble foamRange_j)
			{
				Real foamRange = (Real) foamRange_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setFoamRange(foamRange);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getFoamRange_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getFoamRange();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setFoamMaxVisibleDistance_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble foamMaxVisibleDistance_j)
			{
				Real foamMaxVisibleDistance = (Real) foamMaxVisibleDistance_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setFoamMaxVisibleDistance(foamMaxVisibleDistance);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getFoamMaxVisibleDistance_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getFoamMaxVisibleDistance();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveMaxVisibleDistance_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble distance_j)
			{
				const Real distance = (const Real) distance_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveMaxVisibleDistance(distance);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveMaxVisibleDistance_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				const Real __values1 = pObjectX->getWaveMaxVisibleDistance();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaterColor_1CColourValue(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong color_j)
			{
				EarthView::World::Graphic::CColourValue color = *(EarthView::World::Graphic::CColourValue*) color_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaterColor(color);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaterColor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CColourValue __values1 = pObjectX->getWaterColor();
				EarthView::World::Graphic::CColourValue *returnvalues = new EarthView::World::Graphic::CColourValue(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveScale_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble waveScale_j)
			{
				Real waveScale = (Real) waveScale_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveScale(waveScale);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveScale_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getWaveScale();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveFallOff_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble waveFallOff_j)
			{
				Real waveFallOff = (Real) waveFallOff_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveFallOff(waveFallOff);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveFallOff_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getWaveFallOff();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveFrequency_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble waveFrequency_j)
			{
				Real waveFrequency = (Real) waveFrequency_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveFrequency(waveFrequency);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveFrequency_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getWaveFrequency();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveTimeMulti_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble waveTimeMulti_j)
			{
				Real waveTimeMulti = (Real) waveTimeMulti_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveTimeMulti(waveTimeMulti);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveTimeMulti_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getWaveTimeMulti();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveReflectFactor_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble factor_j)
			{
				const Real factor = (const Real) factor_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveReflectFactor(factor);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveReflectFactor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getWaveReflectFactor();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveRefractFactor_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble factor_j)
			{
				const Real factor = (const Real) factor_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveRefractFactor(factor);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveRefractFactor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getWaveRefractFactor();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveHeight_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble lat_j, jdouble lon_j)
			{
				const Real lat = (const Real) lat_j;
				const Real lon = (const Real) lon_j;
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getWaveHeight(lat, lon);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveIsCaustics_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean caustics_j)
			{
				ev_bool caustics = (ev_bool) caustics_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveIsCaustics(caustics);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveIsCaustics_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getWaveIsCaustics();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveIsFoam_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean foam_j)
			{
				ev_bool foam = (ev_bool) foam_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveIsFoam(foam);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveIsFoam_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getWaveIsFoam();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setWaveIsSunRay_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean sunRay_j)
			{
				ev_bool sunRay = (ev_bool) sunRay_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setWaveIsSunRay(sunRay);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getWaveIsSunRay_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getWaveIsSunRay();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_addExcludeRenderQueues_1SeaExcludeRenderQueueGroupIDType_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint type_j, jshort renderQueueGroupID_j)
			{
				EarthView::World::Spatial3D::SeaExcludeRenderQueueGroupIDType type = (EarthView::World::Spatial3D::SeaExcludeRenderQueueGroupIDType) type_j;
				const ev_uint8 renderQueueGroupID = (const ev_uint8) renderQueueGroupID_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->addExcludeRenderQueues(type, renderQueueGroupID);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_removeExcludeRenderQueues_1SeaExcludeRenderQueueGroupIDType_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint type_j, jshort renderQueueGroupID_j)
			{
				EarthView::World::Spatial3D::SeaExcludeRenderQueueGroupIDType type = (EarthView::World::Spatial3D::SeaExcludeRenderQueueGroupIDType) type_j;
				const ev_uint8 renderQueueGroupID = (const ev_uint8) renderQueueGroupID_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->removeExcludeRenderQueues(type, renderQueueGroupID);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageDivideFactor_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble factor_j)
			{
				Real factor = (Real) factor_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setImageDivideFactor(factor);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageDivideFactor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getImageDivideFactor();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageDefaultMaterial_1CMaterialPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong matPtr_j)
			{
				const EarthView::World::Graphic::CMaterialPtr &matPtr = *(EarthView::World::Graphic::CMaterialPtr*) matPtr_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setImageDefaultMaterial(matPtr);
				}
				else
				{
					pObjectX->setImageDefaultMaterial(matPtr);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setImageDefaultMaterial_1CMaterialPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setImageDefaultMaterial_CMaterialPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setImageDefaultMaterial_CMaterialPtr_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageDefaultMaterial_1CMaterialPtr_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong matPtr_j)
			{
				const EarthView::World::Graphic::CMaterialPtr &matPtr = *(EarthView::World::Graphic::CMaterialPtr*) matPtr_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setImageDefaultMaterial(matPtr);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageUseDefaultMaterial_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean useDefaultMat_j)
			{
				const ev_bool useDefaultMat = (const ev_bool) useDefaultMat_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setImageUseDefaultMaterial(useDefaultMat);
				}
				else
				{
					pObjectX->setImageUseDefaultMaterial(useDefaultMat);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setImageUseDefaultMaterial_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setImageUseDefaultMaterial_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setImageUseDefaultMaterial_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageUseDefaultMaterial_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean useDefaultMat_j)
			{
				const ev_bool useDefaultMat = (const ev_bool) useDefaultMat_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManager::setImageUseDefaultMaterial(useDefaultMat);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getModelObjectManager_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Spatial3D::ModelManager::CModelObjectManager* __values1 = pObjectX->getModelObjectManager();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setImageColorFilter_1CColourValue(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong filter_j)
			{
				const EarthView::World::Graphic::CColourValue &filter = *(EarthView::World::Graphic::CColourValue*) filter_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setImageColorFilter(filter);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getImageColorFilter_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CColourValue& __values1 = pObjectX->getImageColorFilter();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_enableImageColorFilter_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->enableImageColorFilter(enable);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_isImageColorFilterEnabled_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->isImageColorFilterEnabled();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_exportTiles_1EVString_1ev_1real64_1ev_1real64_1ev_1real64_1ev_1real64_1ev_1uint32_1ev_1uint32_1ev_1bool_1ev_1bool_1CTileMosaicListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strOutPath_j, jdouble minLon_j, jdouble minLat_j, jdouble maxLon_j, jdouble maxLat_j, jlong pixelWidth_j, jlong pixelHeight_j, jboolean exportImage_j, jboolean exportVector_j, jlong pListener_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strOutPath_ch = (const ev_char*)__env->GetStringUTFChars(strOutPath_j,JNI_FALSE);
				const EVString strOutPath = strOutPath_ch;
				__env->ReleaseStringUTFChars(strOutPath_j, (const char *)strOutPath_ch);
				#else
				const ev_wchar* strOutPath_ch = (const ev_wchar*)__env->GetStringChars(strOutPath_j,JNI_FALSE);
				const EVString strOutPath = strOutPath_ch;
				__env->ReleaseStringChars(strOutPath_j, (const jchar *)strOutPath_ch);
				#endif
				ev_real64 minLon = (ev_real64) minLon_j;
				ev_real64 minLat = (ev_real64) minLat_j;
				ev_real64 maxLon = (ev_real64) maxLon_j;
				ev_real64 maxLat = (ev_real64) maxLat_j;
				ev_uint32 pixelWidth = (ev_uint32) pixelWidth_j;
				ev_uint32 pixelHeight = (ev_uint32) pixelHeight_j;
				ev_bool exportImage = (ev_bool) exportImage_j;
				ev_bool exportVector = (ev_bool) exportVector_j;
				EarthView::World::Spatial2D::Analyst::CRasterTileMosaic::CTileMosaicListener *pListener = (EarthView::World::Spatial2D::Analyst::CRasterTileMosaic::CTileMosaicListener*) pListener_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->exportTiles(strOutPath, minLon, minLat, maxLon, maxLat, pixelWidth, pixelHeight, exportImage, exportVector, pListener);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setHeightMapRendering_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				ev_bool flag = (ev_bool) flag_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setHeightMapRendering(flag);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setOceanDepthRendering_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				ev_bool flag = (ev_bool) flag_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setOceanDepthRendering(flag);
			}
			extern "C" JNIEXPORT jfloat JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanFoamBlend_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_real32 __values1 = pObjectX->getOceanFoamBlend();
				jfloat __values1_j = (jfloat)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setOceanFoamBlend_1ev_1real32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jfloat foamblend_j)
			{
				ev_real32 foamblend = (ev_real32) foamblend_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setOceanFoamBlend(foamblend);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getFFTOceanEnable_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getFFTOceanEnable();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanRafractionColor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CColourValue __values1 = pObjectX->getOceanRafractionColor();
				EarthView::World::Graphic::CColourValue *returnvalues = new EarthView::World::Graphic::CColourValue(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setOceanRafractionColor_1CColourValue(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong color_j)
			{
				EarthView::World::Graphic::CColourValue color = *(EarthView::World::Graphic::CColourValue*) color_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setOceanRafractionColor(color);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanDoubleRafractionColor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CColourValue __values1 = pObjectX->getOceanDoubleRafractionColor();
				EarthView::World::Graphic::CColourValue *returnvalues = new EarthView::World::Graphic::CColourValue(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setOceanDoubleRafractionColor_1CColourValue(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong color_j)
			{
				EarthView::World::Graphic::CColourValue color = *(EarthView::World::Graphic::CColourValue*) color_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setOceanDoubleRafractionColor(color);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanFogColor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CColourValue __values1 = pObjectX->getOceanFogColor();
				EarthView::World::Graphic::CColourValue *returnvalues = new EarthView::World::Graphic::CColourValue(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setOceanFogColor_1CColourValue(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong color_j)
			{
				EarthView::World::Graphic::CColourValue color = *(EarthView::World::Graphic::CColourValue*) color_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setOceanFogColor(color);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanDetailEnable_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getOceanDetailEnable();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setOceanDetailEnable_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				ev_bool flag = (ev_bool) flag_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setOceanDetailEnable(flag);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanUnderWaterEnable_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getOceanUnderWaterEnable();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setOceanUnderWaterEnable_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				ev_bool flag = (ev_bool) flag_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setOceanUnderWaterEnable(flag);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanStrength_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getOceanStrength();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setOceanStrength_1ev_1real32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jfloat strength_j)
			{
				ev_real32 strength = (ev_real32) strength_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setOceanStrength(strength);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_setOceanTransparency_1ev_1real32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jfloat transparency_j)
			{
				ev_real32 transparency = (ev_real32) transparency_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				pObjectX->setOceanTransparency(transparency);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_getOceanPointHeight_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble lat_j, jdouble lon_j)
			{
				Real lat = (Real) lat_j;
				Real lon = (Real) lon_j;
				EarthView::World::Spatial3D::CGeoSceneManager *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->getOceanPointHeight(lat, lon);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1alertVisibleObjects_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__alertVisibleObjects_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_alertVisibleObjects_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createSceneNodeImpl_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSceneNodeImpl_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSceneNodeImpl_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createSceneNodeImpl_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSceneNodeImpl_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSceneNodeImpl_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1initRenderQueue_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_initRenderQueue_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"initRenderQueue_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1deriveShadowCasterPass_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_deriveShadowCasterPass_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"deriveShadowCasterPass_CPass_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1deriveShadowReceiverPass_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_deriveShadowReceiverPass_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"deriveShadowReceiverPass_CPass_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1validatePassForRendering_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_validatePassForRendering_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"validatePassForRendering_CPass_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1validateRenderableForRendering_1CPass_1CRenderable(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_validateRenderableForRendering_CPass_CRenderable_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"validateRenderableForRendering_CPass_CRenderable_callback", "(JJ)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createSkyboxPlane_1BoxPlane_1Real_1CQuaternion_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback", "(IDJLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createSkydomePlane_1BoxPlane_1Real_1Real_1Real_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback", "(IDDDJIIILjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1useRenderableViewProjMode_1CRenderable_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_useRenderableViewProjMode_CRenderable_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"useRenderableViewProjMode_CRenderable_ev_bool_callback", "(JZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1resetViewProjMode_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_resetViewProjMode_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"resetViewProjMode_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1firePreRenderQueues_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePreRenderQueues_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePreRenderQueues_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1firePostRenderQueues_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePostRenderQueues_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePostRenderQueues_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1fireRenderQueueStarted_1ev_1uint8_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireRenderQueueStarted_ev_uint8_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireRenderQueueStarted_ev_uint8_EVString_callback", "(SLjava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1fireRenderQueueEnded_1ev_1uint8_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireRenderQueueEnded_ev_uint8_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireRenderQueueEnded_ev_uint8_EVString_callback", "(SLjava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1fireRenderSingleObjectStarted_1CRenderable_1CPass_1CAutoParamDataSource_1LightList_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback", "(JJJJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1fireRenderSingleObjectEnd_1CRenderable_1CPass_1CAutoParamDataSource_1LightList_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback", "(JJJJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1fireShadowTexturesUpdated_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireShadowTexturesUpdated_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireShadowTexturesUpdated_ev_size_t_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1fireShadowTexturesPreCaster_1CLight_1CCamera_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback", "(JJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1fireShadowTexturesPreReceiver_1CLight_1CFrustum(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireShadowTexturesPreReceiver_CLight_CFrustum_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireShadowTexturesPreReceiver_CLight_CFrustum_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1firePreUpdateSceneGraph_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePreUpdateSceneGraph_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePreUpdateSceneGraph_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1firePostUpdateSceneGraph_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePostUpdateSceneGraph_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePostUpdateSceneGraph_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1firePreFindVisibleObjects_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePreFindVisibleObjects_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePreFindVisibleObjects_CViewport_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1firePostFindVisibleObjects_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePostFindVisibleObjects_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePostFindVisibleObjects_CViewport_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1fireSceneManagerDestroyed_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireSceneManagerDestroyed_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireSceneManagerDestroyed_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setViewport_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setViewport_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setViewport_CViewport_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderVisibleObjectsDefaultSequence_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderVisibleObjectsDefaultSequence_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderVisibleObjectsDefaultSequence_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderVisibleObjectsCustomSequence_1CRenderQueueInvocationSequence(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1prepareRenderQueue_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareRenderQueue_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareRenderQueue_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderSingleObject_1CRenderable_1CPass_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback", "(JJZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderSingleObject_1CRenderable_1CPass_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback", "(JJZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createAutoParamDataSource_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAutoParamDataSource_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAutoParamDataSource_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1findLightsAffectingFrustum_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_findLightsAffectingFrustum_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"findLightsAffectingFrustum_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1initShadowVolumeMaterials_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_initShadowVolumeMaterials_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"initShadowVolumeMaterials_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1ensureShadowTexturesCreated_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_ensureShadowTexturesCreated_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"ensureShadowTexturesCreated_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyShadowTextures_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyShadowTextures_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyShadowTextures_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1prepareShadowTextures_1CCamera_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareShadowTextures_CCamera_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareShadowTextures_CCamera_CViewport_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1pauseRendering_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__pauseRendering_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_pauseRendering_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1resumeRendering_1RenderContext(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__resumeRendering_RenderContext_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_resumeRendering_RenderContext_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderShadowVolumesToStencil_1CLight_1CCamera_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback", "(JJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowVolumeStencilState_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback", "(ZZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1findShadowCastersForLight_1CLight_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_findShadowCastersForLight_CLight_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"findShadowCastersForLight_CLight_CCamera_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderBasicQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderAdditiveStencilShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderModulativeStencilShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderTextureShadowCasterQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderTextureShadowReceiverQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderModulativeTextureShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderAdditiveTextureShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback", "(JIZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback", "(JIZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderTransparentShadowCasterObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback", "(JIZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1renderTransparentShadowCasterObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback", "(JIZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1updateRenderQueueSplitOptions_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateRenderQueueSplitOptions_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateRenderQueueSplitOptions_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1updateRenderQueueGroupSplitOptions_1CRenderQueueGroup_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback", "(JZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1buildAndSetScissor_1LightList_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_buildAndSetScissor_LightList_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"buildAndSetScissor_LightList_CCamera_callback", "(JJ)I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1buildScissor_1CLight_1CCamera_1RealRect(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_buildScissor_CLight_CCamera_RealRect_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"buildScissor_CLight_CCamera_RealRect_callback", "(JJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1resetScissor_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_resetScissor_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"resetScissor_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1buildAndSetLightClip_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_buildAndSetLightClip_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"buildAndSetLightClip_LightList_callback", "(J)I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1buildLightClip_1CLight_1PlaneList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_buildLightClip_CLight_PlaneList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"buildLightClip_CLight_PlaneList_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1resetLightClip_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_resetLightClip_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"resetLightClip_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1checkCachedLightClippingInfo_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_checkCachedLightClippingInfo_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"checkCachedLightClippingInfo_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1useLights_1LightList_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_useLights_LightList_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"useLights_LightList_ev_uint16_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setViewMatrix_1CMatrix4(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setViewMatrix_CMatrix4_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setViewMatrix_CMatrix4_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1useLightsGpuProgram_1CPass_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_useLightsGpuProgram_CPass_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"useLightsGpuProgram_CPass_LightList_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1bindGpuProgram_1CGpuProgram(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_bindGpuProgram_CGpuProgram_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"bindGpuProgram_CGpuProgram_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1updateGpuProgramParameters_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateGpuProgramParameters_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateGpuProgramParameters_CPass_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getCamera_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCamera_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCamera_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasCamera_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasCamera_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasCamera_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyCamera_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyCamera_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyCamera_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyCamera_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyCamera_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyCamera_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllCameras_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllCameras_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllCameras_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createLight_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createLight_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createLight_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createLight_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createLight_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createLight_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getLightCount_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLightCount_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLightCount_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getLight_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLight_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLight_ev_uint16_callback", "(I)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getLight_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLight_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLight_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasLight_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasLight_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasLight_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getLightClippingPlanes_1CLight(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLightClippingPlanes_CLight_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLightClippingPlanes_CLight_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getLightScissorRect_1CLight_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLightScissorRect_CLight_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLightScissorRect_CLight_CCamera_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyLight_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyLight_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyLight_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyLight_1CLight(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyLight_CLight_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyLight_CLight_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllLights_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllLights_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllLights_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSoftShadowTexName_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowTexName_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowTexName_void_callback", "()Ljava/lang/String;");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowTexCam_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowTexCam_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowTexCam_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSoftShadowProjMatrix_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowProjMatrix_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowProjMatrix_ev_uint16_callback", "(I)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getCascadeEyeSpaceDepthArray_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCascadeEyeSpaceDepthArray_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCascadeEyeSpaceDepthArray_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSoftShadowNearClip_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowNearClip_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowNearClip_ev_uint8_callback", "(S)F");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSoftShadowFarClip_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowFarClip_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowFarClip_ev_uint8_callback", "(S)F");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getIsUseSoftShadowFitToCascadesMode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getIsUseSoftShadowFitToCascadesMode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getIsUseSoftShadowFitToCascadesMode_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setIsUseSoftShadowFitToCascadesMode_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setIsUseSoftShadowFitToCascadesMode_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setIsUseSoftShadowFitToCascadesMode_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getCurrentClipIndex_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCurrentClipIndex_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCurrentClipIndex_void_callback", "()S");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getIsUseSoftShadowTechnique_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getIsUseSoftShadowTechnique_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getIsUseSoftShadowTechnique_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setIsUseSoftShadowTechnique_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setIsUseSoftShadowTechnique_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setIsUseSoftShadowTechnique_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getCascadePartitionsPercent_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCascadePartitionsPercent_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCascadePartitionsPercent_void_callback", "()F");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setCascadePartitionsPercent_1float(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setCascadePartitionsPercent_float_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setCascadePartitionsPercent_float_callback", "(F)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getCascadePartitionsDistance_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCascadePartitionsDistance_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCascadePartitionsDistance_ev_uint8_callback", "(S)I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setCascadePartitionsDistance_1ev_1uint8_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setCascadePartitionsDistance_ev_uint8_ev_uint8_callback", "(SS)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSoftShadowOffsetFormat_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowOffsetFormat_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowOffsetFormat_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasShadowCasterInFrustum_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasShadowCasterInFrustum_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasShadowCasterInFrustum_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSoftShadowLightBleedPower_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowLightBleedPower_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowLightBleedPower_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSoftShadowLightBleedPower_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSoftShadowLightBleedPower_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSoftShadowLightBleedPower_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSoftShadowDepthOffset_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowDepthOffset_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowDepthOffset_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSoftShadowDepthOffset_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSoftShadowDepthOffset_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSoftShadowDepthOffset_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSoftShadowNormalFactor_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowNormalFactor_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowNormalFactor_void_callback", "()F");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSoftShadowNormalFactor_1float(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSoftShadowNormalFactor_float_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSoftShadowNormalFactor_float_callback", "(F)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1notifyLightsDirty_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__notifyLightsDirty_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_notifyLightsDirty_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1getLightsAffectingFrustum_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__getLightsAffectingFrustum_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_getLightsAffectingFrustum_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1populateLightList_1CVector3_1Real_1LightList_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__populateLightList_CVector3_Real_LightList_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_populateLightList_CVector3_Real_LightList_ev_uint32_callback", "(JDJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1populateLightList_1CVector3_1Real_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__populateLightList_CVector3_Real_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_populateLightList_CVector3_Real_LightList_callback", "(JDJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1populateLightList_1CSceneNode_1Real_1LightList_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_populateLightList_CSceneNode_Real_LightList_ev_uint32_callback", "(JDJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1populateLightList_1CSceneNode_1Real_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__populateLightList_CSceneNode_Real_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_populateLightList_CSceneNode_Real_LightList_callback", "(JDJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createSceneNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSceneNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSceneNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createSceneNode_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSceneNode_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSceneNode_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroySceneNode_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroySceneNode_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroySceneNode_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroySceneNode_1CSceneNode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroySceneNode_CSceneNode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroySceneNode_CSceneNode_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getRootSceneNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getRootSceneNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getRootSceneNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSceneNode_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSceneNode_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSceneNode_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasSceneNode_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasSceneNode_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasSceneNode_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1EVString_1EVString_1IntVector_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_EVString_IntVector_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_EVString_IntVector_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1EVString_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1EVString_1EVString_1IntVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_EVString_IntVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_EVString_IntVector_callback", "(Ljava/lang/String;Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1EVString_1CMeshPtr_1IntVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_CMeshPtr_IntVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_CMeshPtr_IntVector_callback", "(Ljava/lang/String;JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1EVString_1CMeshPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_CMeshPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_CMeshPtr_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1CMeshPtr_1IntVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_CMeshPtr_IntVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_CMeshPtr_IntVector_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1CMeshPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_CMeshPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_CMeshPtr_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1EVString_1IntVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_IntVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_IntVector_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1EVString_1PrefabType(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_PrefabType_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_PrefabType_callback", "(Ljava/lang/String;I)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createEntity_1PrefabType(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_PrefabType_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_PrefabType_callback", "(I)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getEntity_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getEntity_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getEntity_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasEntity_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasEntity_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasEntity_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyEntity_1CEntity(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyEntity_CEntity_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyEntity_CEntity_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyEntity_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyEntity_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyEntity_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllEntities_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllEntities_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllEntities_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createManualObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createManualObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createManualObject_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createManualObject_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createManualObject_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createManualObject_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getManualObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getManualObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getManualObject_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasManualObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasManualObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasManualObject_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyManualObject_1CManualObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyManualObject_CManualObject_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyManualObject_CManualObject_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyManualObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyManualObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyManualObject_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllManualObjects_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllManualObjects_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllManualObjects_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createBillboardChain_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardChain_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardChain_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createBillboardChain_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardChain_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardChain_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getBillboardChain_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getBillboardChain_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getBillboardChain_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasBillboardChain_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasBillboardChain_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasBillboardChain_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyBillboardChain_1CBillboardChain(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyBillboardChain_CBillboardChain_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyBillboardChain_CBillboardChain_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyBillboardChain_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyBillboardChain_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyBillboardChain_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllBillboardChains_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllBillboardChains_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllBillboardChains_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createRibbonTrail_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createRibbonTrail_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createRibbonTrail_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createRibbonTrail_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createRibbonTrail_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createRibbonTrail_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getRibbonTrail_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getRibbonTrail_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getRibbonTrail_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasRibbonTrail_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasRibbonTrail_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasRibbonTrail_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyRibbonTrail_1CRibbonTrail(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyRibbonTrail_CRibbonTrail_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyRibbonTrail_CRibbonTrail_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyRibbonTrail_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyRibbonTrail_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyRibbonTrail_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllRibbonTrails_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllRibbonTrails_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllRibbonTrails_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createParticleSystem_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createParticleSystem_1EVString_1ev_1size_1t_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_EVString_ev_size_t_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_EVString_ev_size_t_EVString_callback", "(Ljava/lang/String;JLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createParticleSystem_1EVString_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_EVString_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_EVString_ev_size_t_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createParticleSystem_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createParticleSystem_1ev_1size_1t_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_ev_size_t_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_ev_size_t_EVString_callback", "(JLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createParticleSystem_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_ev_size_t_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createParticleSystem_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getParticleSystem_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getParticleSystem_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getParticleSystem_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasParticleSystem_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasParticleSystem_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasParticleSystem_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyParticleSystem_1CParticleSystem(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyParticleSystem_CParticleSystem_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyParticleSystem_CParticleSystem_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyParticleSystem_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyParticleSystem_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyParticleSystem_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllParticleSystems_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllParticleSystems_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllParticleSystems_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1clearScene_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_clearScene_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"clearScene_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1prepareWorldGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareWorldGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareWorldGeometry_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1prepareWorldGeometry_1DataStreamPtr_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareWorldGeometry_DataStreamPtr_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareWorldGeometry_DataStreamPtr_EVString_callback", "(JLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1prepareWorldGeometry_1DataStreamPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareWorldGeometry_DataStreamPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareWorldGeometry_DataStreamPtr_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setWorldGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setWorldGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setWorldGeometry_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setWorldGeometry_1DataStreamPtr_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setWorldGeometry_DataStreamPtr_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setWorldGeometry_DataStreamPtr_EVString_callback", "(JLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setWorldGeometry_1DataStreamPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setWorldGeometry_DataStreamPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setWorldGeometry_DataStreamPtr_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1estimateWorldGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_estimateWorldGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"estimateWorldGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1estimateWorldGeometry_1DataStreamPtr_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_estimateWorldGeometry_DataStreamPtr_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"estimateWorldGeometry_DataStreamPtr_EVString_callback", "(JLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1estimateWorldGeometry_1DataStreamPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_estimateWorldGeometry_DataStreamPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"estimateWorldGeometry_DataStreamPtr_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSuggestedViewpoint_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSuggestedViewpoint_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSuggestedViewpoint_ev_bool_callback", "(Z)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSuggestedViewpoint_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSuggestedViewpoint_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSuggestedViewpoint_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setOption_1EVString_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setOption_EVString_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setOption_EVString_void_callback", "(Ljava/lang/String;J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getOption_1EVString_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getOption_EVString_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getOption_EVString_void_callback", "(Ljava/lang/String;J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasOption_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasOption_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasOption_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getOptionValues_1EVString_1StringVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getOptionValues_EVString_StringVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getOptionValues_EVString_StringVector_callback", "(Ljava/lang/String;J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getOptionKeys_1StringVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getOptionKeys_StringVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getOptionKeys_StringVector_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1applySceneAnimations_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__applySceneAnimations_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_applySceneAnimations_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1renderVisibleObjects_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__renderVisibleObjects_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_renderVisibleObjects_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1renderScene_1CCamera_1CViewport_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__renderScene_CCamera_CViewport_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_renderScene_CCamera_CViewport_ev_bool_callback", "(JJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1queueSkiesForRendering_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__queueSkiesForRendering_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_queueSkiesForRendering_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setDestinationRenderSystem_1CRenderSystem(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setDestinationRenderSystem_CRenderSystem_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setDestinationRenderSystem_CRenderSystem_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback", "(ZJLjava/lang/String;DDZDIILjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback", "(ZJLjava/lang/String;DDZDII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback", "(ZJLjava/lang/String;DDZDI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback", "(ZJLjava/lang/String;DDZD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback", "(ZJLjava/lang/String;DDZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback", "(ZJLjava/lang/String;DD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_callback", "(ZJLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_callback", "(ZJLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback", "(ZJLjava/lang/String;DDSDIILjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback", "(ZJLjava/lang/String;DDSDII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback", "(ZJLjava/lang/String;DDSDI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback", "(ZJLjava/lang/String;DDSD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback", "(ZJLjava/lang/String;DDS)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback", "(ZJLjava/lang/String;DD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_callback", "(ZJLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_callback", "(ZJLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyPlaneEnabled_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlaneEnabled_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlaneEnabled_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isSkyPlaneEnabled_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isSkyPlaneEnabled_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isSkyPlaneEnabled_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSkyPlaneNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyPlaneNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyPlaneNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSkyPlaneGenParameters_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyPlaneGenParameters_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyPlaneGenParameters_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool_1CQuaternion_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback", "(ZLjava/lang/String;DZJLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool_1CQuaternion(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback", "(ZLjava/lang/String;DZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_Real_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_Real_ev_bool_callback", "(ZLjava/lang/String;DZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyBox_1ev_1bool_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_Real_callback", "(ZLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyBox_1ev_1bool_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_callback", "(ZLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8_1CQuaternion_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback", "(ZLjava/lang/String;DSJLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8_1CQuaternion(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback", "(ZLjava/lang/String;DSJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_Real_ev_uint8_callback", "(ZLjava/lang/String;DS)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyBox_1ev_1bool_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_Real_callback", "(ZLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyBox_1ev_1bool_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_callback", "(ZLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyBoxEnabled_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBoxEnabled_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBoxEnabled_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isSkyBoxEnabled_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isSkyBoxEnabled_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isSkyBoxEnabled_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSkyBoxNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyBoxNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyBoxNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSkyBoxGenParameters_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyBoxGenParameters_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyBoxGenParameters_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback", "(ZLjava/lang/String;DDDZJIIILjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback", "(ZLjava/lang/String;DDDZJIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback", "(ZLjava/lang/String;DDDZJII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback", "(ZLjava/lang/String;DDDZJI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback", "(ZLjava/lang/String;DDDZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback", "(ZLjava/lang/String;DDDZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_callback", "(ZLjava/lang/String;DDD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_callback", "(ZLjava/lang/String;DD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_callback", "(ZLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDome_1ev_1bool_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_callback", "(ZLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback", "(ZLjava/lang/String;DDDSJIIILjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback", "(ZLjava/lang/String;DDDSJIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback", "(ZLjava/lang/String;DDDSJII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback", "(ZLjava/lang/String;DDDSJI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback", "(ZLjava/lang/String;DDDSJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback", "(ZLjava/lang/String;DDDS)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_callback", "(ZLjava/lang/String;DDD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_callback", "(ZLjava/lang/String;DD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_callback", "(ZLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setSkyDome_1ev_1bool_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_callback", "(ZLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSkyDomeEnabled_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDomeEnabled_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDomeEnabled_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isSkyDomeEnabled_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isSkyDomeEnabled_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isSkyDomeEnabled_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSkyDomeNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyDomeNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyDomeNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSkyDomeGenParameters_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyDomeGenParameters_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyDomeGenParameters_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getFogMode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogMode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogMode_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getFogColour_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogColour_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogColour_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getFogStart_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogStart_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogStart_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getFogEnd_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogEnd_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogEnd_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getFogDensity_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogDensity_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogDensity_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createBillboardSet_1EVString_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardSet_EVString_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardSet_EVString_ev_uint32_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createBillboardSet_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardSet_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardSet_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createBillboardSet_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardSet_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardSet_ev_uint32_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createBillboardSet_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardSet_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardSet_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getBillboardSet_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getBillboardSet_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getBillboardSet_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasBillboardSet_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasBillboardSet_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasBillboardSet_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyBillboardSet_1CBillboardSet(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyBillboardSet_CBillboardSet_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyBillboardSet_CBillboardSet_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyBillboardSet_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyBillboardSet_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyBillboardSet_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllBillboardSets_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllBillboardSets_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllBillboardSets_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setDisplaySceneNodes_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setDisplaySceneNodes_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setDisplaySceneNodes_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getDisplaySceneNodes_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getDisplaySceneNodes_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getDisplaySceneNodes_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createAnimation_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAnimation_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAnimation_EVString_Real_callback", "(Ljava/lang/String;D)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getAnimation_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getAnimation_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getAnimation_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasAnimation_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasAnimation_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasAnimation_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAnimation_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAnimation_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAnimation_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllAnimations_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllAnimations_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllAnimations_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createAnimationState_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAnimationState_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAnimationState_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getAnimationState_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getAnimationState_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getAnimationState_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasAnimationState_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasAnimationState_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasAnimationState_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAnimationState_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAnimationState_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAnimationState_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllAnimationStates_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllAnimationStates_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllAnimationStates_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1manualRender_1CRenderOperation_1CPass_1CViewport_1CMatrix4_1CMatrix4_1CMatrix4_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback", "(JJJJJJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1manualRender_1CRenderOperation_1CPass_1CViewport_1CMatrix4_1CMatrix4_1CMatrix4(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback", "(JJJJJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback", "(JJJJJZZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback", "(JJJJJZZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback", "(JJJJJZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback", "(JJJJJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback", "(JJJJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getRenderQueue_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getRenderQueue_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getRenderQueue_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1addRenderQueueListener_1CRenderQueueListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addRenderQueueListener_CRenderQueueListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addRenderQueueListener_CRenderQueueListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1removeRenderQueueListener_1CRenderQueueListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeRenderQueueListener_CRenderQueueListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeRenderQueueListener_CRenderQueueListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1addRenderObjectListener_1CRenderObjectListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addRenderObjectListener_CRenderObjectListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addRenderObjectListener_CRenderObjectListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1removeRenderObjectListener_1CRenderObjectListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeRenderObjectListener_CRenderObjectListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeRenderObjectListener_CRenderObjectListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1addSpecialCaseRenderQueue_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addSpecialCaseRenderQueue_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addSpecialCaseRenderQueue_ev_uint8_callback", "(S)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1removeSpecialCaseRenderQueue_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeSpecialCaseRenderQueue_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeSpecialCaseRenderQueue_ev_uint8_callback", "(S)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1clearSpecialCaseRenderQueues_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_clearSpecialCaseRenderQueues_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"clearSpecialCaseRenderQueues_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setSpecialCaseRenderQueueMode_1SpecialCaseRenderQueueMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getSpecialCaseRenderQueueMode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSpecialCaseRenderQueueMode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSpecialCaseRenderQueueMode_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isRenderQueueToBeProcessed_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isRenderQueueToBeProcessed_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isRenderQueueToBeProcessed_ev_uint8_callback", "(S)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setWorldGeometryRenderQueue_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setWorldGeometryRenderQueue_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setWorldGeometryRenderQueue_ev_uint8_callback", "(S)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getWorldGeometryRenderQueue_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getWorldGeometryRenderQueue_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getWorldGeometryRenderQueue_void_callback", "()S");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1showBoundingBoxes_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_showBoundingBoxes_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"showBoundingBoxes_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShowBoundingBoxes_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShowBoundingBoxes_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShowBoundingBoxes_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1notifyAutotrackingSceneNode_1CSceneNode_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback", "(JZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createAABBQuery_1CAxisAlignedBox_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAABBQuery_CAxisAlignedBox_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAABBQuery_CAxisAlignedBox_ev_uint32_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createAABBQuery_1CAxisAlignedBox(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAABBQuery_CAxisAlignedBox_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAABBQuery_CAxisAlignedBox_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createSphereQuery_1CSphere_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSphereQuery_CSphere_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSphereQuery_CSphere_ev_uint32_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createSphereQuery_1CSphere(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSphereQuery_CSphere_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSphereQuery_CSphere_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createPlaneBoundedVolumeQuery_1PlaneBoundedVolumeList_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createPlaneBoundedVolumeQuery_1PlaneBoundedVolumeList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createRayQuery_1CRay_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createRayQuery_CRay_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createRayQuery_CRay_ev_uint32_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createRayQuery_1CRay(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createRayQuery_CRay_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createRayQuery_CRay_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createIntersectionQuery_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createIntersectionQuery_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createIntersectionQuery_ev_uint32_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createIntersectionQuery_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createIntersectionQuery_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createIntersectionQuery_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyQuery_1CSceneQuery(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyQuery_CSceneQuery_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyQuery_CSceneQuery_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTechnique_1ShadowTechnique(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTechnique_ShadowTechnique_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTechnique_ShadowTechnique_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowTechnique_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowTechnique_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowTechnique_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShowDebugShadows_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShowDebugShadows_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShowDebugShadows_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShowDebugShadows_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShowDebugShadows_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShowDebugShadows_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowColour_1CColourValue(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowColour_CColourValue_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowColour_CColourValue_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowColour_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowColour_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowColour_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowDirectionalLightExtrusionDistance_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowDirectionalLightExtrusionDistance_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowDirectionalLightExtrusionDistance_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowDirectionalLightExtrusionDistance_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowDirectionalLightExtrusionDistance_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowDirectionalLightExtrusionDistance_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowColorRRatio_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowColorRRatio_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowColorRRatio_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowColorGRatio_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowColorGRatio_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowColorGRatio_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowColorBRatio_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowColorBRatio_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowColorBRatio_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowColorRRatio_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowColorRRatio_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowColorRRatio_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowColorGRatio_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowColorGRatio_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowColorGRatio_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowColorBRatio_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowColorBRatio_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowColorBRatio_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowFarDistance_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowFarDistance_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowFarDistance_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowFarDistance_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowFarDistance_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowFarDistance_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowFarDistanceSquared_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowFarDistanceSquared_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowFarDistanceSquared_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowIndexBufferSize_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowIndexBufferSize_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowIndexBufferSize_ev_size_t_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowIndexBufferSize_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowIndexBufferSize_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowIndexBufferSize_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureSize_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSize_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSize_ev_uint16_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback", "(JIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback", "(JIIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback", "(JIIIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTexturePixelFormat_1PixelFormat(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTexturePixelFormat_PixelFormat_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTexturePixelFormat_PixelFormat_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureFSAA_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureFSAA_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureFSAA_ev_uint16_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureCount_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureCount_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureCount_ev_size_t_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureSettings_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSettings_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSettings_ev_uint16_ev_uint16_callback", "(II)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback", "(III)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback", "(IIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback", "(IIIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowTexture_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowTexture_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowTexture_ev_size_t_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowDirLightTextureOffset_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowDirLightTextureOffset_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowDirLightTextureOffset_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowDirLightTextureOffset_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowDirLightTextureOffset_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowDirLightTextureOffset_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureFadeStart_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureFadeStart_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureFadeStart_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureFadeEnd_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureFadeEnd_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureFadeEnd_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureSelfShadow_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSelfShadow_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSelfShadow_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowTextureSelfShadow_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowTextureSelfShadow_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowTextureSelfShadow_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureCasterMaterial_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureCasterMaterial_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureCasterMaterial_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowTextureReceiverMaterial_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureReceiverMaterial_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureReceiverMaterial_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowCasterRenderBackFaces_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowCasterRenderBackFaces_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowCasterRenderBackFaces_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowCasterRenderBackFaces_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowCasterRenderBackFaces_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowCasterRenderBackFaces_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowCameraSetup_1ShadowCameraSetupPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowCameraSetup_ShadowCameraSetupPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowCameraSetup_ShadowCameraSetupPtr_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowCameraSetup_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowCameraSetup_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowCameraSetup_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowUseInfiniteFarPlane_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowUseInfiniteFarPlane_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowUseInfiniteFarPlane_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isShadowTechniqueStencilBased_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueStencilBased_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueStencilBased_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isShadowTechniqueTextureBased_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueTextureBased_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueTextureBased_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isShadowTechniqueModulative_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueModulative_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueModulative_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isShadowTechniqueAdditive_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueAdditive_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueAdditive_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isShadowTechniqueIntegrated_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueIntegrated_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueIntegrated_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isShadowTechniqueInUse_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueInUse_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueInUse_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setShadowUseLightClipPlanes_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowUseLightClipPlanes_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowUseLightClipPlanes_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getShadowUseLightClipPlanes_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowUseLightClipPlanes_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowUseLightClipPlanes_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setActiveCompositorChain_1CCompositorChain(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setActiveCompositorChain_CCompositorChain_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setActiveCompositorChain_CCompositorChain_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setLateMaterialResolving_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setLateMaterialResolving_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setLateMaterialResolving_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1isLateMaterialResolving_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isLateMaterialResolving_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isLateMaterialResolving_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1getActiveCompositorChain_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__getActiveCompositorChain_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_getActiveCompositorChain_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1addListener_1CSceneManagerListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addListener_CSceneManagerListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addListener_CSceneManagerListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1removeListener_1CSceneManagerListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeListener_CSceneManagerListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeListener_CSceneManagerListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1existListener_1CSceneManagerListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_existListener_CSceneManagerListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"existListener_CSceneManagerListener_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createStaticGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createStaticGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createStaticGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getStaticGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getStaticGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getStaticGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasStaticGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasStaticGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasStaticGeometry_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyStaticGeometry_1CStaticGeometry(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyStaticGeometry_CStaticGeometry_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyStaticGeometry_CStaticGeometry_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyStaticGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyStaticGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyStaticGeometry_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllStaticGeometry_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllStaticGeometry_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllStaticGeometry_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createInstancedGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstancedGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstancedGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getInstancedGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getInstancedGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getInstancedGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyInstancedGeometry_1CInstancedGeometry(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstancedGeometry_CInstancedGeometry_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstancedGeometry_CInstancedGeometry_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyInstancedGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstancedGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstancedGeometry_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllInstancedGeometry_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllInstancedGeometry_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllInstancedGeometry_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJII)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJI)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getInstanceManager_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getInstanceManager_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getInstanceManager_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasInstanceManager_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasInstanceManager_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasInstanceManager_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyInstanceManager_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstanceManager_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstanceManager_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyInstanceManager_1CInstanceManager(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstanceManager_CInstanceManager_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstanceManager_CInstanceManager_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyInstanceManagerWithThreadSafe_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstanceManagerWithThreadSafe_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstanceManagerWithThreadSafe_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyInstanceManagerWithThreadSafe_1CInstanceManager(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstanceManagerWithThreadSafe_CInstanceManager_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllInstanceManagers_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllInstanceManagers_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllInstanceManagers_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJI)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJII)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createInstancedEntity_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstancedEntity_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstancedEntity_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyInstancedEntity_1CInstancedEntity(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstancedEntity_CInstancedEntity_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstancedEntity_CInstancedEntity_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createMovableObject_1EVString_1EVString_1CommonStringPairList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createMovableObject_EVString_EVString_CommonStringPairList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createMovableObject_EVString_EVString_CommonStringPairList_callback", "(Ljava/lang/String;Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createMovableObject_1EVString_1CommonStringPairList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createMovableObject_EVString_CommonStringPairList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createMovableObject_EVString_CommonStringPairList_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1createMovableObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createMovableObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createMovableObject_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyMovableObject_1CMovableObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyMovableObject_CMovableObject_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyMovableObject_CMovableObject_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllMovableObjectsByType_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllMovableObjectsByType_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllMovableObjectsByType_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1destroyAllMovableObjects_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllMovableObjects_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllMovableObjects_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1hasMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getMovableObjectIterator_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getMovableObjectIterator_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getMovableObjectIterator_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1injectMovableObject_1CMovableObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_injectMovableObject_CMovableObject_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"injectMovableObject_CMovableObject_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1extractMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_extractMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"extractMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1extractMovableObject_1CMovableObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_extractMovableObject_CMovableObject_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"extractMovableObject_CMovableObject_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1extractAllMovableObjectsByType_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_extractAllMovableObjectsByType_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"extractAllMovableObjectsByType_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setVisibilityMask_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setVisibilityMask_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setVisibilityMask_ev_uint32_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getVisibilityMask_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getVisibilityMask_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getVisibilityMask_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setFindVisibleObjects_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setFindVisibleObjects_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setFindVisibleObjects_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getFindVisibleObjects_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFindVisibleObjects_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFindVisibleObjects_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setNormaliseNormalsOnScale_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setNormaliseNormalsOnScale_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setNormaliseNormalsOnScale_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getNormaliseNormalsOnScale_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getNormaliseNormalsOnScale_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getNormaliseNormalsOnScale_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setFlipCullingOnNegativeScale_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setFlipCullingOnNegativeScale_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setFlipCullingOnNegativeScale_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getFlipCullingOnNegativeScale_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFlipCullingOnNegativeScale_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFlipCullingOnNegativeScale_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback", "(JJZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback", "(JJZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__injectRenderWithPass_CPass_CRenderable_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_injectRenderWithPass_CPass_CRenderable_ev_bool_callback", "(JJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1injectRenderWithPass_1CPass_1CRenderable(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__injectRenderWithPass_CPass_CRenderable_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_injectRenderWithPass_CPass_CRenderable_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1suppressRenderStateChanges_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__suppressRenderStateChanges_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_suppressRenderStateChanges_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1areRenderStateChangesSuppressed_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__areRenderStateChangesSuppressed_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_areRenderStateChangesSuppressed_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setPass_1CPass_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setPass_CPass_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setPass_CPass_ev_bool_ev_bool_callback", "(JZZ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setPass_1CPass_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setPass_CPass_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setPass_CPass_ev_bool_callback", "(JZ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1setPass_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setPass_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setPass_CPass_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1markGpuParamsDirty_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__markGpuParamsDirty_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_markGpuParamsDirty_ev_uint16_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1suppressShadows_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__suppressShadows_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_suppressShadows_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1areShadowsSuppressed_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__areShadowsSuppressed_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_areShadowsSuppressed_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1_1renderQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setCameraRelativeRendering_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setCameraRelativeRendering_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setCameraRelativeRendering_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1getCameraRelativeRendering_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCameraRelativeRendering_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCameraRelativeRendering_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManager_register_1setCollisionDetectionEnable_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerProxy *pObjectX = (JCGeoSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setCollisionDetectionEnable_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setCollisionDetectionEnable_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			class JCGeoSceneManagerFactoryProxy : public EarthView::World::Spatial3D::CGeoSceneManagerFactory
			{
			 private:
				EarthView::World::Core::ev_string m_getMetaData_void_callback;
				EarthView::World::Core::ev_string m_createInstance_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstance_CSceneManager_callback;
			public:
				JCGeoSceneManagerFactoryProxy(EarthView::World::Core::CNameValuePairList *pList) : CGeoSceneManagerFactory(pList)
				{
				}
				ev_void unRegisterJavaReference()
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
					if(__gr != NULL)
					{
						delete __gr;
						this->registerJavaReference(NULL);
					}
				}
			public:
				void register_getMetaData_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getMetaData_void_callback = __method;
				}
				void register_createInstance_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstance_EVString_callback = __method;
				}
				void register_destroyInstance_CSceneManager_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstance_CSceneManager_callback = __method;
				}
				virtual EarthView::World::Graphic::CSceneManager* createInstance(const EVString& instanceName)
				{
					if (this->_gRef != NULL && this->m_createInstance_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring instanceName_wch = instanceName;
						jstring instanceName_j = __env->NewString((const jchar*)instanceName_wch.getString(), instanceName_wch.size());
						jmethodID __method = __gr->getMethod("createInstance_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , instanceName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneManager *__values1 = (EarthView::World::Graphic::CSceneManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManagerFactory::createInstance(instanceName);
					}
				}
				virtual void destroyInstance(EarthView::World::Graphic::CSceneManager* instance)
				{
					if (this->_gRef != NULL && this->m_destroyInstance_CSceneManager_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong instance_j = (jlong) instance;
						jmethodID __method = __gr->getMethod("destroyInstance_CSceneManager_callback");
						__env->CallVoidMethod(__obj, __method , instance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CGeoSceneManagerFactory::destroyInstance(instance);
					}
				}
				virtual const EarthView::World::Graphic::SceneManagerMetaData& getMetaData() const
				{
					if (this->_gRef != NULL && this->m_getMetaData_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getMetaData_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::SceneManagerMetaData &__values1 = *(const EarthView::World::Graphic::SceneManagerMetaData*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CGeoSceneManagerFactory::getMetaData();
					}
				}
			};
			REGISTER_FACTORY_CLASS(JCGeoSceneManagerFactoryProxy);
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_spatial3d_GeoSceneManagerFactory_get_1FACTORY_1TYPE_1NAME_1void(JNIEnv *__env, jclass __clazz)
			{
				EarthView::World::Core::ev_wstring __values1_ch = EarthView::World::Spatial3D::CGeoSceneManagerFactory::FACTORY_TYPE_NAME;
				jstring __values1_j = __env->NewString((const jchar*)__values1_ch.getString(), __values1_ch.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManagerFactory_createInstance_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring instanceName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* instanceName_ch = (const ev_char*)__env->GetStringUTFChars(instanceName_j,JNI_FALSE);
				const EVString instanceName = instanceName_ch;
				__env->ReleaseStringUTFChars(instanceName_j, (const char *)instanceName_ch);
				#else
				const ev_wchar* instanceName_ch = (const ev_wchar*)__env->GetStringChars(instanceName_j,JNI_FALSE);
				const EVString instanceName = instanceName_ch;
				__env->ReleaseStringChars(instanceName_j, (const jchar *)instanceName_ch);
				#endif
				EarthView::World::Spatial3D::CGeoSceneManagerFactory *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManagerFactory*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerFactoryProxy))
				{
					EarthView::World::Graphic::CSceneManager* __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManagerFactory::createInstance(instanceName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneManager* __values1 = pObjectX->createInstance(instanceName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManagerFactory_register_1createInstance_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerFactoryProxy *pObjectX = (JCGeoSceneManagerFactoryProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstance_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstance_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_spatial3d_GeoSceneManagerFactory_createInstance_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring instanceName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* instanceName_ch = (const ev_char*)__env->GetStringUTFChars(instanceName_j,JNI_FALSE);
				const EVString instanceName = instanceName_ch;
				__env->ReleaseStringUTFChars(instanceName_j, (const char *)instanceName_ch);
				#else
				const ev_wchar* instanceName_ch = (const ev_wchar*)__env->GetStringChars(instanceName_j,JNI_FALSE);
				const EVString instanceName = instanceName_ch;
				__env->ReleaseStringChars(instanceName_j, (const jchar *)instanceName_ch);
				#endif
				EarthView::World::Spatial3D::CGeoSceneManagerFactory *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManagerFactory*) pObjXXXX;
				EarthView::World::Graphic::CSceneManager* __values1 = pObjectX->EarthView::World::Spatial3D::CGeoSceneManagerFactory::createInstance(instanceName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManagerFactory_destroyInstance_1CSceneManager(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instance_j)
			{
				EarthView::World::Graphic::CSceneManager *instance = (EarthView::World::Graphic::CSceneManager*) instance_j;
				EarthView::World::Spatial3D::CGeoSceneManagerFactory *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManagerFactory*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCGeoSceneManagerFactoryProxy))
				{
					pObjectX->EarthView::World::Spatial3D::CGeoSceneManagerFactory::destroyInstance(instance);
				}
				else
				{
					pObjectX->destroyInstance(instance);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManagerFactory_register_1destroyInstance_1CSceneManager(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerFactoryProxy *pObjectX = (JCGeoSceneManagerFactoryProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstance_CSceneManager_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstance_CSceneManager_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManagerFactory_destroyInstance_1CSceneManager_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instance_j)
			{
				EarthView::World::Graphic::CSceneManager *instance = (EarthView::World::Graphic::CSceneManager*) instance_j;
				EarthView::World::Spatial3D::CGeoSceneManagerFactory *pObjectX = (EarthView::World::Spatial3D::CGeoSceneManagerFactory*) pObjXXXX;
				pObjectX->EarthView::World::Spatial3D::CGeoSceneManagerFactory::destroyInstance(instance);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_spatial3d_GeoSceneManagerFactory_register_1getMetaData_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCGeoSceneManagerFactoryProxy *pObjectX = (JCGeoSceneManagerFactoryProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getMetaData_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getMetaData_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
		}
	}
}
