/* This file is produced by the P/Invoke AutoWrapper Utility 
 Copyright (c) 2012 by EarthView Image Inc */
#include "geometry3d/planargrid.h"
namespace EarthView
{
	namespace World
	{
		namespace Geometry3D
		{
			typedef const EarthView::World::Graphic::CMovableObject::CMovableObjectInternalAnimableObject*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject_Callback)();
			typedef ev_uint8  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory_Callback)(_in EarthView::World::Graphic::CMovableObjectFactory* ref_fact);
			typedef EarthView::World::Graphic::CMovableObjectFactory*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager_Callback)(_in EarthView::World::Graphic::CSceneManager* ref_mgr);
			typedef EarthView::World::Graphic::CSceneManager*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager_Callback)();
			typedef char*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getName_EVString_Callback)();
			typedef char*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_Callback)();
			typedef EarthView::World::Graphic::CNode*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode_Callback)();
			typedef EarthView::World::Graphic::CSceneNode*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode_Callback)();
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool_Callback)(_in EarthView::World::Graphic::CNode* ref_parent, _in ev_bool isTagPoint);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_Callback)(_in EarthView::World::Graphic::CNode* ref_parent);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void_Callback)();
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList_Callback)(_in const EarthView::World::Graphic::LightList* lightList);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener_Callback)(_in EarthView::World::Graphic::CMovableObject::CLightQueriedListener* listener);
			typedef EarthView::World::Graphic::CMovableObject::CLightQueriedListener*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener_Callback)();
			typedef ev_uint32  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32_Callback)(_in ev_uint32 frame);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera_Callback)(_in EarthView::World::Graphic::CCamera* ref_cam);
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_Callback)();
			typedef Real  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_Callback)();
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool_Callback)(_in ev_bool derive);
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_Callback)(_in EarthView::World::Graphic::CRenderQueue* queue);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool_Callback)(_in ev_bool visible);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool_Callback)();
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real_Callback)(_in Real dist);
			typedef Real  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real_Callback)(_in Real dist);
			typedef Real  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real_Callback)(_in Real pixelSize);
			typedef Real  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue_Callback)(_in const void* colour);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector_Callback)(_in const void* objIndics);
			typedef void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector_Callback)();
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3_Callback)(_in const void* ray, _in const EarthView::World::Graphic::CViewport* viewport, _in ev_bool prepareToRenderSelection, _out ev_int32& objIndex, _out void* point);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector_Callback)(_in const void* aabb, _in ev_bool prepareToRenderSelection, _out void* indexVec);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector_Callback)(_in const void* sphere, _in ev_bool prepareToRenderSelection, _out void* indexVec);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3_Callback)(_in const void* ray, _in const EarthView::World::Graphic::CViewport* viewport, _in ev_bool prepareToRenderSelection, _out ev_int32& objIndex, _out ev_int32& submeshIndex, _out ev_int32& instanceIndex, _out ev_int32& segmentIndex, _out void* point);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_renderSelection_void_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_clearSelection_void_Callback)();
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32_Callback)(_in ev_uint32 objectIndex);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_endEditing_void_Callback)();
			typedef EarthView::World::Graphic::CEditBoundingBox*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox_Callback)();
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback)(_in ev_uint32 objectIndex, _inout void* matrix);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback)(_in ev_uint32 objectIndex, _in const void* matrix);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8_Callback)(_in ev_uint8 queueID);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16_Callback)(_in ev_uint8 queueID, _in ev_uint16 priority);
			typedef ev_uint8  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8_Callback)();
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32_Callback)(_in ev_uint32 flags);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32_Callback)(_in ev_uint32 flags);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32_Callback)(_in ev_uint32 flags);
			typedef ev_uint32  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32_Callback)(_in ev_uint32 flags);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32_Callback)(_in ev_uint32 flags);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32_Callback)(_in ev_uint32 flags);
			typedef ev_uint32  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener_Callback)(_in EarthView::World::Graphic::CMovableObject::CMovableObjectListener* ref_listener);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener_Callback)(_in EarthView::World::Graphic::CMovableObject::CMovableObjectListener* listener);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener_Callback)(_in EarthView::World::Graphic::CMovableObject::CMovableObjectListener* listener);
			typedef ev_uint32  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32_Callback)();
			typedef EarthView::World::Graphic::CMovableObject::CMovableObjectListener*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32_Callback)(_in ev_uint32 index);
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList_Callback)();
			typedef ev_uint32  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32_Callback)(_in ev_uint32 lightMask);
			typedef EarthView::World::Graphic::LightList*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool_Callback)(_in ev_bool enabled);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool_Callback)();
			typedef ev_uint32  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_Callback)(_in EarthView::World::Graphic::CRenderable::CVisitor* visitor, _in ev_bool debugRenderables);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_Callback)(_in EarthView::World::Graphic::CRenderable::CVisitor* visitor);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool_Callback)(_in ev_bool enabled);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool_Callback)();
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool_Callback)();
			typedef EarthView::World::Graphic::CEdgeData*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData_Callback)();
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool_Callback)();
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool_Callback)(_in ev_bool derive);
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_Callback)();
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox_Callback)();
			typedef void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real_Callback)(_in const void* light, _in Real dirLightExtrusionDist);
			typedef void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32_Callback)(_in int shadowTechnique, _in const EarthView::World::Graphic::CLight* light, _in EarthView::World::Graphic::CHardwareIndexBufferSharedPtr* indexBuffer, _in ev_bool extrudeVertices, _in Real extrusionDistance, _in ev_uint32 flags);
			typedef void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_Callback)(_in int shadowTechnique, _in const EarthView::World::Graphic::CLight* light, _in EarthView::World::Graphic::CHardwareIndexBufferSharedPtr* indexBuffer, _in ev_bool extrudeVertices, _in Real extrusionDistance);
			typedef Real  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight_Callback)(_in const EarthView::World::Graphic::CLight* l);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4_Callback)(_in EarthView::World::Graphic::CEdgeData* edgeData, _in const void* lightPos);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32_Callback)(_in EarthView::World::Graphic::CEdgeData* edgeData, _in const void* indexBuffer, _in const EarthView::World::Graphic::CLight* light, _inout void* shadowRenderables, _in ev_uint32 flags);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real_Callback)(_inout void* box, _in const void* lightPos, _in Real extrudeDist);
			class CPlanargridProxy : public EarthView::World::Geometry3D::CPlanargrid
			{
			private:
				EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8_Callback;
				EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory_Callback* m_EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory_Callback;
				EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory_Callback* m_EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory_Callback;
				EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager_Callback* m_EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager_Callback;
				EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager_Callback* m_EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getName_EVString_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getName_EVString_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode_Callback;
				EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_Callback* m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_Callback;
				EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void_Callback* m_EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void_Callback;
				EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void_Callback* m_EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void_Callback;
				EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList_Callback* m_EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera_Callback* m_EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_Callback;
				EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_Callback* m_EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector_Callback;
				EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3_Callback* m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3_Callback;
				EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector_Callback* m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector_Callback;
				EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector_Callback* m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector_Callback;
				EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3_Callback* m_EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3_Callback;
				EarthView_World_Geometry3D_CPlanargrid_renderSelection_void_Callback* m_EarthView_World_Geometry3D_CPlanargrid_renderSelection_void_Callback;
				EarthView_World_Geometry3D_CPlanargrid_clearSelection_void_Callback* m_EarthView_World_Geometry3D_CPlanargrid_clearSelection_void_Callback;
				EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_endEditing_void_Callback* m_EarthView_World_Geometry3D_CPlanargrid_endEditing_void_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8_Callback;
				EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4_Callback* m_EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener_Callback* m_EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener_Callback;
				EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener_Callback* m_EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener_Callback;
				EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener_Callback* m_EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList_Callback* m_EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList_Callback* m_EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_Callback* m_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_Callback;
				EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData_Callback;
				EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_Callback;
				EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight_Callback* m_EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight_Callback;
				EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4_Callback* m_EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4_Callback;
				EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real_Callback* m_EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real_Callback;
			public:
				CPlanargridProxy(EarthView::World::Core::CNameValuePairList *pList) : CPlanargrid(pList)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getName_EVString_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_renderSelection_void_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_clearSelection_void_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_endEditing_void_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real_Callback = NULL;
				}
			public:
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject(EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8(EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory(EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory(EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager(EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager(EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getName_EVString(EarthView_World_Geometry3D_CPlanargrid_getName_EVString_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getName_EVString_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString(EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode(EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode(EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool(EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool(EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode(EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool(EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void(EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool(EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void(EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList(EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener(EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener(EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera(EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox(EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real(EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool(EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere(EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue(EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool(EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool(EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool(EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real(EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real(EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real(EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real(EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real(EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real(EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue(EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector(EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector(EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3(EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector(EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector(EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3(EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_renderSelection_void(EarthView_World_Geometry3D_CPlanargrid_renderSelection_void_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_renderSelection_void_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_clearSelection_void(EarthView_World_Geometry3D_CPlanargrid_clearSelection_void_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_clearSelection_void_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_endEditing_void(EarthView_World_Geometry3D_CPlanargrid_endEditing_void_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_endEditing_void_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox(EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4(EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4(EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8(EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16(EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8(EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4(EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener(EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener(EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener(EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList(EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList(EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool(EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool(EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool(EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor(EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool(EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool(EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool(EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData(EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool(EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool(EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox(EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox(EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real(EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real(EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight(EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4(EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real(EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real_Callback = pCallback;
				}
				virtual EVString getMovableType() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_Callback != NULL && this->isCustomExtend())
					{
						EVString returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getMovableType();
				}
				virtual const EarthView::World::Spatial::Math::CAxisAlignedBox& getBoundingBox() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Spatial::Math::CAxisAlignedBox& returnValue = *(EarthView::World::Spatial::Math::CAxisAlignedBox*)m_EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getBoundingBox();
				}
				virtual Real getBoundingRadius() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_Callback != NULL && this->isCustomExtend())
					{
						Real returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getBoundingRadius();
				}
				virtual void _updateRenderQueue(_in EarthView::World::Graphic::CRenderQueue* queue)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_Callback(queue);
					}
					else
						return this->CPlanargrid::_updateRenderQueue(queue);
				}
				virtual void visitRenderables(_in EarthView::World::Graphic::CRenderable::CVisitor* visitor, _in ev_bool debugRenderables)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_Callback(visitor, debugRenderables);
					}
					else
						return this->CPlanargrid::visitRenderables(visitor, debugRenderables);
				}
				virtual const EarthView::World::Graphic::CMovableObject::CMovableObjectInternalAnimableObject* getAnimableObjectPtr()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Graphic::CMovableObject::CMovableObjectInternalAnimableObject* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getAnimableObjectPtr();
				}
				virtual ev_uint8 getRenderQueueId() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8_Callback != NULL && this->isCustomExtend())
					{
						ev_uint8 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getRenderQueueId();
				}
				virtual void _notifyCreator(_in EarthView::World::Graphic::CMovableObjectFactory* ref_fact)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory_Callback(ref_fact);
					}
					else
						return this->CPlanargrid::_notifyCreator(ref_fact);
				}
				virtual EarthView::World::Graphic::CMovableObjectFactory* _getCreator() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CMovableObjectFactory* returnValue = m_EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::_getCreator();
				}
				virtual void _notifyManager(_in EarthView::World::Graphic::CSceneManager* ref_mgr)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager_Callback(ref_mgr);
					}
					else
						return this->CPlanargrid::_notifyManager(ref_mgr);
				}
				virtual EarthView::World::Graphic::CSceneManager* _getManager() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CSceneManager* returnValue = m_EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::_getManager();
				}
				virtual EVString getName() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getName_EVString_Callback != NULL && this->isCustomExtend())
					{
						EVString returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getName_EVString_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getName();
				}
				virtual EarthView::World::Graphic::CNode* getParentNode() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CNode* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getParentNode();
				}
				virtual EarthView::World::Graphic::CSceneNode* getParentSceneNode() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CSceneNode* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getParentSceneNode();
				}
				virtual ev_bool isParentTagPoint() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::isParentTagPoint();
				}
				virtual void _notifyAttached(_in EarthView::World::Graphic::CNode* ref_parent, _in ev_bool isTagPoint)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool_Callback(ref_parent, isTagPoint);
					}
					else
						return this->CPlanargrid::_notifyAttached(ref_parent, isTagPoint);
				}
				virtual void _notifyAttached(_in EarthView::World::Graphic::CNode* ref_parent)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_Callback(ref_parent);
					}
					else
						return this->CPlanargrid::_notifyAttached(ref_parent);
				}
				virtual ev_bool isAttached() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::isAttached();
				}
				virtual void detachFromParent()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void_Callback();
					}
					else
						return this->CPlanargrid::detachFromParent();
				}
				virtual ev_bool isInScene() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::isInScene();
				}
				virtual void _notifyMoved()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void_Callback();
					}
					else
						return this->CPlanargrid::_notifyMoved();
				}
				virtual void _notifyLightsQueried(_in const EarthView::World::Graphic::LightList* lightList)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList_Callback(lightList);
					}
					else
						return this->CPlanargrid::_notifyLightsQueried(lightList);
				}
				virtual void setLightQueriedListener(_in EarthView::World::Graphic::CMovableObject::CLightQueriedListener* listener)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener_Callback(listener);
					}
					else
						return this->CPlanargrid::setLightQueriedListener(listener);
				}
				virtual EarthView::World::Graphic::CMovableObject::CLightQueriedListener* getLightQueriedListener()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CMovableObject::CLightQueriedListener* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getLightQueriedListener();
				}
				virtual ev_uint32 getLightListUpdated() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						ev_uint32 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getLightListUpdated();
				}
				virtual void setLightListUpdated(_in ev_uint32 frame)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32_Callback(frame);
					}
					else
						return this->CPlanargrid::setLightListUpdated(frame);
				}
				virtual void _notifyCurrentCamera(_in EarthView::World::Graphic::CCamera* ref_cam)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera_Callback(ref_cam);
					}
					else
						return this->CPlanargrid::_notifyCurrentCamera(ref_cam);
				}
				virtual const EarthView::World::Spatial::Math::CAxisAlignedBox& getWorldBoundingBox(_in ev_bool derive) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Spatial::Math::CAxisAlignedBox& returnValue = *(EarthView::World::Spatial::Math::CAxisAlignedBox*)m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool_Callback(derive);
						return returnValue;
					}
					else
						return this->CPlanargrid::getWorldBoundingBox(derive);
				}
				virtual const EarthView::World::Spatial::Math::CAxisAlignedBox& getWorldBoundingBox() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Spatial::Math::CAxisAlignedBox& returnValue = *(EarthView::World::Spatial::Math::CAxisAlignedBox*)m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getWorldBoundingBox();
				}
				virtual const EarthView::World::Spatial::Math::CSphere& getWorldBoundingSphere(_in ev_bool derive) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Spatial::Math::CSphere& returnValue = *(EarthView::World::Spatial::Math::CSphere*)m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool_Callback(derive);
						return returnValue;
					}
					else
						return this->CPlanargrid::getWorldBoundingSphere(derive);
				}
				virtual const EarthView::World::Spatial::Math::CSphere& getWorldBoundingSphere() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Spatial::Math::CSphere& returnValue = *(EarthView::World::Spatial::Math::CSphere*)m_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getWorldBoundingSphere();
				}
				virtual void setVisible(_in ev_bool visible)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool_Callback(visible);
					}
					else
						return this->CPlanargrid::setVisible(visible);
				}
				virtual ev_bool getVisible() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getVisible();
				}
				virtual ev_bool isVisible() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::isVisible();
				}
				virtual void setRenderingMaxDistance(_in Real dist)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real_Callback(dist);
					}
					else
						return this->CPlanargrid::setRenderingMaxDistance(dist);
				}
				virtual Real getRenderingMaxDistance() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real_Callback != NULL && this->isCustomExtend())
					{
						Real returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getRenderingMaxDistance();
				}
				virtual void setRenderingMinDistance(_in Real dist)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real_Callback(dist);
					}
					else
						return this->CPlanargrid::setRenderingMinDistance(dist);
				}
				virtual Real getRenderingMinDistance() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real_Callback != NULL && this->isCustomExtend())
					{
						Real returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getRenderingMinDistance();
				}
				virtual void setRenderingMinPixelSize(_in Real pixelSize)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real_Callback(pixelSize);
					}
					else
						return this->CPlanargrid::setRenderingMinPixelSize(pixelSize);
				}
				virtual Real getRenderingMinPixelSize() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real_Callback != NULL && this->isCustomExtend())
					{
						Real returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getRenderingMinPixelSize();
				}
				virtual void setSelectionColour(_in const EarthView::World::Graphic::CColourValue& colour)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue_Callback(&colour);
					}
					else
						return this->CPlanargrid::setSelectionColour(colour);
				}
				virtual ev_bool setSelected(_in const EarthView::World::Core::IntVector& objIndics)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector_Callback(&objIndics);
						return returnValue;
					}
					else
						return this->CPlanargrid::setSelected(objIndics);
				}
				virtual EarthView::World::Core::IntVector getSelected() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Core::IntVector returnValue = *(EarthView::World::Core::IntVector*)m_EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getSelected();
				}
				virtual ev_bool selectBy(_in const EarthView::World::Spatial::Math::CRay& ray, _in const EarthView::World::Graphic::CViewport* viewport, _in ev_bool prepareToRenderSelection, _out ev_int32& objIndex, _out EarthView::World::Spatial::Math::CVector3& point)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3_Callback(&ray, viewport, prepareToRenderSelection, objIndex, &point);
						return returnValue;
					}
					else
						return this->CPlanargrid::selectBy(ray, viewport, prepareToRenderSelection, objIndex, point);
				}
				virtual ev_bool selectBy(_in const EarthView::World::Spatial::Math::CAxisAlignedBox& aabb, _in ev_bool prepareToRenderSelection, _out EarthView::World::Core::IntVector& indexVec)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector_Callback(&aabb, prepareToRenderSelection, &indexVec);
						return returnValue;
					}
					else
						return this->CPlanargrid::selectBy(aabb, prepareToRenderSelection, indexVec);
				}
				virtual ev_bool selectBy(_in const EarthView::World::Spatial::Math::CSphere& sphere, _in ev_bool prepareToRenderSelection, _out EarthView::World::Core::IntVector& indexVec)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector_Callback(&sphere, prepareToRenderSelection, &indexVec);
						return returnValue;
					}
					else
						return this->CPlanargrid::selectBy(sphere, prepareToRenderSelection, indexVec);
				}
				virtual ev_bool selectComponentBy(_in const EarthView::World::Spatial::Math::CRay& ray, _in const EarthView::World::Graphic::CViewport* viewport, _in ev_bool prepareToRenderSelection, _out ev_int32& objIndex, _out ev_int32& submeshIndex, _out ev_int32& instanceIndex, _out ev_int32& segmentIndex, _out EarthView::World::Spatial::Math::CVector3& point)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3_Callback(&ray, viewport, prepareToRenderSelection, objIndex, submeshIndex, instanceIndex, segmentIndex, &point);
						return returnValue;
					}
					else
						return this->CPlanargrid::selectComponentBy(ray, viewport, prepareToRenderSelection, objIndex, submeshIndex, instanceIndex, segmentIndex, point);
				}
				virtual void renderSelection()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_renderSelection_void_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_renderSelection_void_Callback();
					}
					else
						return this->CPlanargrid::renderSelection();
				}
				virtual void clearSelection()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_clearSelection_void_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_clearSelection_void_Callback();
					}
					else
						return this->CPlanargrid::clearSelection();
				}
				virtual ev_bool startEditing(_in ev_uint32 objectIndex)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32_Callback(objectIndex);
						return returnValue;
					}
					else
						return this->CPlanargrid::startEditing(objectIndex);
				}
				virtual void endEditing()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_endEditing_void_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_endEditing_void_Callback();
					}
					else
						return this->CPlanargrid::endEditing();
				}
				virtual EarthView::World::Graphic::CEditBoundingBox* getEditBoundingBox()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CEditBoundingBox* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getEditBoundingBox();
				}
				virtual ev_bool getSelectedObjectWorldMatrix(_in ev_uint32 objectIndex, _inout EarthView::World::Spatial::Math::CMatrix4& matrix)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback(objectIndex, &matrix);
						return returnValue;
					}
					else
						return this->CPlanargrid::getSelectedObjectWorldMatrix(objectIndex, matrix);
				}
				virtual ev_bool setSelectedObjectWorldMatrix(_in ev_uint32 objectIndex, _in const EarthView::World::Spatial::Math::CMatrix4& matrix)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback(objectIndex, &matrix);
						return returnValue;
					}
					else
						return this->CPlanargrid::setSelectedObjectWorldMatrix(objectIndex, matrix);
				}
				virtual void setRenderQueueGroup(_in ev_uint8 queueID)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8_Callback(queueID);
					}
					else
						return this->CPlanargrid::setRenderQueueGroup(queueID);
				}
				virtual void setRenderQueueGroupAndPriority(_in ev_uint8 queueID, _in ev_uint16 priority)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16_Callback(queueID, priority);
					}
					else
						return this->CPlanargrid::setRenderQueueGroupAndPriority(queueID, priority);
				}
				virtual ev_uint8 getRenderQueueGroup() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8_Callback != NULL && this->isCustomExtend())
					{
						ev_uint8 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getRenderQueueGroup();
				}
				virtual const EarthView::World::Spatial::Math::CMatrix4& _getParentNodeFullTransform() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Spatial::Math::CMatrix4& returnValue = *(EarthView::World::Spatial::Math::CMatrix4*)m_EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::_getParentNodeFullTransform();
				}
				virtual void setQueryFlags(_in ev_uint32 flags)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32_Callback(flags);
					}
					else
						return this->CPlanargrid::setQueryFlags(flags);
				}
				virtual void addQueryFlags(_in ev_uint32 flags)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32_Callback(flags);
					}
					else
						return this->CPlanargrid::addQueryFlags(flags);
				}
				virtual void removeQueryFlags(_in ev_uint32 flags)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32_Callback(flags);
					}
					else
						return this->CPlanargrid::removeQueryFlags(flags);
				}
				virtual ev_uint32 getQueryFlags() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						ev_uint32 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getQueryFlags();
				}
				virtual void setVisibilityFlags(_in ev_uint32 flags)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32_Callback(flags);
					}
					else
						return this->CPlanargrid::setVisibilityFlags(flags);
				}
				virtual void addVisibilityFlags(_in ev_uint32 flags)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32_Callback(flags);
					}
					else
						return this->CPlanargrid::addVisibilityFlags(flags);
				}
				virtual void removeVisibilityFlags(_in ev_uint32 flags)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32_Callback(flags);
					}
					else
						return this->CPlanargrid::removeVisibilityFlags(flags);
				}
				virtual ev_uint32 getVisibilityFlags() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						ev_uint32 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getVisibilityFlags();
				}
				virtual void addListener(_in EarthView::World::Graphic::CMovableObject::CMovableObjectListener* ref_listener)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener_Callback(ref_listener);
					}
					else
						return this->CPlanargrid::addListener(ref_listener);
				}
				virtual void removeListener(_in EarthView::World::Graphic::CMovableObject::CMovableObjectListener* listener)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener_Callback(listener);
					}
					else
						return this->CPlanargrid::removeListener(listener);
				}
				virtual ev_bool existListener(_in EarthView::World::Graphic::CMovableObject::CMovableObjectListener* listener) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener_Callback(listener);
						return returnValue;
					}
					else
						return this->CPlanargrid::existListener(listener);
				}
				virtual ev_uint32 getListenerCount() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						ev_uint32 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getListenerCount();
				}
				virtual EarthView::World::Graphic::CMovableObject::CMovableObjectListener* getListener(_in ev_uint32 index) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CMovableObject::CMovableObjectListener* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32_Callback(index);
						return returnValue;
					}
					else
						return this->CPlanargrid::getListener(index);
				}
				virtual const EarthView::World::Graphic::LightList& queryLights() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Graphic::LightList& returnValue = *(EarthView::World::Graphic::LightList*)m_EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::queryLights();
				}
				virtual ev_uint32 getLightMask() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						ev_uint32 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getLightMask();
				}
				virtual void setLightMask(_in ev_uint32 lightMask)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32_Callback(lightMask);
					}
					else
						return this->CPlanargrid::setLightMask(lightMask);
				}
				virtual EarthView::World::Graphic::LightList* _getLightList()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::LightList* returnValue = m_EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::_getLightList();
				}
				virtual EarthView::World::Graphic::CEdgeData* getEdgeList()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CEdgeData* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getEdgeList();
				}
				virtual ev_bool hasEdgeList()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::hasEdgeList();
				}
				virtual EarthView::World::Graphic::CShadowCaster::ShadowRenderableListIterator getShadowVolumeRenderableIterator(_in EarthView::World::Graphic::ShadowTechnique shadowTechnique, _in const EarthView::World::Graphic::CLight* light, _in EarthView::World::Graphic::CHardwareIndexBufferSharedPtr* indexBuffer, _in ev_bool extrudeVertices, _in Real extrusionDist, _in ev_uint32 flags)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CShadowCaster::ShadowRenderableListIterator returnValue = *(EarthView::World::Graphic::CShadowCaster::ShadowRenderableListIterator*)m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32_Callback((int)shadowTechnique, light, indexBuffer, extrudeVertices, extrusionDist, flags);
						return returnValue;
					}
					else
						return this->CPlanargrid::getShadowVolumeRenderableIterator(shadowTechnique, light, indexBuffer, extrudeVertices, extrusionDist, flags);
				}
				virtual EarthView::World::Graphic::CShadowCaster::ShadowRenderableListIterator getShadowVolumeRenderableIterator(_in EarthView::World::Graphic::ShadowTechnique shadowTechnique, _in const EarthView::World::Graphic::CLight* light, _in EarthView::World::Graphic::CHardwareIndexBufferSharedPtr* indexBuffer, _in ev_bool extrudeVertices, _in Real extrusionDist)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CShadowCaster::ShadowRenderableListIterator returnValue = *(EarthView::World::Graphic::CShadowCaster::ShadowRenderableListIterator*)m_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_Callback((int)shadowTechnique, light, indexBuffer, extrudeVertices, extrusionDist);
						return returnValue;
					}
					else
						return this->CPlanargrid::getShadowVolumeRenderableIterator(shadowTechnique, light, indexBuffer, extrudeVertices, extrusionDist);
				}
				virtual const EarthView::World::Spatial::Math::CAxisAlignedBox& getLightCapBounds() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Spatial::Math::CAxisAlignedBox& returnValue = *(EarthView::World::Spatial::Math::CAxisAlignedBox*)m_EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getLightCapBounds();
				}
				virtual EarthView::World::Spatial::Math::CAxisAlignedBox getDarkCapBounds(_in const EarthView::World::Graphic::CLight& light, _in Real dirLightExtrusionDist) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Spatial::Math::CAxisAlignedBox returnValue = *(EarthView::World::Spatial::Math::CAxisAlignedBox*)m_EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real_Callback(&light, dirLightExtrusionDist);
						return returnValue;
					}
					else
						return this->CPlanargrid::getDarkCapBounds(light, dirLightExtrusionDist);
				}
				virtual void setCastShadows(_in ev_bool enabled)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool_Callback(enabled);
					}
					else
						return this->CPlanargrid::setCastShadows(enabled);
				}
				virtual ev_bool getCastShadows() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getCastShadows();
				}
				virtual ev_bool getReceivesShadows()
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getReceivesShadows();
				}
				virtual Real getPointExtrusionDistance(_in const EarthView::World::Graphic::CLight* l) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight_Callback != NULL && this->isCustomExtend())
					{
						Real returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight_Callback(l);
						return returnValue;
					}
					else
						return this->CPlanargrid::getPointExtrusionDistance(l);
				}
				virtual ev_uint32 getTypeFlags() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						ev_uint32 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::getTypeFlags();
				}
				virtual void setDebugDisplayEnabled(_in ev_bool enabled)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool_Callback(enabled);
					}
					else
						return this->CPlanargrid::setDebugDisplayEnabled(enabled);
				}
				virtual ev_bool isDebugDisplayEnabled() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargrid::isDebugDisplayEnabled();
				}
				virtual void updateEdgeListLightFacing(_in EarthView::World::Graphic::CEdgeData* edgeData, _in const EarthView::World::Spatial::Math::CVector4& lightPos)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4_Callback(edgeData, &lightPos);
					}
					else
						return this->CPlanargrid::updateEdgeListLightFacing(edgeData, lightPos);
				}
				virtual void generateShadowVolume(_in EarthView::World::Graphic::CEdgeData* edgeData, _in const EarthView::World::Graphic::CHardwareIndexBufferSharedPtr& indexBuffer, _in const EarthView::World::Graphic::CLight* light, _inout EarthView::World::Graphic::CShadowCaster::ShadowRenderableList& shadowRenderables, _in ev_uint32 flags)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32_Callback(edgeData, &indexBuffer, light, &shadowRenderables, flags);
					}
					else
						return this->CPlanargrid::generateShadowVolume(edgeData, indexBuffer, light, shadowRenderables, flags);
				}
				virtual void extrudeBounds(_inout EarthView::World::Spatial::Math::CAxisAlignedBox& box, _in const EarthView::World::Spatial::Math::CVector4& lightPos, _in Real extrudeDist) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real_Callback(&box, &lightPos, extrudeDist);
					}
					else
						return this->CPlanargrid::extrudeBounds(box, lightPos, extrudeDist);
				}
			};
			REGISTER_FACTORY_CLASS(CPlanargridProxy);
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_Callback)();
			typedef EarthView::World::Graphic::CTechnique*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_Callback)(_inout void* op);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem_Callback)(_in EarthView::World::Graphic::CSceneManager* sm, _in EarthView::World::Graphic::CRenderSystem* rsys);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem_Callback)(_in EarthView::World::Graphic::CSceneManager* sm, _in EarthView::World::Graphic::CRenderSystem* rsys);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_Callback)(_in EarthView::World::Spatial::Math::CMatrix4* xform);
			typedef ev_uint16  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16_Callback)();
			typedef Real  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_Callback)(_in const EarthView::World::Graphic::CCamera* cam);
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_Callback)();
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters_Callback)(_in const void* constantEntry, _in EarthView::World::Graphic::CGpuProgramParameters* params);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool_Callback)(_in ev_bool override);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue_Callback)(_in const void* ambient);
			typedef const void*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue_Callback)();
			typedef bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool_Callback)(_in ev_bool enabled);
			typedef EarthView::World::Graphic::CMovableObject*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener_Callback)(_in EarthView::World::Graphic::CRenderable::CRenderableListener* ref_listener);
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener_Callback)(_in EarthView::World::Graphic::CRenderable::CRenderableListener* listener);
			typedef ev_bool  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener_Callback)(_in EarthView::World::Graphic::CRenderable::CRenderableListener* listener);
			typedef ev_uint32  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32_Callback)();
			typedef EarthView::World::Graphic::CRenderable::CRenderableListener*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32_Callback)(_in ev_uint32 index);
			typedef EarthView::World::Graphic::CRenderable::CRenderSystemData*  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData_Callback)();
			typedef void  ( _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData_Callback)(_in EarthView::World::Graphic::CRenderable::CRenderSystemData* ref_val);
			class CPlanargridInternalRenderableProxy : public EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable
			{
			private:
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData_Callback;
				EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData_Callback* m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData_Callback;
			public:
				CPlanargridInternalRenderableProxy(EarthView::World::Core::CNameValuePairList *pList) : CPlanargridInternalRenderable(pList)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData_Callback = NULL;
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData_Callback = NULL;
				}
			public:
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData_Callback = pCallback;
				}
				ev_void registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData(EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData_Callback* pCallback)
				{
					m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData_Callback = pCallback;
				}
				virtual Real getSquaredViewDepth(_in const EarthView::World::Graphic::CCamera* cam) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_Callback != NULL && this->isCustomExtend())
					{
						Real returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_Callback(cam);
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getSquaredViewDepth(cam);
				}
				virtual const EarthView::World::Graphic::CMaterialPtr& getMaterial() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Graphic::CMaterialPtr& returnValue = *(EarthView::World::Graphic::CMaterialPtr*)m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getMaterial();
				}
				virtual void getRenderOperation(_inout EarthView::World::Graphic::CRenderOperation& op)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_Callback(&op);
					}
					else
						return this->CPlanargridInternalRenderable::getRenderOperation(op);
				}
				virtual void getWorldTransforms(_in EarthView::World::Spatial::Math::CMatrix4* xform) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_Callback(xform);
					}
					else
						return this->CPlanargridInternalRenderable::getWorldTransforms(xform);
				}
				virtual const EarthView::World::Graphic::LightList& getLights() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Graphic::LightList& returnValue = *(EarthView::World::Graphic::LightList*)m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getLights();
				}
				virtual EarthView::World::Graphic::CMovableObject* getMovableObject() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CMovableObject* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getMovableObject();
				}
				virtual EarthView::World::Graphic::CTechnique* getTechnique() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CTechnique* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getTechnique();
				}
				virtual ev_bool preRender(_in EarthView::World::Graphic::CSceneManager* sm, _in EarthView::World::Graphic::CRenderSystem* rsys)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem_Callback(sm, rsys);
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::preRender(sm, rsys);
				}
				virtual void postRender(_in EarthView::World::Graphic::CSceneManager* sm, _in EarthView::World::Graphic::CRenderSystem* rsys)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem_Callback(sm, rsys);
					}
					else
						return this->CPlanargridInternalRenderable::postRender(sm, rsys);
				}
				virtual ev_uint16 getNumWorldTransforms() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16_Callback != NULL && this->isCustomExtend())
					{
						ev_uint16 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getNumWorldTransforms();
				}
				virtual ev_bool getCastsShadows() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getCastsShadows();
				}
				virtual void _updateCustomGpuParameter(_in const EarthView::World::Graphic::CGpuProgramParameters::CAutoConstantEntry& constantEntry, _in EarthView::World::Graphic::CGpuProgramParameters* params) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters_Callback(&constantEntry, params);
					}
					else
						return this->CPlanargridInternalRenderable::_updateCustomGpuParameter(constantEntry, params);
				}
				virtual void setPolygonModeOverrideable(_in ev_bool override)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool_Callback(override);
					}
					else
						return this->CPlanargridInternalRenderable::setPolygonModeOverrideable(override);
				}
				virtual ev_bool getPolygonModeOverrideable() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getPolygonModeOverrideable();
				}
				virtual void setCustomAmbient(_in const EarthView::World::Graphic::CColourValue& ambient)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue_Callback(&ambient);
					}
					else
						return this->CPlanargridInternalRenderable::setCustomAmbient(ambient);
				}
				virtual const EarthView::World::Graphic::CColourValue& getCustomAmbient() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue_Callback != NULL && this->isCustomExtend())
					{
						const EarthView::World::Graphic::CColourValue& returnValue = *(EarthView::World::Graphic::CColourValue*)m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getCustomAmbient();
				}
				virtual bool getCustomAmbientEnabled() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool_Callback != NULL && this->isCustomExtend())
					{
						bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getCustomAmbientEnabled();
				}
				virtual void setCustomAmbientEnabled(_in ev_bool enabled)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool_Callback(enabled);
					}
					else
						return this->CPlanargridInternalRenderable::setCustomAmbientEnabled(enabled);
				}
				virtual void addListener(_in EarthView::World::Graphic::CRenderable::CRenderableListener* ref_listener)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener_Callback(ref_listener);
					}
					else
						return this->CPlanargridInternalRenderable::addListener(ref_listener);
				}
				virtual void removeListener(_in EarthView::World::Graphic::CRenderable::CRenderableListener* listener)
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener_Callback(listener);
					}
					else
						return this->CPlanargridInternalRenderable::removeListener(listener);
				}
				virtual ev_bool existListener(_in EarthView::World::Graphic::CRenderable::CRenderableListener* listener) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener_Callback != NULL && this->isCustomExtend())
					{
						ev_bool returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener_Callback(listener);
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::existListener(listener);
				}
				virtual ev_uint32 getListenerCount() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						ev_uint32 returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getListenerCount();
				}
				virtual EarthView::World::Graphic::CRenderable::CRenderableListener* getListener(_in ev_uint32 index) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CRenderable::CRenderableListener* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32_Callback(index);
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getListener(index);
				}
				virtual EarthView::World::Graphic::CRenderable::CRenderSystemData* getRenderSystemData() const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData_Callback != NULL && this->isCustomExtend())
					{
						EarthView::World::Graphic::CRenderable::CRenderSystemData* returnValue = m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData_Callback();
						return returnValue;
					}
					else
						return this->CPlanargridInternalRenderable::getRenderSystemData();
				}
				virtual void setRenderSystemData(_in EarthView::World::Graphic::CRenderable::CRenderSystemData* ref_val) const
				{
					if(m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData_Callback != NULL && this->isCustomExtend())
					{
						m_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData_Callback(ref_val);
					}
					else
						return this->CPlanargridInternalRenderable::setRenderSystemData(ref_val);
				}
			};
			REGISTER_FACTORY_CLASS(CPlanargridInternalRenderableProxy);
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setColor_void_CColourValue(void *pObjectXXXX, _in const void* colorValue )
			{
				EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				ptrNativeObject->setColor(*(EarthView::World::Graphic::CColourValue*)colorValue);
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPlanargridScale_void_ev_uint32(void *pObjectXXXX, _in ev_uint32 scale )
			{
				EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				ptrNativeObject->setPlanargridScale(scale);
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPlanargridLineLength_void_ev_uint32(void *pObjectXXXX, _in ev_uint32 lineLength )
			{
				EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				ptrNativeObject->setPlanargridLineLength(lineLength);
			}
			extern "C" EV_DLL_EXPORT  ev_uint32  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPlanargridScale_ev_uint32(void *pObjectXXXX )
			{
				EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				ev_uint32 objXXXX = ptrNativeObject->getPlanargridScale();
				return objXXXX;
			}
			extern "C" EV_DLL_EXPORT  ev_uint32  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPlanargridLineLength_ev_uint32(void *pObjectXXXX )
			{
				EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				ev_uint32 objXXXX = ptrNativeObject->getPlanargridLineLength();
				return objXXXX;
			}
			extern "C" EV_DLL_EXPORT  void*  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPlanargridCentreColor_CColourValue(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				EarthView::World::Graphic::CColourValue objXXXX = ptrNativeObject->getPlanargridCentreColor();
				EarthView::World::Graphic::CColourValue *pXXXX = new EarthView::World::Graphic::CColourValue(objXXXX);
				((EarthView::World::Core::CBaseObject*)pXXXX)->setExternFree(true);
				return (void*)pXXXX;
			}
			extern "C" EV_DLL_EXPORT  Real  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera(void *pObjectXXXX, _in const EarthView::World::Graphic::CCamera* cam )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				if (dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*)ptrNativeObject) != NULL)
				{
					Real objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getSquaredViewDepth(cam);
					return objXXXX;
				}
				else
				{
					Real objXXXX = ptrNativeObject->getSquaredViewDepth(cam);
					return objXXXX;
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  Real  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getSquaredViewDepth_Real_CCamera_NoVirtual(void *pObjectXXXX, _in const EarthView::World::Graphic::CCamera* cam )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				Real objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getSquaredViewDepth(cam);
				return objXXXX;
			}
			extern "C" EV_DLL_EXPORT  const void*  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				if (dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*)ptrNativeObject) != NULL)
				{
					const EarthView::World::Graphic::CMaterialPtr& objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getMaterial();
					const EarthView::World::Graphic::CMaterialPtr *pXXXX = &objXXXX;
					return (void*)pXXXX;
				}
				else
				{
					const EarthView::World::Graphic::CMaterialPtr& objXXXX = ptrNativeObject->getMaterial();
					const EarthView::World::Graphic::CMaterialPtr *pXXXX = &objXXXX;
					return (void*)pXXXX;
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  const void*  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMaterial_CMaterialPtr_NoVirtual(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				const EarthView::World::Graphic::CMaterialPtr& objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getMaterial();
				const EarthView::World::Graphic::CMaterialPtr *pXXXX = &objXXXX;
				return (void*)pXXXX;
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation(void *pObjectXXXX, _inout void* op )
			{
				EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				if (dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*)ptrNativeObject) != NULL)
					ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getRenderOperation(*(EarthView::World::Graphic::CRenderOperation*)op);
				else
					ptrNativeObject->getRenderOperation(*(EarthView::World::Graphic::CRenderOperation*)op);
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderOperation_void_CRenderOperation_NoVirtual(void *pObjectXXXX, _inout void* op )
			{
				EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getRenderOperation(*(EarthView::World::Graphic::CRenderOperation*)op);
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4(void *pObjectXXXX, _in EarthView::World::Spatial::Math::CMatrix4* xform )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				if (dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*)ptrNativeObject) != NULL)
					ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getWorldTransforms(xform);
				else
					ptrNativeObject->getWorldTransforms(xform);
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getWorldTransforms_void_CMatrix4_NoVirtual(void *pObjectXXXX, _in EarthView::World::Spatial::Math::CMatrix4* xform )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getWorldTransforms(xform);
			}
			extern "C" EV_DLL_EXPORT  const void*  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				if (dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*)ptrNativeObject) != NULL)
				{
					const EarthView::World::Graphic::LightList& objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getLights();
					const EarthView::World::Graphic::LightList *pXXXX = &objXXXX;
					return (void*)pXXXX;
				}
				else
				{
					const EarthView::World::Graphic::LightList& objXXXX = ptrNativeObject->getLights();
					const EarthView::World::Graphic::LightList *pXXXX = &objXXXX;
					return (void*)pXXXX;
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  const void*  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getLights_LightList_NoVirtual(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				const EarthView::World::Graphic::LightList& objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getLights();
				const EarthView::World::Graphic::LightList *pXXXX = &objXXXX;
				return (void*)pXXXX;
			}
			extern "C" EV_DLL_EXPORT  void*  _stdcall Get_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_mColorValue( void *pObjectXXXX )
			{
				EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				EarthView::World::Graphic::CColourValue &objXXXX = ptrNativeObject->mColorValue;
				EarthView::World::Graphic::CColourValue *pXXXX = &objXXXX;
				return (void*)pXXXX;
			}
			extern "C" EV_DLL_EXPORT  void _stdcall Set_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_mColorValue( void *pObjectXXXX, void*  value )
			{
				((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*)pObjectXXXX)->mColorValue = *(EarthView::World::Graphic::CColourValue*)value;
			}
			extern "C" EV_DLL_EXPORT  EarthView::World::Graphic::CMovableObject*  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				if (dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*)ptrNativeObject) != NULL)
				{
					EarthView::World::Graphic::CMovableObject* objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getMovableObject();
					return objXXXX;
				}
				else
				{
					EarthView::World::Graphic::CMovableObject* objXXXX = ptrNativeObject->getMovableObject();
					return objXXXX;
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  EarthView::World::Graphic::CMovableObject*  _stdcall EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getMovableObject_CMovableObject_NoVirtual(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX;
				EarthView::World::Graphic::CMovableObject* objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable::getMovableObject();
				return objXXXX;
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getTechnique_CTechnique(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_preRender_ev_bool_CSceneManager_CRenderSystem(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_postRender_void_CSceneManager_CRenderSystem(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getNumWorldTransforms_ev_uint16(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCastsShadows_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable__updateCustomGpuParameter_void_CAutoConstantEntry_CGpuProgramParameters(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setPolygonModeOverrideable_void_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getPolygonModeOverrideable_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbient_void_CColourValue(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbient_CColourValue(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getCustomAmbientEnabled_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setCustomAmbientEnabled_void_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_addListener_void_CRenderableListener(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_removeListener_void_CRenderableListener(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_existListener_ev_bool_CRenderableListener(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListenerCount_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getListener_CRenderableListener_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_getRenderSystemData_CRenderSystemData(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData_Callback* pCallback )
			{
				CPlanargridInternalRenderableProxy* ptr = dynamic_cast<CPlanargridInternalRenderableProxy*>((EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_CPlanargridInternalRenderable_setRenderSystemData_void_CRenderSystemData(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_setPlanargridScale_void_ev_uint32(void *pObjectXXXX, _in ev_uint32 scale )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				ptrNativeObject->setPlanargridScale(scale);
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_setPlanargridLineLength_void_ev_uint32(void *pObjectXXXX, _in ev_uint32 lineLength )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				ptrNativeObject->setPlanargridLineLength(lineLength);
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_setPlanargridCentreColor_void_CColourValue(void *pObjectXXXX, _in const void* colorValue )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				ptrNativeObject->setPlanargridCentreColor(*(EarthView::World::Graphic::CColourValue*)colorValue);
			}
			extern "C" EV_DLL_EXPORT  ev_uint32  _stdcall EarthView_World_Geometry3D_CPlanargrid_getPlanargridScale_ev_uint32(void *pObjectXXXX )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				ev_uint32 objXXXX = ptrNativeObject->getPlanargridScale();
				return objXXXX;
			}
			extern "C" EV_DLL_EXPORT  ev_uint32  _stdcall EarthView_World_Geometry3D_CPlanargrid_getPlanargridLineLength_ev_uint32(void *pObjectXXXX )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				ev_uint32 objXXXX = ptrNativeObject->getPlanargridLineLength();
				return objXXXX;
			}
			extern "C" EV_DLL_EXPORT  void*  _stdcall EarthView_World_Geometry3D_CPlanargrid_getPlanargridCentreColor_CColourValue(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				EarthView::World::Graphic::CColourValue objXXXX = ptrNativeObject->getPlanargridCentreColor();
				EarthView::World::Graphic::CColourValue *pXXXX = new EarthView::World::Graphic::CColourValue(objXXXX);
				((EarthView::World::Core::CBaseObject*)pXXXX)->setExternFree(true);
				return (void*)pXXXX;
			}
			extern "C" EV_DLL_EXPORT  char*  _stdcall EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				if (dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*)ptrNativeObject) != NULL)
				{
					EVString objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::getMovableType();
					return objXXXX.makeBuffer();
				}
				else
				{
					EVString objXXXX = ptrNativeObject->getMovableType();
					return objXXXX.makeBuffer();
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  char*  _stdcall EarthView_World_Geometry3D_CPlanargrid_getMovableType_EVString_NoVirtual(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				EVString objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::getMovableType();
				return objXXXX.makeBuffer();
			}
			extern "C" EV_DLL_EXPORT  const void*  _stdcall EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				if (dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*)ptrNativeObject) != NULL)
				{
					const EarthView::World::Spatial::Math::CAxisAlignedBox& objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::getBoundingBox();
					const EarthView::World::Spatial::Math::CAxisAlignedBox *pXXXX = &objXXXX;
					return (void*)pXXXX;
				}
				else
				{
					const EarthView::World::Spatial::Math::CAxisAlignedBox& objXXXX = ptrNativeObject->getBoundingBox();
					const EarthView::World::Spatial::Math::CAxisAlignedBox *pXXXX = &objXXXX;
					return (void*)pXXXX;
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  const void*  _stdcall EarthView_World_Geometry3D_CPlanargrid_getBoundingBox_CAxisAlignedBox_NoVirtual(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				const EarthView::World::Spatial::Math::CAxisAlignedBox& objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::getBoundingBox();
				const EarthView::World::Spatial::Math::CAxisAlignedBox *pXXXX = &objXXXX;
				return (void*)pXXXX;
			}
			extern "C" EV_DLL_EXPORT  Real  _stdcall EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				if (dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*)ptrNativeObject) != NULL)
				{
					Real objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::getBoundingRadius();
					return objXXXX;
				}
				else
				{
					Real objXXXX = ptrNativeObject->getBoundingRadius();
					return objXXXX;
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  Real  _stdcall EarthView_World_Geometry3D_CPlanargrid_getBoundingRadius_Real_NoVirtual(void *pObjectXXXX )
			{
				const EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				Real objXXXX = ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::getBoundingRadius();
				return objXXXX;
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue(void *pObjectXXXX, _in EarthView::World::Graphic::CRenderQueue* queue )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				if (dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*)ptrNativeObject) != NULL)
					ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::_updateRenderQueue(queue);
				else
					ptrNativeObject->_updateRenderQueue(queue);
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid__updateRenderQueue_void_CRenderQueue_NoVirtual(void *pObjectXXXX, _in EarthView::World::Graphic::CRenderQueue* queue )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::_updateRenderQueue(queue);
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool(void *pObjectXXXX, _in EarthView::World::Graphic::CRenderable::CVisitor* visitor, _in ev_bool debugRenderables )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				if (dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*)ptrNativeObject) != NULL)
					ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::visitRenderables(visitor, debugRenderables);
				else
					ptrNativeObject->visitRenderables(visitor, debugRenderables);
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_ev_bool_NoVirtual(void *pObjectXXXX, _in EarthView::World::Graphic::CRenderable::CVisitor* visitor, _in ev_bool debugRenderables )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				ptrNativeObject->EarthView::World::Geometry3D::CPlanargrid::visitRenderables(visitor, debugRenderables);
			}
			extern "C" EV_DLL_EXPORT  void  _stdcall EarthView_World_Geometry3D_CPlanargrid_setMaterialName_void_EVString_EVString(void *pObjectXXXX, _in const char* name, _in const char* groupName )
			{
				EarthView::World::Core::ev_string name1 = name;
				EarthView::World::Core::ev_string groupName1 = groupName;
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				ptrNativeObject->setMaterialName(name1, groupName1);
			}
			extern "C" EV_DLL_EXPORT  EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*  _stdcall Get_EarthView_World_Geometry3D_CPlanargrid_mRenderable( void *pObjectXXXX )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable* objXXXX = ptrNativeObject->mRenderable;
				return objXXXX;
			}
			extern "C" EV_DLL_EXPORT  void _stdcall Set_EarthView_World_Geometry3D_CPlanargrid_mRenderable( void *pObjectXXXX, EarthView::World::Geometry3D::CPlanargrid::CPlanargridInternalRenderable*  value )
			{
				((EarthView::World::Geometry3D::CPlanargrid*)pObjectXXXX)->mRenderable = value;
			}
			extern "C" EV_DLL_EXPORT  Real  _stdcall Get_EarthView_World_Geometry3D_CPlanargrid_mBoundingRadius( void *pObjectXXXX )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				Real objXXXX = ptrNativeObject->mBoundingRadius;
				return objXXXX;
			}
			extern "C" EV_DLL_EXPORT  void _stdcall Set_EarthView_World_Geometry3D_CPlanargrid_mBoundingRadius( void *pObjectXXXX, Real  value )
			{
				((EarthView::World::Geometry3D::CPlanargrid*)pObjectXXXX)->mBoundingRadius = value;
			}
			extern "C" EV_DLL_EXPORT  void*  _stdcall Get_EarthView_World_Geometry3D_CPlanargrid_mpMaterialPtr( void *pObjectXXXX )
			{
				EarthView::World::Geometry3D::CPlanargrid* ptrNativeObject = (EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX;
				EarthView::World::Graphic::CMaterialPtr &objXXXX = ptrNativeObject->mpMaterialPtr;
				EarthView::World::Graphic::CMaterialPtr *pXXXX = &objXXXX;
				return (void*)pXXXX;
			}
			extern "C" EV_DLL_EXPORT  void _stdcall Set_EarthView_World_Geometry3D_CPlanargrid_mpMaterialPtr( void *pObjectXXXX, void*  value )
			{
				((EarthView::World::Geometry3D::CPlanargrid*)pObjectXXXX)->mpMaterialPtr = *(EarthView::World::Graphic::CMaterialPtr*)value;
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getAnimableObjectPtr_CMovableObjectInternalAnimableObject(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueId_ev_uint8(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyCreator_void_CMovableObjectFactory(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__getCreator_CMovableObjectFactory(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyManager_void_CSceneManager(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__getManager_CSceneManager(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getName_EVString( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getName_EVString_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getName_EVString(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getParentNode_CNode(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getParentSceneNode_CSceneNode(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_isParentTagPoint_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyAttached_void_CNode(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_isAttached_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_detachFromParent_void(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_isInScene_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyMoved_void(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyLightsQueried_void_LightList(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setLightQueriedListener_void_CLightQueriedListener(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getLightQueriedListener_CLightQueriedListener(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getLightListUpdated_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setLightListUpdated_void_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__notifyCurrentCamera_void_CCamera(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingSphere_CSphere(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setVisible_void_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getVisible_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_isVisible_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderingMaxDistance_void_Real(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderingMaxDistance_Real(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinDistance_void_Real(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinDistance_Real(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderingMinPixelSize_void_Real(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderingMinPixelSize_Real(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setSelectionColour_void_CColourValue(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setSelected_ev_bool_IntVector(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getSelected_IntVector(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_CVector3(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CAxisAlignedBox_ev_bool_IntVector(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_selectBy_ev_bool_CSphere_ev_bool_IntVector(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_selectComponentBy_ev_bool_CRay_CViewport_ev_bool_ev_int32_ev_int32_ev_int32_ev_int32_CVector3(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_renderSelection_void( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_renderSelection_void_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_renderSelection_void(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_clearSelection_void( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_clearSelection_void_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_clearSelection_void(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_startEditing_ev_bool_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_endEditing_void( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_endEditing_void_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_endEditing_void(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getEditBoundingBox_CEditBoundingBox(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setSelectedObjectWorldMatrix_ev_bool_ev_uint32_CMatrix4(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroup_void_ev_uint8(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setRenderQueueGroupAndPriority_void_ev_uint8_ev_uint16(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getRenderQueueGroup_ev_uint8(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__getParentNodeFullTransform_CMatrix4(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setQueryFlags_void_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_addQueryFlags_void_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_removeQueryFlags_void_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getQueryFlags_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setVisibilityFlags_void_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_addVisibilityFlags_void_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_removeVisibilityFlags_void_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getVisibilityFlags_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_addListener_void_CMovableObjectListener(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_removeListener_void_CMovableObjectListener(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_existListener_ev_bool_CMovableObjectListener(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getListenerCount_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getListener_CMovableObjectListener_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_queryLights_LightList(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getLightMask_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setLightMask_void_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid__getLightList_LightList(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setCastShadows_void_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getReceivesShadows_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getTypeFlags_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_visitRenderables_void_CVisitor(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_setDebugDisplayEnabled_void_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_isDebugDisplayEnabled_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getCastShadows_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getEdgeList_CEdgeData(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_hasEdgeList_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_ev_bool(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getWorldBoundingBox_CAxisAlignedBox(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getLightCapBounds_CAxisAlignedBox(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getDarkCapBounds_CAxisAlignedBox_CLight_Real(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getShadowVolumeRenderableIterator_ShadowRenderableListIterator_ShadowTechnique_CLight_CHardwareIndexBufferSharedPtr_ev_bool_Real(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_getPointExtrusionDistance_Real_CLight(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_updateEdgeListLightFacing_void_CEdgeData_CVector4(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_generateShadowVolume_void_CEdgeData_CHardwareIndexBufferSharedPtr_CLight_ShadowRenderableList_ev_uint32(pCallback);
				}
			}
			extern "C" EV_DLL_EXPORT  ev_void _stdcall  EV_RegisterCallback_EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real( void *pObjectXXXX, EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real_Callback* pCallback )
			{
				CPlanargridProxy* ptr = dynamic_cast<CPlanargridProxy*>((EarthView::World::Geometry3D::CPlanargrid*) pObjectXXXX);
				if(ptr != NULL)
				{
					ptr->registerCallback_EarthView_World_Geometry3D_CPlanargrid_extrudeBounds_void_CAxisAlignedBox_CVector4_Real(pCallback);
				}
			}
		}
	}
}
